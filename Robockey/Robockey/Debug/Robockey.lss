
Robockey.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000355a  000035ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000355a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800108  00800108  000035f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000035f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003628  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00003668  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c5b  00000000  00000000  00003878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e6  00000000  00000000  000064d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e63  00000000  00000000  00006db9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007c4  00000000  00000000  00007c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000923  00000000  00000000  000083e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037f4  00000000  00000000  00008d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  0000c4f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__ctors_end>
       4:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
       8:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
       c:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__vector_3>
      10:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      14:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      18:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      1c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      20:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      24:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      28:	0c 94 7e 11 	jmp	0x22fc	; 0x22fc <__vector_10>
      2c:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__vector_11>
      30:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      34:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      38:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      3c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      40:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      44:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      48:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      4c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      50:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      54:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      58:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      5c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      60:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      64:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      68:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      6c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      70:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      74:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      78:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      7c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      80:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      84:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      88:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      8c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      90:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      94:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      98:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      9c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      a0:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      a4:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      a8:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 07       	cpc	r19, r31
      da:	2c 7a       	andi	r18, 0xAC	; 172
      dc:	a5 ba       	out	0x15, r10	; 21
      de:	6c c5       	rjmp	.+2776   	; 0xbb8 <distance+0x56>
      e0:	90 da       	rcall	.-2784   	; 0xfffff602 <__eeprom_end+0xff7ef602>
      e2:	3b 93       	.word	0x933b	; ????
      e4:	65 fc       	sbrc	r6, 5
      e6:	8b bc       	out	0x2b, r8	; 43
      e8:	53 f8       	bld	r5, 3
      ea:	10 fd       	sbrc	r17, 0
      ec:	3c 56       	subi	r19, 0x6C	; 108
      ee:	92 83       	std	Z+2, r25	; 0x02
      f0:	4d bd       	out	0x2d, r20	; 45
      f2:	87 9d       	mul	r24, r7
      f4:	3a b6       	in	r3, 0x3a	; 58
      f6:	3d cb       	rjmp	.-2438   	; 0xfffff772 <__eeprom_end+0xff7ef772>
      f8:	c9 bf       	out	0x39, r28	; 57
      fa:	5b be       	out	0x3b, r5	; 59
      fc:	73 da       	rcall	.-2842   	; 0xfffff5e4 <__eeprom_end+0xff7ef5e4>
      fe:	0f c9       	rjmp	.-3554   	; 0xfffff31e <__eeprom_end+0xff7ef31e>
     100:	3f 05       	cpc	r19, r15
     102:	a8 4c       	sbci	r26, 0xC8	; 200
     104:	cd b2       	in	r12, 0x1d	; 29
     106:	d4 4e       	sbci	r29, 0xE4	; 228
     108:	b9 38       	cpi	r27, 0x89	; 137
     10a:	36 a9       	ldd	r19, Z+54	; 0x36
     10c:	02 0c       	add	r0, r2
     10e:	50 b9       	out	0x00, r21	; 0
     110:	91 86       	std	Z+9, r9	; 0x09
     112:	88 08       	sbc	r8, r8
     114:	3c a6       	std	Y+44, r3	; 0x2c
     116:	aa aa       	std	Y+50, r10	; 0x32
     118:	2a be       	out	0x3a, r2	; 58
     11a:	00 00       	nop
     11c:	00 80       	ld	r0, Z
     11e:	3f 07       	cpc	r19, r31
     120:	63 42       	sbci	r22, 0x23	; 35
     122:	36 b7       	in	r19, 0x36	; 54
     124:	9b d8       	rcall	.-3786   	; 0xfffff25c <__eeprom_end+0xff7ef25c>
     126:	a7 1a       	sub	r10, r23
     128:	39 68       	ori	r19, 0x89	; 137
     12a:	56 18       	sub	r5, r6
     12c:	ae ba       	out	0x1e, r10	; 30
     12e:	ab 55       	subi	r26, 0x5B	; 91
     130:	8c 1d       	adc	r24, r12
     132:	3c b7       	in	r19, 0x3c	; 60
     134:	cc 57       	subi	r28, 0x7C	; 124
     136:	63 bd       	out	0x23, r22	; 35
     138:	6d ed       	ldi	r22, 0xDD	; 221
     13a:	fd 75       	andi	r31, 0x5D	; 93
     13c:	3e f6       	brtc	.-114    	; 0xcc <__SREG__+0x8d>
     13e:	17 72       	andi	r17, 0x27	; 39
     140:	31 bf       	out	0x31, r19	; 49
     142:	00 00       	nop
     144:	00 80       	ld	r0, Z
     146:	3f 08       	sbc	r3, r15
     148:	00 00       	nop
     14a:	00 be       	out	0x30, r0	; 48
     14c:	92 24       	eor	r9, r2
     14e:	49 12       	cpse	r4, r25
     150:	3e ab       	std	Y+54, r19	; 0x36
     152:	aa aa       	std	Y+50, r10	; 0x32
     154:	2a be       	out	0x3a, r2	; 58
     156:	cd cc       	rjmp	.-1638   	; 0xfffffaf2 <__eeprom_end+0xff7efaf2>
     158:	cc 4c       	sbci	r28, 0xCC	; 204
     15a:	3e 00       	.word	0x003e	; ????
     15c:	00 00       	nop
     15e:	80 be       	out	0x30, r8	; 48
     160:	ab aa       	std	Y+51, r10	; 0x33
     162:	aa aa       	std	Y+50, r10	; 0x32
     164:	3e 00       	.word	0x003e	; ????
     166:	00 00       	nop
     168:	00 bf       	out	0x30, r16	; 48
     16a:	00 00       	nop
     16c:	00 80       	ld	r0, Z
     16e:	3f 00       	.word	0x003f	; ????
     170:	00 00       	nop
     172:	00 00       	nop
     174:	08 41       	sbci	r16, 0x18	; 24
     176:	78 d3       	rcall	.+1776   	; 0x868 <permute_dists+0x580>
     178:	bb 43       	sbci	r27, 0x3B	; 59
     17a:	87 d1       	rcall	.+782    	; 0x48a <permute_dists+0x1a2>
     17c:	13 3d       	cpi	r17, 0xD3	; 211
     17e:	19 0e       	add	r1, r25
     180:	3c c3       	rjmp	.+1656   	; 0x7fa <permute_dists+0x512>
     182:	bd 42       	sbci	r27, 0x2D	; 45
     184:	82 ad       	ldd	r24, Z+58	; 0x3a
     186:	2b 3e       	cpi	r18, 0xEB	; 235
     188:	68 ec       	ldi	r22, 0xC8	; 200
     18a:	82 76       	andi	r24, 0x62	; 98
     18c:	be d9       	rcall	.-3204   	; 0xfffff50a <__eeprom_end+0xff7ef50a>
     18e:	8f e1       	ldi	r24, 0x1F	; 31
     190:	a9 3e       	cpi	r26, 0xE9	; 233
     192:	4c 80       	ldd	r4, Y+4	; 0x04
     194:	ef ff       	.word	0xffef	; ????
     196:	be 01       	movw	r22, r28
     198:	c4 ff       	sbrs	r28, 4
     19a:	7f 3f       	cpi	r23, 0xFF	; 255
     19c:	00 00       	nop
     19e:	00 00       	nop
	...

000001a2 <__trampolines_end>:
     1a2:	20 64       	ori	r18, 0x40	; 64
     1a4:	69 66       	ori	r22, 0x69	; 105
     1a6:	66 20       	and	r6, r6
     1a8:	0a 00       	.word	0x000a	; ????

000001aa <__c.2152>:
     1aa:	20 62 6f 74 5f 61 6e 67 6c 65 20 0a 00               bot_angle ..

000001b7 <__c.2150>:
     1b7:	20 74 61 72 67 65 74 20 61 6e 67 6c 65 20 0a 00      target angle ..

000001c7 <__c.2148>:
     1c7:	20 74 68 65 74 61 5f 64 65 67 20 0a 00               theta_deg ..

000001d4 <__c.2146>:
     1d4:	20 79 67 20 0a 00                                    yg ..

000001da <__c.2144>:
     1da:	20 78 67 20 0a 00                                    xg ..

000001e0 <__c.2141>:
     1e0:	20 79 62 20 0a 00                                    yb ..

000001e6 <__c.2139>:
     1e6:	20 78 62 20 0a 00                                    xb ..

000001ec <__c.2137>:
     1ec:	20 79 20 0a 00                                       y ..

000001f1 <__c.2135>:
     1f1:	20 78 20 0a 00                                       x ..

000001f6 <descriptor_list>:
     1f6:	00 01 00 00 8d 02 12 00 02 00 00 4a 02 43 00 03     ...........J.C..
     206:	00 00 46 02 04 01 03 09 04 32 02 12 02 03 09 04     ..F......2......
     216:	2a 02 06 03 03 09 04 20 02 08                       *...... ..

00000220 <string3>:
     220:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

0000022a <string2>:
     22a:	06 03 4d 00 32 00 00 00                             ..M.2...

00000232 <string1>:
     232:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     242:	65 00 00 00                                         e...

00000246 <string0>:
     246:	04 03 09 04                                         ....

0000024a <config1_descriptor>:
     24a:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     25a:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     26a:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     27a:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     28a:	40 00 00                                            @..

0000028d <device_descriptor>:
     28d:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     29d:	03 01                                               ..

0000029f <endpoint_config_table>:
     29f:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

000002aa <__ctors_end>:
     2aa:	11 24       	eor	r1, r1
     2ac:	1f be       	out	0x3f, r1	; 63
     2ae:	cf ef       	ldi	r28, 0xFF	; 255
     2b0:	da e0       	ldi	r29, 0x0A	; 10
     2b2:	de bf       	out	0x3e, r29	; 62
     2b4:	cd bf       	out	0x3d, r28	; 61

000002b6 <__do_copy_data>:
     2b6:	11 e0       	ldi	r17, 0x01	; 1
     2b8:	a0 e0       	ldi	r26, 0x00	; 0
     2ba:	b1 e0       	ldi	r27, 0x01	; 1
     2bc:	ea e5       	ldi	r30, 0x5A	; 90
     2be:	f5 e3       	ldi	r31, 0x35	; 53
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <__do_copy_data+0x10>
     2c2:	05 90       	lpm	r0, Z+
     2c4:	0d 92       	st	X+, r0
     2c6:	a8 30       	cpi	r26, 0x08	; 8
     2c8:	b1 07       	cpc	r27, r17
     2ca:	d9 f7       	brne	.-10     	; 0x2c2 <__do_copy_data+0xc>

000002cc <__do_clear_bss>:
     2cc:	21 e0       	ldi	r18, 0x01	; 1
     2ce:	a8 e0       	ldi	r26, 0x08	; 8
     2d0:	b1 e0       	ldi	r27, 0x01	; 1
     2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <.do_clear_bss_start>

000002d4 <.do_clear_bss_loop>:
     2d4:	1d 92       	st	X+, r1

000002d6 <.do_clear_bss_start>:
     2d6:	ae 34       	cpi	r26, 0x4E	; 78
     2d8:	b2 07       	cpc	r27, r18
     2da:	e1 f7       	brne	.-8      	; 0x2d4 <.do_clear_bss_loop>
     2dc:	0e 94 3b 0b 	call	0x1676	; 0x1676 <main>
     2e0:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <_exit>

000002e4 <__bad_interrupt>:
     2e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002e8 <permute_dists>:
volatile int play_com = 0;

unsigned char buffer[PACKET_LENGTH] = {0,0,0,0,0,0,0,0,0,0};

int* permute_dists(int assign, volatile int* X_i)
{
     2e8:	af 92       	push	r10
     2ea:	bf 92       	push	r11
     2ec:	cf 92       	push	r12
     2ee:	df 92       	push	r13
     2f0:	ef 92       	push	r14
     2f2:	ff 92       	push	r15
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
     300:	c0 58       	subi	r28, 0x80	; 128
     302:	d1 40       	sbci	r29, 0x01	; 1
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	f8 94       	cli
     308:	de bf       	out	0x3e, r29	; 62
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	cd bf       	out	0x3d, r28	; 61
    
    int x1 = X_i[0];
     30e:	fb 01       	movw	r30, r22
     310:	e0 80       	ld	r14, Z
     312:	f1 80       	ldd	r15, Z+1	; 0x01
    int x2 = X_i[1];
     314:	a2 81       	ldd	r26, Z+2	; 0x02
     316:	b3 81       	ldd	r27, Z+3	; 0x03
    int x3 = X_i[2];
     318:	04 81       	ldd	r16, Z+4	; 0x04
     31a:	15 81       	ldd	r17, Z+5	; 0x05
    int x4 = X_i[3];
     31c:	c6 80       	ldd	r12, Z+6	; 0x06
     31e:	d7 80       	ldd	r13, Z+7	; 0x07
    int y1 = X_i[4];
     320:	a0 84       	ldd	r10, Z+8	; 0x08
     322:	b1 84       	ldd	r11, Z+9	; 0x09
    int y2 = X_i[5];
     324:	22 85       	ldd	r18, Z+10	; 0x0a
     326:	33 85       	ldd	r19, Z+11	; 0x0b
    int y3 = X_i[6];
     328:	44 85       	ldd	r20, Z+12	; 0x0c
     32a:	55 85       	ldd	r21, Z+13	; 0x0d
    int y4 = X_i[7];
     32c:	66 85       	ldd	r22, Z+14	; 0x0e
     32e:	77 85       	ldd	r23, Z+15	; 0x0f
    
    int pa_x[24][4] = {{x1,x2,x3,x4}, {x2,x1,x3,x4}, {x3,x2,x1,x4}, {x4,x2,x3,x1},
     330:	fa 82       	std	Y+2, r15	; 0x02
     332:	e9 82       	std	Y+1, r14	; 0x01
     334:	bc 83       	std	Y+4, r27	; 0x04
     336:	ab 83       	std	Y+3, r26	; 0x03
     338:	1e 83       	std	Y+6, r17	; 0x06
     33a:	0d 83       	std	Y+5, r16	; 0x05
     33c:	d8 86       	std	Y+8, r13	; 0x08
     33e:	cf 82       	std	Y+7, r12	; 0x07
     340:	ba 87       	std	Y+10, r27	; 0x0a
     342:	a9 87       	std	Y+9, r26	; 0x09
     344:	fc 86       	std	Y+12, r15	; 0x0c
     346:	eb 86       	std	Y+11, r14	; 0x0b
     348:	1e 87       	std	Y+14, r17	; 0x0e
     34a:	0d 87       	std	Y+13, r16	; 0x0d
     34c:	d8 8a       	std	Y+16, r13	; 0x10
     34e:	cf 86       	std	Y+15, r12	; 0x0f
     350:	1a 8b       	std	Y+18, r17	; 0x12
     352:	09 8b       	std	Y+17, r16	; 0x11
     354:	bc 8b       	std	Y+20, r27	; 0x14
     356:	ab 8b       	std	Y+19, r26	; 0x13
     358:	fe 8a       	std	Y+22, r15	; 0x16
     35a:	ed 8a       	std	Y+21, r14	; 0x15
     35c:	d8 8e       	std	Y+24, r13	; 0x18
     35e:	cf 8a       	std	Y+23, r12	; 0x17
     360:	da 8e       	std	Y+26, r13	; 0x1a
     362:	c9 8e       	std	Y+25, r12	; 0x19
     364:	bc 8f       	std	Y+28, r27	; 0x1c
     366:	ab 8f       	std	Y+27, r26	; 0x1b
     368:	1e 8f       	std	Y+30, r17	; 0x1e
     36a:	0d 8f       	std	Y+29, r16	; 0x1d
     36c:	f8 a2       	std	Y+32, r15	; 0x20
     36e:	ef 8e       	std	Y+31, r14	; 0x1f
     370:	fa a2       	std	Y+34, r15	; 0x22
     372:	e9 a2       	std	Y+33, r14	; 0x21
     374:	bc a3       	std	Y+36, r27	; 0x24
     376:	ab a3       	std	Y+35, r26	; 0x23
     378:	de a2       	std	Y+38, r13	; 0x26
     37a:	cd a2       	std	Y+37, r12	; 0x25
     37c:	18 a7       	std	Y+40, r17	; 0x28
     37e:	0f a3       	std	Y+39, r16	; 0x27
     380:	ba a7       	std	Y+42, r27	; 0x2a
     382:	a9 a7       	std	Y+41, r26	; 0x29
     384:	fc a6       	std	Y+44, r15	; 0x2c
     386:	eb a6       	std	Y+43, r14	; 0x2b
     388:	de a6       	std	Y+46, r13	; 0x2e
     38a:	cd a6       	std	Y+45, r12	; 0x2d
     38c:	18 ab       	std	Y+48, r17	; 0x30
     38e:	0f a7       	std	Y+47, r16	; 0x2f
     390:	1a ab       	std	Y+50, r17	; 0x32
     392:	09 ab       	std	Y+49, r16	; 0x31
     394:	bc ab       	std	Y+52, r27	; 0x34
     396:	ab ab       	std	Y+51, r26	; 0x33
     398:	de aa       	std	Y+54, r13	; 0x36
     39a:	cd aa       	std	Y+53, r12	; 0x35
     39c:	f8 ae       	std	Y+56, r15	; 0x38
     39e:	ef aa       	std	Y+55, r14	; 0x37
     3a0:	da ae       	std	Y+58, r13	; 0x3a
     3a2:	c9 ae       	std	Y+57, r12	; 0x39
     3a4:	bc af       	std	Y+60, r27	; 0x3c
     3a6:	ab af       	std	Y+59, r26	; 0x3b
     3a8:	fe ae       	std	Y+62, r15	; 0x3e
     3aa:	ed ae       	std	Y+61, r14	; 0x3d
     3ac:	21 96       	adiw	r28, 0x01	; 1
     3ae:	1f af       	std	Y+63, r17	; 0x3f
     3b0:	0e af       	std	Y+62, r16	; 0x3e
     3b2:	21 97       	sbiw	r28, 0x01	; 1
     3b4:	23 96       	adiw	r28, 0x03	; 3
     3b6:	ff ae       	std	Y+63, r15	; 0x3f
     3b8:	ee ae       	std	Y+62, r14	; 0x3e
     3ba:	23 97       	sbiw	r28, 0x03	; 3
     3bc:	25 96       	adiw	r28, 0x05	; 5
     3be:	1f af       	std	Y+63, r17	; 0x3f
     3c0:	0e af       	std	Y+62, r16	; 0x3e
     3c2:	25 97       	sbiw	r28, 0x05	; 5
     3c4:	27 96       	adiw	r28, 0x07	; 7
     3c6:	bf af       	std	Y+63, r27	; 0x3f
     3c8:	ae af       	std	Y+62, r26	; 0x3e
     3ca:	27 97       	sbiw	r28, 0x07	; 7
     3cc:	29 96       	adiw	r28, 0x09	; 9
     3ce:	df ae       	std	Y+63, r13	; 0x3f
     3d0:	ce ae       	std	Y+62, r12	; 0x3e
     3d2:	29 97       	sbiw	r28, 0x09	; 9
     3d4:	2b 96       	adiw	r28, 0x0b	; 11
     3d6:	bf af       	std	Y+63, r27	; 0x3f
     3d8:	ae af       	std	Y+62, r26	; 0x3e
     3da:	2b 97       	sbiw	r28, 0x0b	; 11
     3dc:	2d 96       	adiw	r28, 0x0d	; 13
     3de:	1f af       	std	Y+63, r17	; 0x3f
     3e0:	0e af       	std	Y+62, r16	; 0x3e
     3e2:	2d 97       	sbiw	r28, 0x0d	; 13
     3e4:	2f 96       	adiw	r28, 0x0f	; 15
     3e6:	ff ae       	std	Y+63, r15	; 0x3f
     3e8:	ee ae       	std	Y+62, r14	; 0x3e
     3ea:	2f 97       	sbiw	r28, 0x0f	; 15
     3ec:	61 96       	adiw	r28, 0x11	; 17
     3ee:	df ae       	std	Y+63, r13	; 0x3f
     3f0:	ce ae       	std	Y+62, r12	; 0x3e
     3f2:	61 97       	sbiw	r28, 0x11	; 17
     3f4:	63 96       	adiw	r28, 0x13	; 19
     3f6:	1f af       	std	Y+63, r17	; 0x3f
     3f8:	0e af       	std	Y+62, r16	; 0x3e
     3fa:	63 97       	sbiw	r28, 0x13	; 19
     3fc:	65 96       	adiw	r28, 0x15	; 21
     3fe:	ff ae       	std	Y+63, r15	; 0x3f
     400:	ee ae       	std	Y+62, r14	; 0x3e
     402:	65 97       	sbiw	r28, 0x15	; 21
     404:	67 96       	adiw	r28, 0x17	; 23
     406:	bf af       	std	Y+63, r27	; 0x3f
     408:	ae af       	std	Y+62, r26	; 0x3e
     40a:	67 97       	sbiw	r28, 0x17	; 23
     40c:	69 96       	adiw	r28, 0x19	; 25
     40e:	df ae       	std	Y+63, r13	; 0x3f
     410:	ce ae       	std	Y+62, r12	; 0x3e
     412:	69 97       	sbiw	r28, 0x19	; 25
     414:	6b 96       	adiw	r28, 0x1b	; 27
     416:	df ae       	std	Y+63, r13	; 0x3f
     418:	ce ae       	std	Y+62, r12	; 0x3e
     41a:	6b 97       	sbiw	r28, 0x1b	; 27
     41c:	6d 96       	adiw	r28, 0x1d	; 29
     41e:	1f af       	std	Y+63, r17	; 0x3f
     420:	0e af       	std	Y+62, r16	; 0x3e
     422:	6d 97       	sbiw	r28, 0x1d	; 29
     424:	6f 96       	adiw	r28, 0x1f	; 31
     426:	bf af       	std	Y+63, r27	; 0x3f
     428:	ae af       	std	Y+62, r26	; 0x3e
     42a:	6f 97       	sbiw	r28, 0x1f	; 31
     42c:	a1 96       	adiw	r28, 0x21	; 33
     42e:	ff ae       	std	Y+63, r15	; 0x3f
     430:	ee ae       	std	Y+62, r14	; 0x3e
     432:	a1 97       	sbiw	r28, 0x21	; 33
     434:	a3 96       	adiw	r28, 0x23	; 35
     436:	ff ae       	std	Y+63, r15	; 0x3f
     438:	ee ae       	std	Y+62, r14	; 0x3e
     43a:	a3 97       	sbiw	r28, 0x23	; 35
     43c:	a5 96       	adiw	r28, 0x25	; 37
     43e:	1f af       	std	Y+63, r17	; 0x3f
     440:	0e af       	std	Y+62, r16	; 0x3e
     442:	a5 97       	sbiw	r28, 0x25	; 37
     444:	a7 96       	adiw	r28, 0x27	; 39
     446:	df ae       	std	Y+63, r13	; 0x3f
     448:	ce ae       	std	Y+62, r12	; 0x3e
     44a:	a7 97       	sbiw	r28, 0x27	; 39
     44c:	a9 96       	adiw	r28, 0x29	; 41
     44e:	bf af       	std	Y+63, r27	; 0x3f
     450:	ae af       	std	Y+62, r26	; 0x3e
     452:	a9 97       	sbiw	r28, 0x29	; 41
     454:	ab 96       	adiw	r28, 0x2b	; 43
     456:	bf af       	std	Y+63, r27	; 0x3f
     458:	ae af       	std	Y+62, r26	; 0x3e
     45a:	ab 97       	sbiw	r28, 0x2b	; 43
     45c:	ad 96       	adiw	r28, 0x2d	; 45
     45e:	1f af       	std	Y+63, r17	; 0x3f
     460:	0e af       	std	Y+62, r16	; 0x3e
     462:	ad 97       	sbiw	r28, 0x2d	; 45
     464:	af 96       	adiw	r28, 0x2f	; 47
     466:	df ae       	std	Y+63, r13	; 0x3f
     468:	ce ae       	std	Y+62, r12	; 0x3e
     46a:	af 97       	sbiw	r28, 0x2f	; 47
     46c:	e1 96       	adiw	r28, 0x31	; 49
     46e:	ff ae       	std	Y+63, r15	; 0x3f
     470:	ee ae       	std	Y+62, r14	; 0x3e
     472:	e1 97       	sbiw	r28, 0x31	; 49
     474:	e3 96       	adiw	r28, 0x33	; 51
     476:	1f af       	std	Y+63, r17	; 0x3f
     478:	0e af       	std	Y+62, r16	; 0x3e
     47a:	e3 97       	sbiw	r28, 0x33	; 51
     47c:	e5 96       	adiw	r28, 0x35	; 53
     47e:	ff ae       	std	Y+63, r15	; 0x3f
     480:	ee ae       	std	Y+62, r14	; 0x3e
     482:	e5 97       	sbiw	r28, 0x35	; 53
     484:	e7 96       	adiw	r28, 0x37	; 55
     486:	df ae       	std	Y+63, r13	; 0x3f
     488:	ce ae       	std	Y+62, r12	; 0x3e
     48a:	e7 97       	sbiw	r28, 0x37	; 55
     48c:	e9 96       	adiw	r28, 0x39	; 57
     48e:	bf af       	std	Y+63, r27	; 0x3f
     490:	ae af       	std	Y+62, r26	; 0x3e
     492:	e9 97       	sbiw	r28, 0x39	; 57
     494:	eb 96       	adiw	r28, 0x3b	; 59
     496:	df ae       	std	Y+63, r13	; 0x3f
     498:	ce ae       	std	Y+62, r12	; 0x3e
     49a:	eb 97       	sbiw	r28, 0x3b	; 59
     49c:	ed 96       	adiw	r28, 0x3d	; 61
     49e:	1f af       	std	Y+63, r17	; 0x3f
     4a0:	0e af       	std	Y+62, r16	; 0x3e
     4a2:	ed 97       	sbiw	r28, 0x3d	; 61
     4a4:	ef 96       	adiw	r28, 0x3f	; 63
     4a6:	ff ae       	std	Y+63, r15	; 0x3f
     4a8:	ee ae       	std	Y+62, r14	; 0x3e
     4aa:	ef 97       	sbiw	r28, 0x3f	; 63
     4ac:	c1 58       	subi	r28, 0x81	; 129
     4ae:	df 4f       	sbci	r29, 0xFF	; 255
     4b0:	b9 83       	std	Y+1, r27	; 0x01
     4b2:	a8 83       	st	Y, r26
     4b4:	cf 57       	subi	r28, 0x7F	; 127
     4b6:	d0 40       	sbci	r29, 0x00	; 0
     4b8:	cf 57       	subi	r28, 0x7F	; 127
     4ba:	df 4f       	sbci	r29, 0xFF	; 255
     4bc:	f9 82       	std	Y+1, r15	; 0x01
     4be:	e8 82       	st	Y, r14
     4c0:	c1 58       	subi	r28, 0x81	; 129
     4c2:	d0 40       	sbci	r29, 0x00	; 0
     4c4:	cd 57       	subi	r28, 0x7D	; 125
     4c6:	df 4f       	sbci	r29, 0xFF	; 255
     4c8:	d9 82       	std	Y+1, r13	; 0x01
     4ca:	c8 82       	st	Y, r12
     4cc:	c3 58       	subi	r28, 0x83	; 131
     4ce:	d0 40       	sbci	r29, 0x00	; 0
     4d0:	cb 57       	subi	r28, 0x7B	; 123
     4d2:	df 4f       	sbci	r29, 0xFF	; 255
     4d4:	b9 83       	std	Y+1, r27	; 0x01
     4d6:	a8 83       	st	Y, r26
     4d8:	c5 58       	subi	r28, 0x85	; 133
     4da:	d0 40       	sbci	r29, 0x00	; 0
     4dc:	c9 57       	subi	r28, 0x79	; 121
     4de:	df 4f       	sbci	r29, 0xFF	; 255
     4e0:	19 83       	std	Y+1, r17	; 0x01
     4e2:	08 83       	st	Y, r16
     4e4:	c7 58       	subi	r28, 0x87	; 135
     4e6:	d0 40       	sbci	r29, 0x00	; 0
     4e8:	c7 57       	subi	r28, 0x77	; 119
     4ea:	df 4f       	sbci	r29, 0xFF	; 255
     4ec:	b9 83       	std	Y+1, r27	; 0x01
     4ee:	a8 83       	st	Y, r26
     4f0:	c9 58       	subi	r28, 0x89	; 137
     4f2:	d0 40       	sbci	r29, 0x00	; 0
     4f4:	c5 57       	subi	r28, 0x75	; 117
     4f6:	df 4f       	sbci	r29, 0xFF	; 255
     4f8:	d9 82       	std	Y+1, r13	; 0x01
     4fa:	c8 82       	st	Y, r12
     4fc:	cb 58       	subi	r28, 0x8B	; 139
     4fe:	d0 40       	sbci	r29, 0x00	; 0
     500:	c3 57       	subi	r28, 0x73	; 115
     502:	df 4f       	sbci	r29, 0xFF	; 255
     504:	f9 82       	std	Y+1, r15	; 0x01
     506:	e8 82       	st	Y, r14
     508:	cd 58       	subi	r28, 0x8D	; 141
     50a:	d0 40       	sbci	r29, 0x00	; 0
     50c:	c1 57       	subi	r28, 0x71	; 113
     50e:	df 4f       	sbci	r29, 0xFF	; 255
     510:	19 83       	std	Y+1, r17	; 0x01
     512:	08 83       	st	Y, r16
     514:	cf 58       	subi	r28, 0x8F	; 143
     516:	d0 40       	sbci	r29, 0x00	; 0
     518:	cf 56       	subi	r28, 0x6F	; 111
     51a:	df 4f       	sbci	r29, 0xFF	; 255
     51c:	19 83       	std	Y+1, r17	; 0x01
     51e:	08 83       	st	Y, r16
     520:	c1 59       	subi	r28, 0x91	; 145
     522:	d0 40       	sbci	r29, 0x00	; 0
     524:	cd 56       	subi	r28, 0x6D	; 109
     526:	df 4f       	sbci	r29, 0xFF	; 255
     528:	d9 82       	std	Y+1, r13	; 0x01
     52a:	c8 82       	st	Y, r12
     52c:	c3 59       	subi	r28, 0x93	; 147
     52e:	d0 40       	sbci	r29, 0x00	; 0
     530:	cb 56       	subi	r28, 0x6B	; 107
     532:	df 4f       	sbci	r29, 0xFF	; 255
     534:	b9 83       	std	Y+1, r27	; 0x01
     536:	a8 83       	st	Y, r26
     538:	c5 59       	subi	r28, 0x95	; 149
     53a:	d0 40       	sbci	r29, 0x00	; 0
     53c:	c9 56       	subi	r28, 0x69	; 105
     53e:	df 4f       	sbci	r29, 0xFF	; 255
     540:	f9 82       	std	Y+1, r15	; 0x01
     542:	e8 82       	st	Y, r14
     544:	c7 59       	subi	r28, 0x97	; 151
     546:	d0 40       	sbci	r29, 0x00	; 0
     548:	c7 56       	subi	r28, 0x67	; 103
     54a:	df 4f       	sbci	r29, 0xFF	; 255
     54c:	d9 82       	std	Y+1, r13	; 0x01
     54e:	c8 82       	st	Y, r12
     550:	c9 59       	subi	r28, 0x99	; 153
     552:	d0 40       	sbci	r29, 0x00	; 0
     554:	c5 56       	subi	r28, 0x65	; 101
     556:	df 4f       	sbci	r29, 0xFF	; 255
     558:	f9 82       	std	Y+1, r15	; 0x01
     55a:	e8 82       	st	Y, r14
     55c:	cb 59       	subi	r28, 0x9B	; 155
     55e:	d0 40       	sbci	r29, 0x00	; 0
     560:	c3 56       	subi	r28, 0x63	; 99
     562:	df 4f       	sbci	r29, 0xFF	; 255
     564:	b9 83       	std	Y+1, r27	; 0x01
     566:	a8 83       	st	Y, r26
     568:	cd 59       	subi	r28, 0x9D	; 157
     56a:	d0 40       	sbci	r29, 0x00	; 0
     56c:	c1 56       	subi	r28, 0x61	; 97
     56e:	df 4f       	sbci	r29, 0xFF	; 255
     570:	19 83       	std	Y+1, r17	; 0x01
     572:	08 83       	st	Y, r16
     574:	cf 59       	subi	r28, 0x9F	; 159
     576:	d0 40       	sbci	r29, 0x00	; 0
     578:	cf 55       	subi	r28, 0x5F	; 95
     57a:	df 4f       	sbci	r29, 0xFF	; 255
     57c:	f9 82       	std	Y+1, r15	; 0x01
     57e:	e8 82       	st	Y, r14
     580:	c1 5a       	subi	r28, 0xA1	; 161
     582:	d0 40       	sbci	r29, 0x00	; 0
     584:	cd 55       	subi	r28, 0x5D	; 93
     586:	df 4f       	sbci	r29, 0xFF	; 255
     588:	d9 82       	std	Y+1, r13	; 0x01
     58a:	c8 82       	st	Y, r12
     58c:	c3 5a       	subi	r28, 0xA3	; 163
     58e:	d0 40       	sbci	r29, 0x00	; 0
     590:	cb 55       	subi	r28, 0x5B	; 91
     592:	df 4f       	sbci	r29, 0xFF	; 255
     594:	19 83       	std	Y+1, r17	; 0x01
     596:	08 83       	st	Y, r16
     598:	c5 5a       	subi	r28, 0xA5	; 165
     59a:	d0 40       	sbci	r29, 0x00	; 0
     59c:	c9 55       	subi	r28, 0x59	; 89
     59e:	df 4f       	sbci	r29, 0xFF	; 255
     5a0:	b9 83       	std	Y+1, r27	; 0x01
     5a2:	a8 83       	st	Y, r26
     5a4:	c7 5a       	subi	r28, 0xA7	; 167
     5a6:	d0 40       	sbci	r29, 0x00	; 0
     5a8:	c7 55       	subi	r28, 0x57	; 87
     5aa:	df 4f       	sbci	r29, 0xFF	; 255
     5ac:	b9 83       	std	Y+1, r27	; 0x01
     5ae:	a8 83       	st	Y, r26
     5b0:	c9 5a       	subi	r28, 0xA9	; 169
     5b2:	d0 40       	sbci	r29, 0x00	; 0
     5b4:	c5 55       	subi	r28, 0x55	; 85
     5b6:	df 4f       	sbci	r29, 0xFF	; 255
     5b8:	d9 82       	std	Y+1, r13	; 0x01
     5ba:	c8 82       	st	Y, r12
     5bc:	cb 5a       	subi	r28, 0xAB	; 171
     5be:	d0 40       	sbci	r29, 0x00	; 0
     5c0:	c3 55       	subi	r28, 0x53	; 83
     5c2:	df 4f       	sbci	r29, 0xFF	; 255
     5c4:	19 83       	std	Y+1, r17	; 0x01
     5c6:	08 83       	st	Y, r16
     5c8:	cd 5a       	subi	r28, 0xAD	; 173
     5ca:	d0 40       	sbci	r29, 0x00	; 0
     5cc:	c1 55       	subi	r28, 0x51	; 81
     5ce:	df 4f       	sbci	r29, 0xFF	; 255
     5d0:	f9 82       	std	Y+1, r15	; 0x01
     5d2:	e8 82       	st	Y, r14
     5d4:	cf 5a       	subi	r28, 0xAF	; 175
     5d6:	d0 40       	sbci	r29, 0x00	; 0
     5d8:	cf 54       	subi	r28, 0x4F	; 79
     5da:	df 4f       	sbci	r29, 0xFF	; 255
     5dc:	19 83       	std	Y+1, r17	; 0x01
     5de:	08 83       	st	Y, r16
     5e0:	c1 5b       	subi	r28, 0xB1	; 177
     5e2:	d0 40       	sbci	r29, 0x00	; 0
     5e4:	cd 54       	subi	r28, 0x4D	; 77
     5e6:	df 4f       	sbci	r29, 0xFF	; 255
     5e8:	d9 82       	std	Y+1, r13	; 0x01
     5ea:	c8 82       	st	Y, r12
     5ec:	c3 5b       	subi	r28, 0xB3	; 179
     5ee:	d0 40       	sbci	r29, 0x00	; 0
     5f0:	cb 54       	subi	r28, 0x4B	; 75
     5f2:	df 4f       	sbci	r29, 0xFF	; 255
     5f4:	f9 82       	std	Y+1, r15	; 0x01
     5f6:	e8 82       	st	Y, r14
     5f8:	c5 5b       	subi	r28, 0xB5	; 181
     5fa:	d0 40       	sbci	r29, 0x00	; 0
     5fc:	c9 54       	subi	r28, 0x49	; 73
     5fe:	df 4f       	sbci	r29, 0xFF	; 255
     600:	b9 83       	std	Y+1, r27	; 0x01
     602:	a8 83       	st	Y, r26
     604:	c7 5b       	subi	r28, 0xB7	; 183
     606:	d0 40       	sbci	r29, 0x00	; 0
     608:	c7 54       	subi	r28, 0x47	; 71
     60a:	df 4f       	sbci	r29, 0xFF	; 255
     60c:	d9 82       	std	Y+1, r13	; 0x01
     60e:	c8 82       	st	Y, r12
     610:	c9 5b       	subi	r28, 0xB9	; 185
     612:	d0 40       	sbci	r29, 0x00	; 0
     614:	c5 54       	subi	r28, 0x45	; 69
     616:	df 4f       	sbci	r29, 0xFF	; 255
     618:	f9 82       	std	Y+1, r15	; 0x01
     61a:	e8 82       	st	Y, r14
     61c:	cb 5b       	subi	r28, 0xBB	; 187
     61e:	d0 40       	sbci	r29, 0x00	; 0
     620:	c3 54       	subi	r28, 0x43	; 67
     622:	df 4f       	sbci	r29, 0xFF	; 255
     624:	19 83       	std	Y+1, r17	; 0x01
     626:	08 83       	st	Y, r16
     628:	cd 5b       	subi	r28, 0xBD	; 189
     62a:	d0 40       	sbci	r29, 0x00	; 0
     62c:	c1 54       	subi	r28, 0x41	; 65
     62e:	df 4f       	sbci	r29, 0xFF	; 255
     630:	b9 83       	std	Y+1, r27	; 0x01
     632:	a8 83       	st	Y, r26
     634:	cf 5b       	subi	r28, 0xBF	; 191
     636:	d0 40       	sbci	r29, 0x00	; 0
        {x1,x3,x2,x4}, {x2,x3,x1,x4}, {x3,x1,x2,x4}, {x4,x3,x2,x1},
        {x1,x3,x4,x2}, {x2,x3,x4,x1}, {x3,x1,x4,x2}, {x4,x3,x1,x2},
        {x1,x4,x2,x3}, {x2,x4,x1,x3}, {x3,x4,x2,x1}, {x4,x1,x2,x3},
        {x1,x4,x3,x2}, {x2,x4,x3,x1}, {x3,x4,x1,x2}, {x4,x1,x3,x2}};
    
    int pa_y[24][4] = {{y1,y2,y3,y4}, {y2,y1,y3,y4}, {y3,y2,y1,y4}, {y4,y2,y3,y1},
     638:	cf 53       	subi	r28, 0x3F	; 63
     63a:	df 4f       	sbci	r29, 0xFF	; 255
     63c:	b9 82       	std	Y+1, r11	; 0x01
     63e:	a8 82       	st	Y, r10
     640:	c1 5c       	subi	r28, 0xC1	; 193
     642:	d0 40       	sbci	r29, 0x00	; 0
     644:	cd 53       	subi	r28, 0x3D	; 61
     646:	df 4f       	sbci	r29, 0xFF	; 255
     648:	39 83       	std	Y+1, r19	; 0x01
     64a:	28 83       	st	Y, r18
     64c:	c3 5c       	subi	r28, 0xC3	; 195
     64e:	d0 40       	sbci	r29, 0x00	; 0
     650:	cb 53       	subi	r28, 0x3B	; 59
     652:	df 4f       	sbci	r29, 0xFF	; 255
     654:	59 83       	std	Y+1, r21	; 0x01
     656:	48 83       	st	Y, r20
     658:	c5 5c       	subi	r28, 0xC5	; 197
     65a:	d0 40       	sbci	r29, 0x00	; 0
     65c:	c9 53       	subi	r28, 0x39	; 57
     65e:	df 4f       	sbci	r29, 0xFF	; 255
     660:	79 83       	std	Y+1, r23	; 0x01
     662:	68 83       	st	Y, r22
     664:	c7 5c       	subi	r28, 0xC7	; 199
     666:	d0 40       	sbci	r29, 0x00	; 0
     668:	c7 53       	subi	r28, 0x37	; 55
     66a:	df 4f       	sbci	r29, 0xFF	; 255
     66c:	39 83       	std	Y+1, r19	; 0x01
     66e:	28 83       	st	Y, r18
     670:	c9 5c       	subi	r28, 0xC9	; 201
     672:	d0 40       	sbci	r29, 0x00	; 0
     674:	c5 53       	subi	r28, 0x35	; 53
     676:	df 4f       	sbci	r29, 0xFF	; 255
     678:	b9 82       	std	Y+1, r11	; 0x01
     67a:	a8 82       	st	Y, r10
     67c:	cb 5c       	subi	r28, 0xCB	; 203
     67e:	d0 40       	sbci	r29, 0x00	; 0
     680:	c3 53       	subi	r28, 0x33	; 51
     682:	df 4f       	sbci	r29, 0xFF	; 255
     684:	59 83       	std	Y+1, r21	; 0x01
     686:	48 83       	st	Y, r20
     688:	cd 5c       	subi	r28, 0xCD	; 205
     68a:	d0 40       	sbci	r29, 0x00	; 0
     68c:	c1 53       	subi	r28, 0x31	; 49
     68e:	df 4f       	sbci	r29, 0xFF	; 255
     690:	79 83       	std	Y+1, r23	; 0x01
     692:	68 83       	st	Y, r22
     694:	cf 5c       	subi	r28, 0xCF	; 207
     696:	d0 40       	sbci	r29, 0x00	; 0
     698:	cf 52       	subi	r28, 0x2F	; 47
     69a:	df 4f       	sbci	r29, 0xFF	; 255
     69c:	59 83       	std	Y+1, r21	; 0x01
     69e:	48 83       	st	Y, r20
     6a0:	c1 5d       	subi	r28, 0xD1	; 209
     6a2:	d0 40       	sbci	r29, 0x00	; 0
     6a4:	cd 52       	subi	r28, 0x2D	; 45
     6a6:	df 4f       	sbci	r29, 0xFF	; 255
     6a8:	39 83       	std	Y+1, r19	; 0x01
     6aa:	28 83       	st	Y, r18
     6ac:	c3 5d       	subi	r28, 0xD3	; 211
     6ae:	d0 40       	sbci	r29, 0x00	; 0
     6b0:	cb 52       	subi	r28, 0x2B	; 43
     6b2:	df 4f       	sbci	r29, 0xFF	; 255
     6b4:	b9 82       	std	Y+1, r11	; 0x01
     6b6:	a8 82       	st	Y, r10
     6b8:	c5 5d       	subi	r28, 0xD5	; 213
     6ba:	d0 40       	sbci	r29, 0x00	; 0
     6bc:	c9 52       	subi	r28, 0x29	; 41
     6be:	df 4f       	sbci	r29, 0xFF	; 255
     6c0:	79 83       	std	Y+1, r23	; 0x01
     6c2:	68 83       	st	Y, r22
     6c4:	c7 5d       	subi	r28, 0xD7	; 215
     6c6:	d0 40       	sbci	r29, 0x00	; 0
     6c8:	c7 52       	subi	r28, 0x27	; 39
     6ca:	df 4f       	sbci	r29, 0xFF	; 255
     6cc:	79 83       	std	Y+1, r23	; 0x01
     6ce:	68 83       	st	Y, r22
     6d0:	c9 5d       	subi	r28, 0xD9	; 217
     6d2:	d0 40       	sbci	r29, 0x00	; 0
     6d4:	c5 52       	subi	r28, 0x25	; 37
     6d6:	df 4f       	sbci	r29, 0xFF	; 255
     6d8:	39 83       	std	Y+1, r19	; 0x01
     6da:	28 83       	st	Y, r18
     6dc:	cb 5d       	subi	r28, 0xDB	; 219
     6de:	d0 40       	sbci	r29, 0x00	; 0
     6e0:	c3 52       	subi	r28, 0x23	; 35
     6e2:	df 4f       	sbci	r29, 0xFF	; 255
     6e4:	59 83       	std	Y+1, r21	; 0x01
     6e6:	48 83       	st	Y, r20
     6e8:	cd 5d       	subi	r28, 0xDD	; 221
     6ea:	d0 40       	sbci	r29, 0x00	; 0
     6ec:	c1 52       	subi	r28, 0x21	; 33
     6ee:	df 4f       	sbci	r29, 0xFF	; 255
     6f0:	b9 82       	std	Y+1, r11	; 0x01
     6f2:	a8 82       	st	Y, r10
     6f4:	cf 5d       	subi	r28, 0xDF	; 223
     6f6:	d0 40       	sbci	r29, 0x00	; 0
     6f8:	cf 51       	subi	r28, 0x1F	; 31
     6fa:	df 4f       	sbci	r29, 0xFF	; 255
     6fc:	b9 82       	std	Y+1, r11	; 0x01
     6fe:	a8 82       	st	Y, r10
     700:	c1 5e       	subi	r28, 0xE1	; 225
     702:	d0 40       	sbci	r29, 0x00	; 0
     704:	cd 51       	subi	r28, 0x1D	; 29
     706:	df 4f       	sbci	r29, 0xFF	; 255
     708:	39 83       	std	Y+1, r19	; 0x01
     70a:	28 83       	st	Y, r18
     70c:	c3 5e       	subi	r28, 0xE3	; 227
     70e:	d0 40       	sbci	r29, 0x00	; 0
     710:	cb 51       	subi	r28, 0x1B	; 27
     712:	df 4f       	sbci	r29, 0xFF	; 255
     714:	79 83       	std	Y+1, r23	; 0x01
     716:	68 83       	st	Y, r22
     718:	c5 5e       	subi	r28, 0xE5	; 229
     71a:	d0 40       	sbci	r29, 0x00	; 0
     71c:	c9 51       	subi	r28, 0x19	; 25
     71e:	df 4f       	sbci	r29, 0xFF	; 255
     720:	59 83       	std	Y+1, r21	; 0x01
     722:	48 83       	st	Y, r20
     724:	c7 5e       	subi	r28, 0xE7	; 231
     726:	d0 40       	sbci	r29, 0x00	; 0
     728:	c7 51       	subi	r28, 0x17	; 23
     72a:	df 4f       	sbci	r29, 0xFF	; 255
     72c:	39 83       	std	Y+1, r19	; 0x01
     72e:	28 83       	st	Y, r18
     730:	c9 5e       	subi	r28, 0xE9	; 233
     732:	d0 40       	sbci	r29, 0x00	; 0
     734:	c5 51       	subi	r28, 0x15	; 21
     736:	df 4f       	sbci	r29, 0xFF	; 255
     738:	b9 82       	std	Y+1, r11	; 0x01
     73a:	a8 82       	st	Y, r10
     73c:	cb 5e       	subi	r28, 0xEB	; 235
     73e:	d0 40       	sbci	r29, 0x00	; 0
     740:	c3 51       	subi	r28, 0x13	; 19
     742:	df 4f       	sbci	r29, 0xFF	; 255
     744:	79 83       	std	Y+1, r23	; 0x01
     746:	68 83       	st	Y, r22
     748:	cd 5e       	subi	r28, 0xED	; 237
     74a:	d0 40       	sbci	r29, 0x00	; 0
     74c:	c1 51       	subi	r28, 0x11	; 17
     74e:	df 4f       	sbci	r29, 0xFF	; 255
     750:	59 83       	std	Y+1, r21	; 0x01
     752:	48 83       	st	Y, r20
     754:	cf 5e       	subi	r28, 0xEF	; 239
     756:	d0 40       	sbci	r29, 0x00	; 0
     758:	cf 50       	subi	r28, 0x0F	; 15
     75a:	df 4f       	sbci	r29, 0xFF	; 255
     75c:	59 83       	std	Y+1, r21	; 0x01
     75e:	48 83       	st	Y, r20
     760:	c1 5f       	subi	r28, 0xF1	; 241
     762:	d0 40       	sbci	r29, 0x00	; 0
     764:	cd 50       	subi	r28, 0x0D	; 13
     766:	df 4f       	sbci	r29, 0xFF	; 255
     768:	39 83       	std	Y+1, r19	; 0x01
     76a:	28 83       	st	Y, r18
     76c:	c3 5f       	subi	r28, 0xF3	; 243
     76e:	d0 40       	sbci	r29, 0x00	; 0
     770:	cb 50       	subi	r28, 0x0B	; 11
     772:	df 4f       	sbci	r29, 0xFF	; 255
     774:	79 83       	std	Y+1, r23	; 0x01
     776:	68 83       	st	Y, r22
     778:	c5 5f       	subi	r28, 0xF5	; 245
     77a:	d0 40       	sbci	r29, 0x00	; 0
     77c:	c9 50       	subi	r28, 0x09	; 9
     77e:	df 4f       	sbci	r29, 0xFF	; 255
     780:	b9 82       	std	Y+1, r11	; 0x01
     782:	a8 82       	st	Y, r10
     784:	c7 5f       	subi	r28, 0xF7	; 247
     786:	d0 40       	sbci	r29, 0x00	; 0
     788:	c7 50       	subi	r28, 0x07	; 7
     78a:	df 4f       	sbci	r29, 0xFF	; 255
     78c:	79 83       	std	Y+1, r23	; 0x01
     78e:	68 83       	st	Y, r22
     790:	c9 5f       	subi	r28, 0xF9	; 249
     792:	d0 40       	sbci	r29, 0x00	; 0
     794:	c5 50       	subi	r28, 0x05	; 5
     796:	df 4f       	sbci	r29, 0xFF	; 255
     798:	39 83       	std	Y+1, r19	; 0x01
     79a:	28 83       	st	Y, r18
     79c:	cb 5f       	subi	r28, 0xFB	; 251
     79e:	d0 40       	sbci	r29, 0x00	; 0
     7a0:	c3 50       	subi	r28, 0x03	; 3
     7a2:	df 4f       	sbci	r29, 0xFF	; 255
     7a4:	b9 82       	std	Y+1, r11	; 0x01
     7a6:	a8 82       	st	Y, r10
     7a8:	cd 5f       	subi	r28, 0xFD	; 253
     7aa:	d0 40       	sbci	r29, 0x00	; 0
     7ac:	c1 50       	subi	r28, 0x01	; 1
     7ae:	df 4f       	sbci	r29, 0xFF	; 255
     7b0:	59 83       	std	Y+1, r21	; 0x01
     7b2:	48 83       	st	Y, r20
     7b4:	cf 5f       	subi	r28, 0xFF	; 255
     7b6:	d0 40       	sbci	r29, 0x00	; 0
     7b8:	cf 5f       	subi	r28, 0xFF	; 255
     7ba:	de 4f       	sbci	r29, 0xFE	; 254
     7bc:	b9 82       	std	Y+1, r11	; 0x01
     7be:	a8 82       	st	Y, r10
     7c0:	c1 50       	subi	r28, 0x01	; 1
     7c2:	d1 40       	sbci	r29, 0x01	; 1
     7c4:	cd 5f       	subi	r28, 0xFD	; 253
     7c6:	de 4f       	sbci	r29, 0xFE	; 254
     7c8:	59 83       	std	Y+1, r21	; 0x01
     7ca:	48 83       	st	Y, r20
     7cc:	c3 50       	subi	r28, 0x03	; 3
     7ce:	d1 40       	sbci	r29, 0x01	; 1
     7d0:	cb 5f       	subi	r28, 0xFB	; 251
     7d2:	de 4f       	sbci	r29, 0xFE	; 254
     7d4:	39 83       	std	Y+1, r19	; 0x01
     7d6:	28 83       	st	Y, r18
     7d8:	c5 50       	subi	r28, 0x05	; 5
     7da:	d1 40       	sbci	r29, 0x01	; 1
     7dc:	c9 5f       	subi	r28, 0xF9	; 249
     7de:	de 4f       	sbci	r29, 0xFE	; 254
     7e0:	79 83       	std	Y+1, r23	; 0x01
     7e2:	68 83       	st	Y, r22
     7e4:	c7 50       	subi	r28, 0x07	; 7
     7e6:	d1 40       	sbci	r29, 0x01	; 1
     7e8:	c7 5f       	subi	r28, 0xF7	; 247
     7ea:	de 4f       	sbci	r29, 0xFE	; 254
     7ec:	39 83       	std	Y+1, r19	; 0x01
     7ee:	28 83       	st	Y, r18
     7f0:	c9 50       	subi	r28, 0x09	; 9
     7f2:	d1 40       	sbci	r29, 0x01	; 1
     7f4:	c5 5f       	subi	r28, 0xF5	; 245
     7f6:	de 4f       	sbci	r29, 0xFE	; 254
     7f8:	59 83       	std	Y+1, r21	; 0x01
     7fa:	48 83       	st	Y, r20
     7fc:	cb 50       	subi	r28, 0x0B	; 11
     7fe:	d1 40       	sbci	r29, 0x01	; 1
     800:	c3 5f       	subi	r28, 0xF3	; 243
     802:	de 4f       	sbci	r29, 0xFE	; 254
     804:	b9 82       	std	Y+1, r11	; 0x01
     806:	a8 82       	st	Y, r10
     808:	cd 50       	subi	r28, 0x0D	; 13
     80a:	d1 40       	sbci	r29, 0x01	; 1
     80c:	c1 5f       	subi	r28, 0xF1	; 241
     80e:	de 4f       	sbci	r29, 0xFE	; 254
     810:	79 83       	std	Y+1, r23	; 0x01
     812:	68 83       	st	Y, r22
     814:	cf 50       	subi	r28, 0x0F	; 15
     816:	d1 40       	sbci	r29, 0x01	; 1
     818:	cf 5e       	subi	r28, 0xEF	; 239
     81a:	de 4f       	sbci	r29, 0xFE	; 254
     81c:	59 83       	std	Y+1, r21	; 0x01
     81e:	48 83       	st	Y, r20
     820:	c1 51       	subi	r28, 0x11	; 17
     822:	d1 40       	sbci	r29, 0x01	; 1
     824:	cd 5e       	subi	r28, 0xED	; 237
     826:	de 4f       	sbci	r29, 0xFE	; 254
     828:	b9 82       	std	Y+1, r11	; 0x01
     82a:	a8 82       	st	Y, r10
     82c:	c3 51       	subi	r28, 0x13	; 19
     82e:	d1 40       	sbci	r29, 0x01	; 1
     830:	cb 5e       	subi	r28, 0xEB	; 235
     832:	de 4f       	sbci	r29, 0xFE	; 254
     834:	39 83       	std	Y+1, r19	; 0x01
     836:	28 83       	st	Y, r18
     838:	c5 51       	subi	r28, 0x15	; 21
     83a:	d1 40       	sbci	r29, 0x01	; 1
     83c:	c9 5e       	subi	r28, 0xE9	; 233
     83e:	de 4f       	sbci	r29, 0xFE	; 254
     840:	79 83       	std	Y+1, r23	; 0x01
     842:	68 83       	st	Y, r22
     844:	c7 51       	subi	r28, 0x17	; 23
     846:	d1 40       	sbci	r29, 0x01	; 1
     848:	c7 5e       	subi	r28, 0xE7	; 231
     84a:	de 4f       	sbci	r29, 0xFE	; 254
     84c:	79 83       	std	Y+1, r23	; 0x01
     84e:	68 83       	st	Y, r22
     850:	c9 51       	subi	r28, 0x19	; 25
     852:	d1 40       	sbci	r29, 0x01	; 1
     854:	c5 5e       	subi	r28, 0xE5	; 229
     856:	de 4f       	sbci	r29, 0xFE	; 254
     858:	59 83       	std	Y+1, r21	; 0x01
     85a:	48 83       	st	Y, r20
     85c:	cb 51       	subi	r28, 0x1B	; 27
     85e:	d1 40       	sbci	r29, 0x01	; 1
     860:	c3 5e       	subi	r28, 0xE3	; 227
     862:	de 4f       	sbci	r29, 0xFE	; 254
     864:	39 83       	std	Y+1, r19	; 0x01
     866:	28 83       	st	Y, r18
     868:	cd 51       	subi	r28, 0x1D	; 29
     86a:	d1 40       	sbci	r29, 0x01	; 1
     86c:	c1 5e       	subi	r28, 0xE1	; 225
     86e:	de 4f       	sbci	r29, 0xFE	; 254
     870:	b9 82       	std	Y+1, r11	; 0x01
     872:	a8 82       	st	Y, r10
     874:	cf 51       	subi	r28, 0x1F	; 31
     876:	d1 40       	sbci	r29, 0x01	; 1
     878:	cf 5d       	subi	r28, 0xDF	; 223
     87a:	de 4f       	sbci	r29, 0xFE	; 254
     87c:	b9 82       	std	Y+1, r11	; 0x01
     87e:	a8 82       	st	Y, r10
     880:	c1 52       	subi	r28, 0x21	; 33
     882:	d1 40       	sbci	r29, 0x01	; 1
     884:	cd 5d       	subi	r28, 0xDD	; 221
     886:	de 4f       	sbci	r29, 0xFE	; 254
     888:	59 83       	std	Y+1, r21	; 0x01
     88a:	48 83       	st	Y, r20
     88c:	c3 52       	subi	r28, 0x23	; 35
     88e:	d1 40       	sbci	r29, 0x01	; 1
     890:	cb 5d       	subi	r28, 0xDB	; 219
     892:	de 4f       	sbci	r29, 0xFE	; 254
     894:	79 83       	std	Y+1, r23	; 0x01
     896:	68 83       	st	Y, r22
     898:	c5 52       	subi	r28, 0x25	; 37
     89a:	d1 40       	sbci	r29, 0x01	; 1
     89c:	c9 5d       	subi	r28, 0xD9	; 217
     89e:	de 4f       	sbci	r29, 0xFE	; 254
     8a0:	39 83       	std	Y+1, r19	; 0x01
     8a2:	28 83       	st	Y, r18
     8a4:	c7 52       	subi	r28, 0x27	; 39
     8a6:	d1 40       	sbci	r29, 0x01	; 1
     8a8:	c7 5d       	subi	r28, 0xD7	; 215
     8aa:	de 4f       	sbci	r29, 0xFE	; 254
     8ac:	39 83       	std	Y+1, r19	; 0x01
     8ae:	28 83       	st	Y, r18
     8b0:	c9 52       	subi	r28, 0x29	; 41
     8b2:	d1 40       	sbci	r29, 0x01	; 1
     8b4:	c5 5d       	subi	r28, 0xD5	; 213
     8b6:	de 4f       	sbci	r29, 0xFE	; 254
     8b8:	59 83       	std	Y+1, r21	; 0x01
     8ba:	48 83       	st	Y, r20
     8bc:	cb 52       	subi	r28, 0x2B	; 43
     8be:	d1 40       	sbci	r29, 0x01	; 1
     8c0:	c3 5d       	subi	r28, 0xD3	; 211
     8c2:	de 4f       	sbci	r29, 0xFE	; 254
     8c4:	79 83       	std	Y+1, r23	; 0x01
     8c6:	68 83       	st	Y, r22
     8c8:	cd 52       	subi	r28, 0x2D	; 45
     8ca:	d1 40       	sbci	r29, 0x01	; 1
     8cc:	c1 5d       	subi	r28, 0xD1	; 209
     8ce:	de 4f       	sbci	r29, 0xFE	; 254
     8d0:	b9 82       	std	Y+1, r11	; 0x01
     8d2:	a8 82       	st	Y, r10
     8d4:	cf 52       	subi	r28, 0x2F	; 47
     8d6:	d1 40       	sbci	r29, 0x01	; 1
     8d8:	cf 5c       	subi	r28, 0xCF	; 207
     8da:	de 4f       	sbci	r29, 0xFE	; 254
     8dc:	59 83       	std	Y+1, r21	; 0x01
     8de:	48 83       	st	Y, r20
     8e0:	c1 53       	subi	r28, 0x31	; 49
     8e2:	d1 40       	sbci	r29, 0x01	; 1
     8e4:	cd 5c       	subi	r28, 0xCD	; 205
     8e6:	de 4f       	sbci	r29, 0xFE	; 254
     8e8:	b9 82       	std	Y+1, r11	; 0x01
     8ea:	a8 82       	st	Y, r10
     8ec:	c3 53       	subi	r28, 0x33	; 51
     8ee:	d1 40       	sbci	r29, 0x01	; 1
     8f0:	cb 5c       	subi	r28, 0xCB	; 203
     8f2:	de 4f       	sbci	r29, 0xFE	; 254
     8f4:	79 83       	std	Y+1, r23	; 0x01
     8f6:	68 83       	st	Y, r22
     8f8:	c5 53       	subi	r28, 0x35	; 53
     8fa:	d1 40       	sbci	r29, 0x01	; 1
     8fc:	c9 5c       	subi	r28, 0xC9	; 201
     8fe:	de 4f       	sbci	r29, 0xFE	; 254
     900:	39 83       	std	Y+1, r19	; 0x01
     902:	28 83       	st	Y, r18
     904:	c7 53       	subi	r28, 0x37	; 55
     906:	d1 40       	sbci	r29, 0x01	; 1
     908:	c7 5c       	subi	r28, 0xC7	; 199
     90a:	de 4f       	sbci	r29, 0xFE	; 254
     90c:	79 83       	std	Y+1, r23	; 0x01
     90e:	68 83       	st	Y, r22
     910:	c9 53       	subi	r28, 0x39	; 57
     912:	d1 40       	sbci	r29, 0x01	; 1
     914:	c5 5c       	subi	r28, 0xC5	; 197
     916:	de 4f       	sbci	r29, 0xFE	; 254
     918:	59 83       	std	Y+1, r21	; 0x01
     91a:	48 83       	st	Y, r20
     91c:	cb 53       	subi	r28, 0x3B	; 59
     91e:	d1 40       	sbci	r29, 0x01	; 1
     920:	c3 5c       	subi	r28, 0xC3	; 195
     922:	de 4f       	sbci	r29, 0xFE	; 254
     924:	b9 82       	std	Y+1, r11	; 0x01
     926:	a8 82       	st	Y, r10
     928:	cd 53       	subi	r28, 0x3D	; 61
     92a:	d1 40       	sbci	r29, 0x01	; 1
     92c:	c1 5c       	subi	r28, 0xC1	; 193
     92e:	de 4f       	sbci	r29, 0xFE	; 254
     930:	39 83       	std	Y+1, r19	; 0x01
     932:	28 83       	st	Y, r18
     934:	cf 53       	subi	r28, 0x3F	; 63
     936:	d1 40       	sbci	r29, 0x01	; 1
     938:	cf 5b       	subi	r28, 0xBF	; 191
     93a:	de 4f       	sbci	r29, 0xFE	; 254
     93c:	b9 82       	std	Y+1, r11	; 0x01
     93e:	a8 82       	st	Y, r10
     940:	c1 54       	subi	r28, 0x41	; 65
     942:	d1 40       	sbci	r29, 0x01	; 1
     944:	cd 5b       	subi	r28, 0xBD	; 189
     946:	de 4f       	sbci	r29, 0xFE	; 254
     948:	79 83       	std	Y+1, r23	; 0x01
     94a:	68 83       	st	Y, r22
     94c:	c3 54       	subi	r28, 0x43	; 67
     94e:	d1 40       	sbci	r29, 0x01	; 1
     950:	cb 5b       	subi	r28, 0xBB	; 187
     952:	de 4f       	sbci	r29, 0xFE	; 254
     954:	39 83       	std	Y+1, r19	; 0x01
     956:	28 83       	st	Y, r18
     958:	c5 54       	subi	r28, 0x45	; 69
     95a:	d1 40       	sbci	r29, 0x01	; 1
     95c:	c9 5b       	subi	r28, 0xB9	; 185
     95e:	de 4f       	sbci	r29, 0xFE	; 254
     960:	59 83       	std	Y+1, r21	; 0x01
     962:	48 83       	st	Y, r20
     964:	c7 54       	subi	r28, 0x47	; 71
     966:	d1 40       	sbci	r29, 0x01	; 1
     968:	c7 5b       	subi	r28, 0xB7	; 183
     96a:	de 4f       	sbci	r29, 0xFE	; 254
     96c:	39 83       	std	Y+1, r19	; 0x01
     96e:	28 83       	st	Y, r18
     970:	c9 54       	subi	r28, 0x49	; 73
     972:	d1 40       	sbci	r29, 0x01	; 1
     974:	c5 5b       	subi	r28, 0xB5	; 181
     976:	de 4f       	sbci	r29, 0xFE	; 254
     978:	79 83       	std	Y+1, r23	; 0x01
     97a:	68 83       	st	Y, r22
     97c:	cb 54       	subi	r28, 0x4B	; 75
     97e:	d1 40       	sbci	r29, 0x01	; 1
     980:	c3 5b       	subi	r28, 0xB3	; 179
     982:	de 4f       	sbci	r29, 0xFE	; 254
     984:	b9 82       	std	Y+1, r11	; 0x01
     986:	a8 82       	st	Y, r10
     988:	cd 54       	subi	r28, 0x4D	; 77
     98a:	d1 40       	sbci	r29, 0x01	; 1
     98c:	c1 5b       	subi	r28, 0xB1	; 177
     98e:	de 4f       	sbci	r29, 0xFE	; 254
     990:	59 83       	std	Y+1, r21	; 0x01
     992:	48 83       	st	Y, r20
     994:	cf 54       	subi	r28, 0x4F	; 79
     996:	d1 40       	sbci	r29, 0x01	; 1
     998:	cf 5a       	subi	r28, 0xAF	; 175
     99a:	de 4f       	sbci	r29, 0xFE	; 254
     99c:	59 83       	std	Y+1, r21	; 0x01
     99e:	48 83       	st	Y, r20
     9a0:	c1 55       	subi	r28, 0x51	; 81
     9a2:	d1 40       	sbci	r29, 0x01	; 1
     9a4:	cd 5a       	subi	r28, 0xAD	; 173
     9a6:	de 4f       	sbci	r29, 0xFE	; 254
     9a8:	79 83       	std	Y+1, r23	; 0x01
     9aa:	68 83       	st	Y, r22
     9ac:	c3 55       	subi	r28, 0x53	; 83
     9ae:	d1 40       	sbci	r29, 0x01	; 1
     9b0:	cb 5a       	subi	r28, 0xAB	; 171
     9b2:	de 4f       	sbci	r29, 0xFE	; 254
     9b4:	39 83       	std	Y+1, r19	; 0x01
     9b6:	28 83       	st	Y, r18
     9b8:	c5 55       	subi	r28, 0x55	; 85
     9ba:	d1 40       	sbci	r29, 0x01	; 1
     9bc:	c9 5a       	subi	r28, 0xA9	; 169
     9be:	de 4f       	sbci	r29, 0xFE	; 254
     9c0:	b9 82       	std	Y+1, r11	; 0x01
     9c2:	a8 82       	st	Y, r10
     9c4:	c7 55       	subi	r28, 0x57	; 87
     9c6:	d1 40       	sbci	r29, 0x01	; 1
     9c8:	c7 5a       	subi	r28, 0xA7	; 167
     9ca:	de 4f       	sbci	r29, 0xFE	; 254
     9cc:	79 83       	std	Y+1, r23	; 0x01
     9ce:	68 83       	st	Y, r22
     9d0:	c9 55       	subi	r28, 0x59	; 89
     9d2:	d1 40       	sbci	r29, 0x01	; 1
     9d4:	c5 5a       	subi	r28, 0xA5	; 165
     9d6:	de 4f       	sbci	r29, 0xFE	; 254
     9d8:	b9 82       	std	Y+1, r11	; 0x01
     9da:	a8 82       	st	Y, r10
     9dc:	cb 55       	subi	r28, 0x5B	; 91
     9de:	d1 40       	sbci	r29, 0x01	; 1
     9e0:	c3 5a       	subi	r28, 0xA3	; 163
     9e2:	de 4f       	sbci	r29, 0xFE	; 254
     9e4:	39 83       	std	Y+1, r19	; 0x01
     9e6:	28 83       	st	Y, r18
     9e8:	cd 55       	subi	r28, 0x5D	; 93
     9ea:	d1 40       	sbci	r29, 0x01	; 1
     9ec:	c1 5a       	subi	r28, 0xA1	; 161
     9ee:	de 4f       	sbci	r29, 0xFE	; 254
     9f0:	59 83       	std	Y+1, r21	; 0x01
     9f2:	48 83       	st	Y, r20
     9f4:	cf 55       	subi	r28, 0x5F	; 95
     9f6:	d1 40       	sbci	r29, 0x01	; 1
     9f8:	cf 59       	subi	r28, 0x9F	; 159
     9fa:	de 4f       	sbci	r29, 0xFE	; 254
     9fc:	b9 82       	std	Y+1, r11	; 0x01
     9fe:	a8 82       	st	Y, r10
     a00:	c1 56       	subi	r28, 0x61	; 97
     a02:	d1 40       	sbci	r29, 0x01	; 1
     a04:	cd 59       	subi	r28, 0x9D	; 157
     a06:	de 4f       	sbci	r29, 0xFE	; 254
     a08:	79 83       	std	Y+1, r23	; 0x01
     a0a:	68 83       	st	Y, r22
     a0c:	c3 56       	subi	r28, 0x63	; 99
     a0e:	d1 40       	sbci	r29, 0x01	; 1
     a10:	cb 59       	subi	r28, 0x9B	; 155
     a12:	de 4f       	sbci	r29, 0xFE	; 254
     a14:	59 83       	std	Y+1, r21	; 0x01
     a16:	48 83       	st	Y, r20
     a18:	c5 56       	subi	r28, 0x65	; 101
     a1a:	d1 40       	sbci	r29, 0x01	; 1
     a1c:	c9 59       	subi	r28, 0x99	; 153
     a1e:	de 4f       	sbci	r29, 0xFE	; 254
     a20:	39 83       	std	Y+1, r19	; 0x01
     a22:	28 83       	st	Y, r18
     a24:	c7 56       	subi	r28, 0x67	; 103
     a26:	d1 40       	sbci	r29, 0x01	; 1
     a28:	c7 59       	subi	r28, 0x97	; 151
     a2a:	de 4f       	sbci	r29, 0xFE	; 254
     a2c:	39 83       	std	Y+1, r19	; 0x01
     a2e:	28 83       	st	Y, r18
     a30:	c9 56       	subi	r28, 0x69	; 105
     a32:	d1 40       	sbci	r29, 0x01	; 1
     a34:	c5 59       	subi	r28, 0x95	; 149
     a36:	de 4f       	sbci	r29, 0xFE	; 254
     a38:	79 83       	std	Y+1, r23	; 0x01
     a3a:	68 83       	st	Y, r22
     a3c:	cb 56       	subi	r28, 0x6B	; 107
     a3e:	d1 40       	sbci	r29, 0x01	; 1
     a40:	c3 59       	subi	r28, 0x93	; 147
     a42:	de 4f       	sbci	r29, 0xFE	; 254
     a44:	59 83       	std	Y+1, r21	; 0x01
     a46:	48 83       	st	Y, r20
     a48:	cd 56       	subi	r28, 0x6D	; 109
     a4a:	d1 40       	sbci	r29, 0x01	; 1
     a4c:	c1 59       	subi	r28, 0x91	; 145
     a4e:	de 4f       	sbci	r29, 0xFE	; 254
     a50:	b9 82       	std	Y+1, r11	; 0x01
     a52:	a8 82       	st	Y, r10
     a54:	cf 56       	subi	r28, 0x6F	; 111
     a56:	d1 40       	sbci	r29, 0x01	; 1
     a58:	cf 58       	subi	r28, 0x8F	; 143
     a5a:	de 4f       	sbci	r29, 0xFE	; 254
     a5c:	59 83       	std	Y+1, r21	; 0x01
     a5e:	48 83       	st	Y, r20
     a60:	c1 57       	subi	r28, 0x71	; 113
     a62:	d1 40       	sbci	r29, 0x01	; 1
     a64:	cd 58       	subi	r28, 0x8D	; 141
     a66:	de 4f       	sbci	r29, 0xFE	; 254
     a68:	79 83       	std	Y+1, r23	; 0x01
     a6a:	68 83       	st	Y, r22
     a6c:	c3 57       	subi	r28, 0x73	; 115
     a6e:	d1 40       	sbci	r29, 0x01	; 1
     a70:	cb 58       	subi	r28, 0x8B	; 139
     a72:	de 4f       	sbci	r29, 0xFE	; 254
     a74:	b9 82       	std	Y+1, r11	; 0x01
     a76:	a8 82       	st	Y, r10
     a78:	c5 57       	subi	r28, 0x75	; 117
     a7a:	d1 40       	sbci	r29, 0x01	; 1
     a7c:	c9 58       	subi	r28, 0x89	; 137
     a7e:	de 4f       	sbci	r29, 0xFE	; 254
     a80:	39 83       	std	Y+1, r19	; 0x01
     a82:	28 83       	st	Y, r18
     a84:	c7 57       	subi	r28, 0x77	; 119
     a86:	d1 40       	sbci	r29, 0x01	; 1
     a88:	c7 58       	subi	r28, 0x87	; 135
     a8a:	de 4f       	sbci	r29, 0xFE	; 254
     a8c:	79 83       	std	Y+1, r23	; 0x01
     a8e:	68 83       	st	Y, r22
     a90:	c9 57       	subi	r28, 0x79	; 121
     a92:	d1 40       	sbci	r29, 0x01	; 1
     a94:	c5 58       	subi	r28, 0x85	; 133
     a96:	de 4f       	sbci	r29, 0xFE	; 254
     a98:	b9 82       	std	Y+1, r11	; 0x01
     a9a:	a8 82       	st	Y, r10
     a9c:	cb 57       	subi	r28, 0x7B	; 123
     a9e:	d1 40       	sbci	r29, 0x01	; 1
     aa0:	c3 58       	subi	r28, 0x83	; 131
     aa2:	de 4f       	sbci	r29, 0xFE	; 254
     aa4:	59 83       	std	Y+1, r21	; 0x01
     aa6:	48 83       	st	Y, r20
     aa8:	cd 57       	subi	r28, 0x7D	; 125
     aaa:	d1 40       	sbci	r29, 0x01	; 1
     aac:	c1 58       	subi	r28, 0x81	; 129
     aae:	de 4f       	sbci	r29, 0xFE	; 254
     ab0:	39 83       	std	Y+1, r19	; 0x01
     ab2:	28 83       	st	Y, r18
     ab4:	cf 57       	subi	r28, 0x7F	; 127
     ab6:	d1 40       	sbci	r29, 0x01	; 1
        {y1,y3,y2,y4}, {y2,y3,y1,y4}, {y3,y1,y2,y4}, {y4,y3,y2,y1},
        {y1,y3,y4,y2}, {y2,y3,y4,y1}, {y3,y1,y4,y2}, {y4,y3,y1,y2},
        {y1,y4,y2,y3}, {y2,y4,y1,y3}, {y3,y4,y2,y1}, {y4,y1,y2,y3},
        {y1,y4,y3,y2}, {y2,y4,y3,y1}, {y3,y4,y1,y2}, {y4,y1,y3,y2}};
    
    permutation[0] = pa_x[assign][0];
     ab8:	88 0f       	add	r24, r24
     aba:	99 1f       	adc	r25, r25
     abc:	88 0f       	add	r24, r24
     abe:	99 1f       	adc	r25, r25
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	a1 e0       	ldi	r26, 0x01	; 1
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	ac 0f       	add	r26, r28
     aca:	bd 1f       	adc	r27, r29
     acc:	a8 0f       	add	r26, r24
     ace:	b9 1f       	adc	r27, r25
     ad0:	2d 91       	ld	r18, X+
     ad2:	3c 91       	ld	r19, X
     ad4:	11 97       	sbiw	r26, 0x01	; 1
     ad6:	ee e3       	ldi	r30, 0x3E	; 62
     ad8:	f1 e0       	ldi	r31, 0x01	; 1
     ada:	31 83       	std	Z+1, r19	; 0x01
     adc:	20 83       	st	Z, r18
    permutation[1] = pa_x[assign][1];
     ade:	12 96       	adiw	r26, 0x02	; 2
     ae0:	2d 91       	ld	r18, X+
     ae2:	3c 91       	ld	r19, X
     ae4:	13 97       	sbiw	r26, 0x03	; 3
     ae6:	33 83       	std	Z+3, r19	; 0x03
     ae8:	22 83       	std	Z+2, r18	; 0x02
    permutation[2] = pa_x[assign][2];
     aea:	14 96       	adiw	r26, 0x04	; 4
     aec:	2d 91       	ld	r18, X+
     aee:	3c 91       	ld	r19, X
     af0:	15 97       	sbiw	r26, 0x05	; 5
     af2:	35 83       	std	Z+5, r19	; 0x05
     af4:	24 83       	std	Z+4, r18	; 0x04
    permutation[3] = pa_x[assign][3];
     af6:	16 96       	adiw	r26, 0x06	; 6
     af8:	2d 91       	ld	r18, X+
     afa:	3c 91       	ld	r19, X
     afc:	17 97       	sbiw	r26, 0x07	; 7
     afe:	37 83       	std	Z+7, r19	; 0x07
     b00:	26 83       	std	Z+6, r18	; 0x06
    
    permutation[4] = pa_y[assign][0];
     b02:	a1 ec       	ldi	r26, 0xC1	; 193
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	ac 0f       	add	r26, r28
     b08:	bd 1f       	adc	r27, r29
     b0a:	a8 0f       	add	r26, r24
     b0c:	b9 1f       	adc	r27, r25
     b0e:	8d 91       	ld	r24, X+
     b10:	9c 91       	ld	r25, X
     b12:	11 97       	sbiw	r26, 0x01	; 1
     b14:	91 87       	std	Z+9, r25	; 0x09
     b16:	80 87       	std	Z+8, r24	; 0x08
    permutation[5] = pa_y[assign][1];
     b18:	12 96       	adiw	r26, 0x02	; 2
     b1a:	8d 91       	ld	r24, X+
     b1c:	9c 91       	ld	r25, X
     b1e:	13 97       	sbiw	r26, 0x03	; 3
     b20:	93 87       	std	Z+11, r25	; 0x0b
     b22:	82 87       	std	Z+10, r24	; 0x0a
    permutation[6] = pa_y[assign][2];
     b24:	14 96       	adiw	r26, 0x04	; 4
     b26:	8d 91       	ld	r24, X+
     b28:	9c 91       	ld	r25, X
     b2a:	15 97       	sbiw	r26, 0x05	; 5
     b2c:	95 87       	std	Z+13, r25	; 0x0d
     b2e:	84 87       	std	Z+12, r24	; 0x0c
    permutation[7] = pa_y[assign][3];
     b30:	16 96       	adiw	r26, 0x06	; 6
     b32:	8d 91       	ld	r24, X+
     b34:	9c 91       	ld	r25, X
     b36:	17 97       	sbiw	r26, 0x07	; 7
     b38:	97 87       	std	Z+15, r25	; 0x0f
     b3a:	86 87       	std	Z+14, r24	; 0x0e
    
    return permutation;
}
     b3c:	cf 01       	movw	r24, r30
     b3e:	c0 58       	subi	r28, 0x80	; 128
     b40:	de 4f       	sbci	r29, 0xFE	; 254
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	ff 90       	pop	r15
     b56:	ef 90       	pop	r14
     b58:	df 90       	pop	r13
     b5a:	cf 90       	pop	r12
     b5c:	bf 90       	pop	r11
     b5e:	af 90       	pop	r10
     b60:	08 95       	ret

00000b62 <distance>:


float distance(int x1, int y1, int x2, int y2)
{
     b62:	8f 92       	push	r8
     b64:	9f 92       	push	r9
     b66:	af 92       	push	r10
     b68:	bf 92       	push	r11
     b6a:	cf 92       	push	r12
     b6c:	df 92       	push	r13
     b6e:	ef 92       	push	r14
     b70:	ff 92       	push	r15
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	eb 01       	movw	r28, r22
     b7c:	89 01       	movw	r16, r18
    float dist;
    dist = pow((pow((x1-x2),2) + pow((y1-y2),2)),0.5);
     b7e:	84 1b       	sub	r24, r20
     b80:	95 0b       	sbc	r25, r21
     b82:	bc 01       	movw	r22, r24
     b84:	99 0f       	add	r25, r25
     b86:	88 0b       	sbc	r24, r24
     b88:	99 0b       	sbc	r25, r25
     b8a:	0e 94 db 16 	call	0x2db6	; 0x2db6 <__floatsisf>
     b8e:	6b 01       	movw	r12, r22
     b90:	7c 01       	movw	r14, r24
     b92:	ce 01       	movw	r24, r28
     b94:	80 1b       	sub	r24, r16
     b96:	91 0b       	sbc	r25, r17
     b98:	bc 01       	movw	r22, r24
     b9a:	99 0f       	add	r25, r25
     b9c:	88 0b       	sbc	r24, r24
     b9e:	99 0b       	sbc	r25, r25
     ba0:	0e 94 db 16 	call	0x2db6	; 0x2db6 <__floatsisf>
     ba4:	4b 01       	movw	r8, r22
     ba6:	5c 01       	movw	r10, r24
     ba8:	a7 01       	movw	r20, r14
     baa:	96 01       	movw	r18, r12
     bac:	c7 01       	movw	r24, r14
     bae:	b6 01       	movw	r22, r12
     bb0:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
     bb4:	6b 01       	movw	r12, r22
     bb6:	7c 01       	movw	r14, r24
     bb8:	a5 01       	movw	r20, r10
     bba:	94 01       	movw	r18, r8
     bbc:	c5 01       	movw	r24, r10
     bbe:	b4 01       	movw	r22, r8
     bc0:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
     bc4:	9b 01       	movw	r18, r22
     bc6:	ac 01       	movw	r20, r24
     bc8:	c7 01       	movw	r24, r14
     bca:	b6 01       	movw	r22, r12
     bcc:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__addsf3>
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	5f e3       	ldi	r21, 0x3F	; 63
     bd8:	0e 94 8b 18 	call	0x3116	; 0x3116 <pow>
    return dist;
}
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	ff 90       	pop	r15
     be6:	ef 90       	pop	r14
     be8:	df 90       	pop	r13
     bea:	cf 90       	pop	r12
     bec:	bf 90       	pop	r11
     bee:	af 90       	pop	r10
     bf0:	9f 90       	pop	r9
     bf2:	8f 90       	pop	r8
     bf4:	08 95       	ret

00000bf6 <loss>:



int loss(int X_i, float star_length)
{
     bf6:	2f 92       	push	r2
     bf8:	3f 92       	push	r3
     bfa:	4f 92       	push	r4
     bfc:	5f 92       	push	r5
     bfe:	6f 92       	push	r6
     c00:	7f 92       	push	r7
     c02:	8f 92       	push	r8
     c04:	9f 92       	push	r9
     c06:	af 92       	push	r10
     c08:	bf 92       	push	r11
     c0a:	cf 92       	push	r12
     c0c:	df 92       	push	r13
     c0e:	ef 92       	push	r14
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
     c1e:	e8 97       	sbiw	r28, 0x38	; 56
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	9e ab       	std	Y+54, r25	; 0x36
     c2c:	8d ab       	std	Y+53, r24	; 0x35
     c2e:	cb 01       	movw	r24, r22
     c30:	ba 01       	movw	r22, r20
    float BD_p;
    float CD_p;

    int i;

    ratio = star_length / AC;
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	48 ee       	ldi	r20, 0xE8	; 232
     c38:	51 e4       	ldi	r21, 0x41	; 65
     c3a:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__divsf3>
     c3e:	6b 01       	movw	r12, r22
     c40:	7c 01       	movw	r14, r24

    AB_p = AB * ratio;
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	40 e5       	ldi	r20, 0x50	; 80
     c48:	51 e4       	ldi	r21, 0x41	; 65
     c4a:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
     c4e:	6d 8f       	std	Y+29, r22	; 0x1d
     c50:	7e 8f       	std	Y+30, r23	; 0x1e
     c52:	8f 8f       	std	Y+31, r24	; 0x1f
     c54:	98 a3       	std	Y+32, r25	; 0x20
    AC_p = AC * ratio;
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	48 ee       	ldi	r20, 0xE8	; 232
     c5c:	51 e4       	ldi	r21, 0x41	; 65
     c5e:	c7 01       	movw	r24, r14
     c60:	b6 01       	movw	r22, r12
     c62:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
     c66:	69 a3       	std	Y+33, r22	; 0x21
     c68:	7a a3       	std	Y+34, r23	; 0x22
     c6a:	8b a3       	std	Y+35, r24	; 0x23
     c6c:	9c a3       	std	Y+36, r25	; 0x24
    AD_p = AD * ratio;
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	40 e8       	ldi	r20, 0x80	; 128
     c74:	51 e4       	ldi	r21, 0x41	; 65
     c76:	c7 01       	movw	r24, r14
     c78:	b6 01       	movw	r22, r12
     c7a:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
     c7e:	6d a3       	std	Y+37, r22	; 0x25
     c80:	7e a3       	std	Y+38, r23	; 0x26
     c82:	8f a3       	std	Y+39, r24	; 0x27
     c84:	98 a7       	std	Y+40, r25	; 0x28
    BC_p = BC * ratio;
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 ed       	ldi	r20, 0xD0	; 208
     c8c:	51 e4       	ldi	r21, 0x41	; 65
     c8e:	c7 01       	movw	r24, r14
     c90:	b6 01       	movw	r22, r12
     c92:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
     c96:	69 a7       	std	Y+41, r22	; 0x29
     c98:	7a a7       	std	Y+42, r23	; 0x2a
     c9a:	8b a7       	std	Y+43, r24	; 0x2b
     c9c:	9c a7       	std	Y+44, r25	; 0x2c
    BD_p = BD * ratio;
     c9e:	26 ef       	ldi	r18, 0xF6	; 246
     ca0:	38 ea       	ldi	r19, 0xA8	; 168
     ca2:	48 eb       	ldi	r20, 0xB8	; 184
     ca4:	51 e4       	ldi	r21, 0x41	; 65
     ca6:	c7 01       	movw	r24, r14
     ca8:	b6 01       	movw	r22, r12
     caa:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
     cae:	6d a7       	std	Y+45, r22	; 0x2d
     cb0:	7e a7       	std	Y+46, r23	; 0x2e
     cb2:	8f a7       	std	Y+47, r24	; 0x2f
     cb4:	98 ab       	std	Y+48, r25	; 0x30
    CD_p = CD * ratio;
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	40 ea       	ldi	r20, 0xA0	; 160
     cbc:	51 e4       	ldi	r21, 0x41	; 65
     cbe:	c7 01       	movw	r24, r14
     cc0:	b6 01       	movw	r22, r12
     cc2:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
     cc6:	69 ab       	std	Y+49, r22	; 0x31
     cc8:	7a ab       	std	Y+50, r23	; 0x32
     cca:	8b ab       	std	Y+51, r24	; 0x33
     ccc:	9c ab       	std	Y+52, r25	; 0x34
    
    for (i = 0; i < 24; i++)
     cce:	61 2c       	mov	r6, r1
     cd0:	71 2c       	mov	r7, r1

int loss(int X_i, float star_length)
{

    float ratio;
    float min_score = 10000;
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	90 e4       	ldi	r25, 0x40	; 64
     cd6:	ac e1       	ldi	r26, 0x1C	; 28
     cd8:	b6 e4       	ldi	r27, 0x46	; 70
     cda:	89 8f       	std	Y+25, r24	; 0x19
     cdc:	9a 8f       	std	Y+26, r25	; 0x1a
     cde:	ab 8f       	std	Y+27, r26	; 0x1b
     ce0:	bc 8f       	std	Y+28, r27	; 0x1c
     ce2:	63 01       	movw	r12, r6
        float dist_24;
        float dist_34;

        volatile float score;

        permutation = permute_dists(i, X_i);
     ce4:	6d a9       	ldd	r22, Y+53	; 0x35
     ce6:	7e a9       	ldd	r23, Y+54	; 0x36
     ce8:	c6 01       	movw	r24, r12
     cea:	0e 94 74 01 	call	0x2e8	; 0x2e8 <permute_dists>
     cee:	fc 01       	movw	r30, r24

        x1 = permutation[0];
     cf0:	e0 80       	ld	r14, Z
     cf2:	f1 80       	ldd	r15, Z+1	; 0x01
        x2 = permutation[1];
     cf4:	82 80       	ldd	r8, Z+2	; 0x02
     cf6:	93 80       	ldd	r9, Z+3	; 0x03
        x3 = permutation[2];
     cf8:	64 80       	ldd	r6, Z+4	; 0x04
     cfa:	75 80       	ldd	r7, Z+5	; 0x05
        x4 = permutation[3];
     cfc:	a6 80       	ldd	r10, Z+6	; 0x06
     cfe:	b7 80       	ldd	r11, Z+7	; 0x07
        y1 = permutation[4];
     d00:	00 85       	ldd	r16, Z+8	; 0x08
     d02:	11 85       	ldd	r17, Z+9	; 0x09
        y2 = permutation[5];
     d04:	a2 85       	ldd	r26, Z+10	; 0x0a
     d06:	b3 85       	ldd	r27, Z+11	; 0x0b
     d08:	be 83       	std	Y+6, r27	; 0x06
     d0a:	ad 83       	std	Y+5, r26	; 0x05
        y3 = permutation[6];
     d0c:	44 84       	ldd	r4, Z+12	; 0x0c
     d0e:	55 84       	ldd	r5, Z+13	; 0x0d
        y4 = permutation[7];
     d10:	26 84       	ldd	r2, Z+14	; 0x0e
     d12:	37 84       	ldd	r3, Z+15	; 0x0f

        dist_12 = distance(x1, y1, x2, y2);
     d14:	9d 01       	movw	r18, r26
     d16:	a4 01       	movw	r20, r8
     d18:	b8 01       	movw	r22, r16
     d1a:	c7 01       	movw	r24, r14
     d1c:	0e 94 b1 05 	call	0xb62	; 0xb62 <distance>
     d20:	69 87       	std	Y+9, r22	; 0x09
     d22:	7a 87       	std	Y+10, r23	; 0x0a
     d24:	8b 87       	std	Y+11, r24	; 0x0b
     d26:	9c 87       	std	Y+12, r25	; 0x0c
        dist_13 = distance(x1, y1, x3, y3);
     d28:	92 01       	movw	r18, r4
     d2a:	a3 01       	movw	r20, r6
     d2c:	b8 01       	movw	r22, r16
     d2e:	c7 01       	movw	r24, r14
     d30:	0e 94 b1 05 	call	0xb62	; 0xb62 <distance>
     d34:	6d 87       	std	Y+13, r22	; 0x0d
     d36:	7e 87       	std	Y+14, r23	; 0x0e
     d38:	8f 87       	std	Y+15, r24	; 0x0f
     d3a:	98 8b       	std	Y+16, r25	; 0x10
        dist_14 = distance(x1, y1, x4, y4);
     d3c:	91 01       	movw	r18, r2
     d3e:	a5 01       	movw	r20, r10
     d40:	b8 01       	movw	r22, r16
     d42:	c7 01       	movw	r24, r14
     d44:	0e 94 b1 05 	call	0xb62	; 0xb62 <distance>
     d48:	69 8b       	std	Y+17, r22	; 0x11
     d4a:	7a 8b       	std	Y+18, r23	; 0x12
     d4c:	8b 8b       	std	Y+19, r24	; 0x13
     d4e:	9c 8b       	std	Y+20, r25	; 0x14
        dist_23 = distance(x2, y2, x3, y3);
     d50:	92 01       	movw	r18, r4
     d52:	a3 01       	movw	r20, r6
     d54:	6d 81       	ldd	r22, Y+5	; 0x05
     d56:	7e 81       	ldd	r23, Y+6	; 0x06
     d58:	c4 01       	movw	r24, r8
     d5a:	0e 94 b1 05 	call	0xb62	; 0xb62 <distance>
     d5e:	6d 8b       	std	Y+21, r22	; 0x15
     d60:	7e 8b       	std	Y+22, r23	; 0x16
     d62:	8f 8b       	std	Y+23, r24	; 0x17
     d64:	98 8f       	std	Y+24, r25	; 0x18
        dist_24 = distance(x2, y2, x4, y4);
     d66:	91 01       	movw	r18, r2
     d68:	a5 01       	movw	r20, r10
     d6a:	6d 81       	ldd	r22, Y+5	; 0x05
     d6c:	7e 81       	ldd	r23, Y+6	; 0x06
     d6e:	c4 01       	movw	r24, r8
     d70:	0e 94 b1 05 	call	0xb62	; 0xb62 <distance>
     d74:	6d 83       	std	Y+5, r22	; 0x05
     d76:	7e 83       	std	Y+6, r23	; 0x06
     d78:	8f 83       	std	Y+7, r24	; 0x07
     d7a:	98 87       	std	Y+8, r25	; 0x08
        dist_34 = distance(x3, y3, x4, y4);
     d7c:	91 01       	movw	r18, r2
     d7e:	a5 01       	movw	r20, r10
     d80:	b2 01       	movw	r22, r4
     d82:	c3 01       	movw	r24, r6
     d84:	0e 94 b1 05 	call	0xb62	; 0xb62 <distance>
     d88:	4b 01       	movw	r8, r22
     d8a:	5c 01       	movw	r10, r24
        
        score = abs(dist_12 - AB_p) + abs(dist_13 - AC_p) + abs(dist_14 - AD_p) +
     d8c:	2d 8d       	ldd	r18, Y+29	; 0x1d
     d8e:	3e 8d       	ldd	r19, Y+30	; 0x1e
     d90:	4f 8d       	ldd	r20, Y+31	; 0x1f
     d92:	58 a1       	ldd	r21, Y+32	; 0x20
     d94:	69 85       	ldd	r22, Y+9	; 0x09
     d96:	7a 85       	ldd	r23, Y+10	; 0x0a
     d98:	8b 85       	ldd	r24, Y+11	; 0x0b
     d9a:	9c 85       	ldd	r25, Y+12	; 0x0c
     d9c:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
     da0:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fixsfsi>
     da4:	8b 01       	movw	r16, r22
     da6:	77 23       	and	r23, r23
     da8:	24 f4       	brge	.+8      	; 0xdb2 <loss+0x1bc>
     daa:	00 27       	eor	r16, r16
     dac:	11 27       	eor	r17, r17
     dae:	06 1b       	sub	r16, r22
     db0:	17 0b       	sbc	r17, r23
     db2:	29 a1       	ldd	r18, Y+33	; 0x21
     db4:	3a a1       	ldd	r19, Y+34	; 0x22
     db6:	4b a1       	ldd	r20, Y+35	; 0x23
     db8:	5c a1       	ldd	r21, Y+36	; 0x24
     dba:	6d 85       	ldd	r22, Y+13	; 0x0d
     dbc:	7e 85       	ldd	r23, Y+14	; 0x0e
     dbe:	8f 85       	ldd	r24, Y+15	; 0x0f
     dc0:	98 89       	ldd	r25, Y+16	; 0x10
     dc2:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
     dc6:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fixsfsi>
     dca:	9b 01       	movw	r18, r22
     dcc:	77 23       	and	r23, r23
     dce:	24 f4       	brge	.+8      	; 0xdd8 <loss+0x1e2>
     dd0:	22 27       	eor	r18, r18
     dd2:	33 27       	eor	r19, r19
     dd4:	26 1b       	sub	r18, r22
     dd6:	37 0b       	sbc	r19, r23
     dd8:	02 0f       	add	r16, r18
     dda:	13 1f       	adc	r17, r19
     ddc:	2d a1       	ldd	r18, Y+37	; 0x25
     dde:	3e a1       	ldd	r19, Y+38	; 0x26
     de0:	4f a1       	ldd	r20, Y+39	; 0x27
     de2:	58 a5       	ldd	r21, Y+40	; 0x28
     de4:	69 89       	ldd	r22, Y+17	; 0x11
     de6:	7a 89       	ldd	r23, Y+18	; 0x12
     de8:	8b 89       	ldd	r24, Y+19	; 0x13
     dea:	9c 89       	ldd	r25, Y+20	; 0x14
     dec:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
     df0:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fixsfsi>
     df4:	9b 01       	movw	r18, r22
     df6:	77 23       	and	r23, r23
     df8:	24 f4       	brge	.+8      	; 0xe02 <loss+0x20c>
     dfa:	22 27       	eor	r18, r18
     dfc:	33 27       	eor	r19, r19
     dfe:	26 1b       	sub	r18, r22
     e00:	37 0b       	sbc	r19, r23
     e02:	02 0f       	add	r16, r18
     e04:	13 1f       	adc	r17, r19
        abs(dist_23 - BC_p) + abs(dist_24 - BD_p) + abs(dist_34 - CD_p);
     e06:	29 a5       	ldd	r18, Y+41	; 0x29
     e08:	3a a5       	ldd	r19, Y+42	; 0x2a
     e0a:	4b a5       	ldd	r20, Y+43	; 0x2b
     e0c:	5c a5       	ldd	r21, Y+44	; 0x2c
     e0e:	6d 89       	ldd	r22, Y+21	; 0x15
     e10:	7e 89       	ldd	r23, Y+22	; 0x16
     e12:	8f 89       	ldd	r24, Y+23	; 0x17
     e14:	98 8d       	ldd	r25, Y+24	; 0x18
     e16:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
     e1a:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fixsfsi>
     e1e:	9b 01       	movw	r18, r22
     e20:	77 23       	and	r23, r23
     e22:	24 f4       	brge	.+8      	; 0xe2c <loss+0x236>
     e24:	22 27       	eor	r18, r18
     e26:	33 27       	eor	r19, r19
     e28:	26 1b       	sub	r18, r22
     e2a:	37 0b       	sbc	r19, r23
        dist_14 = distance(x1, y1, x4, y4);
        dist_23 = distance(x2, y2, x3, y3);
        dist_24 = distance(x2, y2, x4, y4);
        dist_34 = distance(x3, y3, x4, y4);
        
        score = abs(dist_12 - AB_p) + abs(dist_13 - AC_p) + abs(dist_14 - AD_p) +
     e2c:	02 0f       	add	r16, r18
     e2e:	13 1f       	adc	r17, r19
        abs(dist_23 - BC_p) + abs(dist_24 - BD_p) + abs(dist_34 - CD_p);
     e30:	2d a5       	ldd	r18, Y+45	; 0x2d
     e32:	3e a5       	ldd	r19, Y+46	; 0x2e
     e34:	4f a5       	ldd	r20, Y+47	; 0x2f
     e36:	58 a9       	ldd	r21, Y+48	; 0x30
     e38:	6d 81       	ldd	r22, Y+5	; 0x05
     e3a:	7e 81       	ldd	r23, Y+6	; 0x06
     e3c:	8f 81       	ldd	r24, Y+7	; 0x07
     e3e:	98 85       	ldd	r25, Y+8	; 0x08
     e40:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
     e44:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fixsfsi>
     e48:	9b 01       	movw	r18, r22
     e4a:	77 23       	and	r23, r23
     e4c:	24 f4       	brge	.+8      	; 0xe56 <loss+0x260>
     e4e:	22 27       	eor	r18, r18
     e50:	33 27       	eor	r19, r19
     e52:	26 1b       	sub	r18, r22
     e54:	37 0b       	sbc	r19, r23
     e56:	02 0f       	add	r16, r18
     e58:	13 1f       	adc	r17, r19
     e5a:	29 a9       	ldd	r18, Y+49	; 0x31
     e5c:	3a a9       	ldd	r19, Y+50	; 0x32
     e5e:	4b a9       	ldd	r20, Y+51	; 0x33
     e60:	5c a9       	ldd	r21, Y+52	; 0x34
     e62:	c5 01       	movw	r24, r10
     e64:	b4 01       	movw	r22, r8
     e66:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
     e6a:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fixsfsi>
     e6e:	9b 01       	movw	r18, r22
     e70:	77 23       	and	r23, r23
     e72:	24 f4       	brge	.+8      	; 0xe7c <loss+0x286>
     e74:	22 27       	eor	r18, r18
     e76:	33 27       	eor	r19, r19
     e78:	26 1b       	sub	r18, r22
     e7a:	37 0b       	sbc	r19, r23
     e7c:	b8 01       	movw	r22, r16
     e7e:	62 0f       	add	r22, r18
     e80:	73 1f       	adc	r23, r19
        dist_14 = distance(x1, y1, x4, y4);
        dist_23 = distance(x2, y2, x3, y3);
        dist_24 = distance(x2, y2, x4, y4);
        dist_34 = distance(x3, y3, x4, y4);
        
        score = abs(dist_12 - AB_p) + abs(dist_13 - AC_p) + abs(dist_14 - AD_p) +
     e82:	07 2e       	mov	r0, r23
     e84:	00 0c       	add	r0, r0
     e86:	88 0b       	sbc	r24, r24
     e88:	99 0b       	sbc	r25, r25
     e8a:	0e 94 db 16 	call	0x2db6	; 0x2db6 <__floatsisf>
     e8e:	69 83       	std	Y+1, r22	; 0x01
     e90:	7a 83       	std	Y+2, r23	; 0x02
     e92:	8b 83       	std	Y+3, r24	; 0x03
     e94:	9c 83       	std	Y+4, r25	; 0x04
        abs(dist_23 - BC_p) + abs(dist_24 - BD_p) + abs(dist_34 - CD_p);

        if (score < min_score)
     e96:	69 81       	ldd	r22, Y+1	; 0x01
     e98:	7a 81       	ldd	r23, Y+2	; 0x02
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	9c 81       	ldd	r25, Y+4	; 0x04
     e9e:	29 8d       	ldd	r18, Y+25	; 0x19
     ea0:	3a 8d       	ldd	r19, Y+26	; 0x1a
     ea2:	4b 8d       	ldd	r20, Y+27	; 0x1b
     ea4:	5c 8d       	ldd	r21, Y+28	; 0x1c
     ea6:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
     eaa:	88 23       	and	r24, r24
     eac:	54 f4       	brge	.+20     	; 0xec2 <loss+0x2cc>
        {
            min_score = score;
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	9a 81       	ldd	r25, Y+2	; 0x02
     eb2:	ab 81       	ldd	r26, Y+3	; 0x03
     eb4:	bc 81       	ldd	r27, Y+4	; 0x04
     eb6:	89 8f       	std	Y+25, r24	; 0x19
     eb8:	9a 8f       	std	Y+26, r25	; 0x1a
     eba:	ab 8f       	std	Y+27, r26	; 0x1b
     ebc:	bc 8f       	std	Y+28, r27	; 0x1c
     ebe:	cf aa       	std	Y+55, r12	; 0x37
     ec0:	d8 ae       	std	Y+56, r13	; 0x38
    AD_p = AD * ratio;
    BC_p = BC * ratio;
    BD_p = BD * ratio;
    CD_p = CD * ratio;
    
    for (i = 0; i < 24; i++)
     ec2:	9f ef       	ldi	r25, 0xFF	; 255
     ec4:	c9 1a       	sub	r12, r25
     ec6:	d9 0a       	sbc	r13, r25
     ec8:	a8 e1       	ldi	r26, 0x18	; 24
     eca:	ca 16       	cp	r12, r26
     ecc:	d1 04       	cpc	r13, r1
     ece:	09 f0       	breq	.+2      	; 0xed2 <loss+0x2dc>
     ed0:	09 cf       	rjmp	.-494    	; 0xce4 <loss+0xee>

    }
    
    return min_assignment;

}
     ed2:	8f a9       	ldd	r24, Y+55	; 0x37
     ed4:	98 ad       	ldd	r25, Y+56	; 0x38
     ed6:	e8 96       	adiw	r28, 0x38	; 56
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	ff 90       	pop	r15
     eec:	ef 90       	pop	r14
     eee:	df 90       	pop	r13
     ef0:	cf 90       	pop	r12
     ef2:	bf 90       	pop	r11
     ef4:	af 90       	pop	r10
     ef6:	9f 90       	pop	r9
     ef8:	8f 90       	pop	r8
     efa:	7f 90       	pop	r7
     efc:	6f 90       	pop	r6
     efe:	5f 90       	pop	r5
     f00:	4f 90       	pop	r4
     f02:	3f 90       	pop	r3
     f04:	2f 90       	pop	r2
     f06:	08 95       	ret

00000f08 <adjust_angle>:

float adjust_angle(float angle, float vect_1, float vect_2) {
     f08:	2f 92       	push	r2
     f0a:	3f 92       	push	r3
     f0c:	4f 92       	push	r4
     f0e:	5f 92       	push	r5
     f10:	6f 92       	push	r6
     f12:	7f 92       	push	r7
     f14:	8f 92       	push	r8
     f16:	9f 92       	push	r9
     f18:	af 92       	push	r10
     f1a:	bf 92       	push	r11
     f1c:	cf 92       	push	r12
     f1e:	df 92       	push	r13
     f20:	ef 92       	push	r14
     f22:	ff 92       	push	r15
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <adjust_angle+0x26>
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <adjust_angle+0x28>
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	96 2e       	mov	r9, r22
     f36:	a7 2e       	mov	r10, r23
     f38:	b8 2e       	mov	r11, r24
     f3a:	c9 2e       	mov	r12, r25
     f3c:	29 01       	movw	r4, r18
     f3e:	3a 01       	movw	r6, r20
     f40:	e9 82       	std	Y+1, r14	; 0x01
     f42:	fa 82       	std	Y+2, r15	; 0x02
     f44:	0b 83       	std	Y+3, r16	; 0x03
     f46:	1c 83       	std	Y+4, r17	; 0x04
    
    float angle_adj;
    
    if (vect_1 >= 0 && vect_2 >= 0) {
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	a9 01       	movw	r20, r18
     f4e:	c3 01       	movw	r24, r6
     f50:	b2 01       	movw	r22, r4
     f52:	0e 94 11 18 	call	0x3022	; 0x3022 <__gesf2>
     f56:	88 23       	and	r24, r24
     f58:	5c f0       	brlt	.+22     	; 0xf70 <adjust_angle+0x68>
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	a9 01       	movw	r20, r18
     f60:	c8 01       	movw	r24, r16
     f62:	b7 01       	movw	r22, r14
     f64:	0e 94 11 18 	call	0x3022	; 0x3022 <__gesf2>
     f68:	88 23       	and	r24, r24
     f6a:	0c f0       	brlt	.+2      	; 0xf6e <adjust_angle+0x66>
     f6c:	5c c0       	rjmp	.+184    	; 0x1026 <adjust_angle+0x11e>
     f6e:	09 c0       	rjmp	.+18     	; 0xf82 <adjust_angle+0x7a>
        angle_adj = angle;
    } else if (vect_1 >= 0 && vect_2 < 0) {
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	a9 01       	movw	r20, r18
     f76:	c3 01       	movw	r24, r6
     f78:	b2 01       	movw	r22, r4
     f7a:	0e 94 11 18 	call	0x3022	; 0x3022 <__gesf2>
     f7e:	88 23       	and	r24, r24
     f80:	64 f0       	brlt	.+24     	; 0xf9a <adjust_angle+0x92>
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	a9 01       	movw	r20, r18
     f88:	69 81       	ldd	r22, Y+1	; 0x01
     f8a:	7a 81       	ldd	r23, Y+2	; 0x02
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	9c 81       	ldd	r25, Y+4	; 0x04
     f90:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
     f94:	88 23       	and	r24, r24
     f96:	0c f4       	brge	.+2      	; 0xf9a <adjust_angle+0x92>
     f98:	4b c0       	rjmp	.+150    	; 0x1030 <adjust_angle+0x128>
        angle_adj = angle;
    } else if (vect_1 < 0 && vect_2 >= 0) {
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	a9 01       	movw	r20, r18
     fa0:	c3 01       	movw	r24, r6
     fa2:	b2 01       	movw	r22, r4
     fa4:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
     fa8:	88 23       	and	r24, r24
     faa:	d4 f4       	brge	.+52     	; 0xfe0 <adjust_angle+0xd8>
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	a9 01       	movw	r20, r18
     fb2:	69 81       	ldd	r22, Y+1	; 0x01
     fb4:	7a 81       	ldd	r23, Y+2	; 0x02
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	9c 81       	ldd	r25, Y+4	; 0x04
     fba:	0e 94 11 18 	call	0x3022	; 0x3022 <__gesf2>
     fbe:	88 23       	and	r24, r24
     fc0:	c4 f0       	brlt	.+48     	; 0xff2 <adjust_angle+0xea>
        angle_adj = angle + 180;
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	44 e3       	ldi	r20, 0x34	; 52
     fc8:	53 e4       	ldi	r21, 0x43	; 67
     fca:	69 2d       	mov	r22, r9
     fcc:	7a 2d       	mov	r23, r10
     fce:	8b 2d       	mov	r24, r11
     fd0:	9c 2d       	mov	r25, r12
     fd2:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__addsf3>
     fd6:	d6 2e       	mov	r13, r22
     fd8:	27 2e       	mov	r2, r23
     fda:	38 2e       	mov	r3, r24
     fdc:	89 2e       	mov	r8, r25
     fde:	2c c0       	rjmp	.+88     	; 0x1038 <adjust_angle+0x130>
    } else if (vect_1 < 0 && vect_2 < 0) {
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	a9 01       	movw	r20, r18
     fe6:	c3 01       	movw	r24, r6
     fe8:	b2 01       	movw	r22, r4
     fea:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
     fee:	88 23       	and	r24, r24
     ff0:	1c f5       	brge	.+70     	; 0x1038 <adjust_angle+0x130>
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	a9 01       	movw	r20, r18
     ff8:	69 81       	ldd	r22, Y+1	; 0x01
     ffa:	7a 81       	ldd	r23, Y+2	; 0x02
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    1000:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    1004:	88 23       	and	r24, r24
    1006:	c4 f4       	brge	.+48     	; 0x1038 <adjust_angle+0x130>
        angle_adj = angle + 180;
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	44 e3       	ldi	r20, 0x34	; 52
    100e:	53 e4       	ldi	r21, 0x43	; 67
    1010:	69 2d       	mov	r22, r9
    1012:	7a 2d       	mov	r23, r10
    1014:	8b 2d       	mov	r24, r11
    1016:	9c 2d       	mov	r25, r12
    1018:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__addsf3>
    101c:	d6 2e       	mov	r13, r22
    101e:	27 2e       	mov	r2, r23
    1020:	38 2e       	mov	r3, r24
    1022:	89 2e       	mov	r8, r25
    1024:	09 c0       	rjmp	.+18     	; 0x1038 <adjust_angle+0x130>
float adjust_angle(float angle, float vect_1, float vect_2) {
    
    float angle_adj;
    
    if (vect_1 >= 0 && vect_2 >= 0) {
        angle_adj = angle;
    1026:	d9 2c       	mov	r13, r9
    1028:	2a 2c       	mov	r2, r10
    102a:	3b 2c       	mov	r3, r11
    102c:	8c 2c       	mov	r8, r12
    102e:	04 c0       	rjmp	.+8      	; 0x1038 <adjust_angle+0x130>
    } else if (vect_1 >= 0 && vect_2 < 0) {
        angle_adj = angle;
    1030:	d9 2c       	mov	r13, r9
    1032:	2a 2c       	mov	r2, r10
    1034:	3b 2c       	mov	r3, r11
    1036:	8c 2c       	mov	r8, r12
        angle_adj = angle + 180;
    }
    
    return angle_adj;
    
}
    1038:	6d 2d       	mov	r22, r13
    103a:	72 2d       	mov	r23, r2
    103c:	83 2d       	mov	r24, r3
    103e:	98 2d       	mov	r25, r8
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	ff 90       	pop	r15
    1052:	ef 90       	pop	r14
    1054:	df 90       	pop	r13
    1056:	cf 90       	pop	r12
    1058:	bf 90       	pop	r11
    105a:	af 90       	pop	r10
    105c:	9f 90       	pop	r9
    105e:	8f 90       	pop	r8
    1060:	7f 90       	pop	r7
    1062:	6f 90       	pop	r6
    1064:	5f 90       	pop	r5
    1066:	4f 90       	pop	r4
    1068:	3f 90       	pop	r3
    106a:	2f 90       	pop	r2
    106c:	08 95       	ret

0000106e <calc_angle>:


float* calc_angle(float xc, float yc, float new_x3, float new_y3)
{
    106e:	4f 92       	push	r4
    1070:	5f 92       	push	r5
    1072:	6f 92       	push	r6
    1074:	7f 92       	push	r7
    1076:	8f 92       	push	r8
    1078:	9f 92       	push	r9
    107a:	af 92       	push	r10
    107c:	bf 92       	push	r11
    107e:	cf 92       	push	r12
    1080:	df 92       	push	r13
    1082:	ef 92       	push	r14
    1084:	ff 92       	push	r15
    1086:	0f 93       	push	r16
    1088:	1f 93       	push	r17
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	a4 97       	sbiw	r28, 0x24	; 36
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	2b 01       	movw	r4, r22
    10a0:	3c 01       	movw	r6, r24
    10a2:	29 83       	std	Y+1, r18	; 0x01
    10a4:	3a 83       	std	Y+2, r19	; 0x02
    10a6:	4b 83       	std	Y+3, r20	; 0x03
    10a8:	5c 83       	std	Y+4, r21	; 0x04
    10aa:	e9 8e       	std	Y+25, r14	; 0x19
    10ac:	fa 8e       	std	Y+26, r15	; 0x1a
    10ae:	0b 8f       	std	Y+27, r16	; 0x1b
    10b0:	1c 8f       	std	Y+28, r17	; 0x1c
    float mid_angle_adj;
    float x3_angle_adj;
    
    float diff;

    dot = (screen_mid_x - xc)*(new_x3 - xc) + (screen_mid_y - yc)*(new_y3 - yc);
    10b2:	9b 01       	movw	r18, r22
    10b4:	ac 01       	movw	r20, r24
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	94 e4       	ldi	r25, 0x44	; 68
    10be:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    10c2:	69 87       	std	Y+9, r22	; 0x09
    10c4:	7a 87       	std	Y+10, r23	; 0x0a
    10c6:	8b 87       	std	Y+11, r24	; 0x0b
    10c8:	9c 87       	std	Y+12, r25	; 0x0c
    10ca:	a3 01       	movw	r20, r6
    10cc:	92 01       	movw	r18, r4
    10ce:	c8 01       	movw	r24, r16
    10d0:	b7 01       	movw	r22, r14
    10d2:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    10d6:	6d 87       	std	Y+13, r22	; 0x0d
    10d8:	7e 87       	std	Y+14, r23	; 0x0e
    10da:	8f 87       	std	Y+15, r24	; 0x0f
    10dc:	98 8b       	std	Y+16, r25	; 0x10
    10de:	29 81       	ldd	r18, Y+1	; 0x01
    10e0:	3a 81       	ldd	r19, Y+2	; 0x02
    10e2:	4b 81       	ldd	r20, Y+3	; 0x03
    10e4:	5c 81       	ldd	r21, Y+4	; 0x04
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	70 e0       	ldi	r23, 0x00	; 0
    10ea:	80 ec       	ldi	r24, 0xC0	; 192
    10ec:	93 e4       	ldi	r25, 0x43	; 67
    10ee:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    10f2:	69 8b       	std	Y+17, r22	; 0x11
    10f4:	7a 8b       	std	Y+18, r23	; 0x12
    10f6:	8b 8b       	std	Y+19, r24	; 0x13
    10f8:	9c 8b       	std	Y+20, r25	; 0x14
    10fa:	29 81       	ldd	r18, Y+1	; 0x01
    10fc:	3a 81       	ldd	r19, Y+2	; 0x02
    10fe:	4b 81       	ldd	r20, Y+3	; 0x03
    1100:	5c 81       	ldd	r21, Y+4	; 0x04
    1102:	c6 01       	movw	r24, r12
    1104:	b5 01       	movw	r22, r10
    1106:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    110a:	6d 8b       	std	Y+21, r22	; 0x15
    110c:	7e 8b       	std	Y+22, r23	; 0x16
    110e:	8f 8b       	std	Y+23, r24	; 0x17
    1110:	98 8f       	std	Y+24, r25	; 0x18
    1112:	2d 85       	ldd	r18, Y+13	; 0x0d
    1114:	3e 85       	ldd	r19, Y+14	; 0x0e
    1116:	4f 85       	ldd	r20, Y+15	; 0x0f
    1118:	58 89       	ldd	r21, Y+16	; 0x10
    111a:	69 85       	ldd	r22, Y+9	; 0x09
    111c:	7a 85       	ldd	r23, Y+10	; 0x0a
    111e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1120:	9c 85       	ldd	r25, Y+12	; 0x0c
    1122:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    1126:	6d 83       	std	Y+5, r22	; 0x05
    1128:	7e 83       	std	Y+6, r23	; 0x06
    112a:	8f 83       	std	Y+7, r24	; 0x07
    112c:	98 87       	std	Y+8, r25	; 0x08
    112e:	2d 89       	ldd	r18, Y+21	; 0x15
    1130:	3e 89       	ldd	r19, Y+22	; 0x16
    1132:	4f 89       	ldd	r20, Y+23	; 0x17
    1134:	58 8d       	ldd	r21, Y+24	; 0x18
    1136:	69 89       	ldd	r22, Y+17	; 0x11
    1138:	7a 89       	ldd	r23, Y+18	; 0x12
    113a:	8b 89       	ldd	r24, Y+19	; 0x13
    113c:	9c 89       	ldd	r25, Y+20	; 0x14
    113e:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    1142:	9b 01       	movw	r18, r22
    1144:	ac 01       	movw	r20, r24
    1146:	6d 81       	ldd	r22, Y+5	; 0x05
    1148:	7e 81       	ldd	r23, Y+6	; 0x06
    114a:	8f 81       	ldd	r24, Y+7	; 0x07
    114c:	98 85       	ldd	r25, Y+8	; 0x08
    114e:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__addsf3>
    1152:	69 a3       	std	Y+33, r22	; 0x21
    1154:	7a a3       	std	Y+34, r23	; 0x22
    1156:	8b a3       	std	Y+35, r24	; 0x23
    1158:	9c a3       	std	Y+36, r25	; 0x24
    angle = acos(dot / ((distance(screen_mid_x,screen_mid_y,xc,yc)*(distance(new_x3,new_y3,xc,yc)))));
    115a:	69 81       	ldd	r22, Y+1	; 0x01
    115c:	7a 81       	ldd	r23, Y+2	; 0x02
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fixsfsi>
    1166:	69 83       	std	Y+1, r22	; 0x01
    1168:	7a 83       	std	Y+2, r23	; 0x02
    116a:	8b 83       	std	Y+3, r24	; 0x03
    116c:	9c 83       	std	Y+4, r25	; 0x04
    116e:	c3 01       	movw	r24, r6
    1170:	b2 01       	movw	r22, r4
    1172:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fixsfsi>
    1176:	6d 83       	std	Y+5, r22	; 0x05
    1178:	7e 83       	std	Y+6, r23	; 0x06
    117a:	8f 83       	std	Y+7, r24	; 0x07
    117c:	98 87       	std	Y+8, r25	; 0x08
    117e:	29 81       	ldd	r18, Y+1	; 0x01
    1180:	3a 81       	ldd	r19, Y+2	; 0x02
    1182:	4d 81       	ldd	r20, Y+5	; 0x05
    1184:	5e 81       	ldd	r21, Y+6	; 0x06
    1186:	60 e8       	ldi	r22, 0x80	; 128
    1188:	71 e0       	ldi	r23, 0x01	; 1
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	92 e0       	ldi	r25, 0x02	; 2
    118e:	0e 94 b1 05 	call	0xb62	; 0xb62 <distance>
    1192:	6d 8f       	std	Y+29, r22	; 0x1d
    1194:	7e 8f       	std	Y+30, r23	; 0x1e
    1196:	8f 8f       	std	Y+31, r24	; 0x1f
    1198:	98 a3       	std	Y+32, r25	; 0x20
    119a:	c6 01       	movw	r24, r12
    119c:	b5 01       	movw	r22, r10
    119e:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fixsfsi>
    11a2:	2b 01       	movw	r4, r22
    11a4:	3c 01       	movw	r6, r24
    11a6:	c8 01       	movw	r24, r16
    11a8:	b7 01       	movw	r22, r14
    11aa:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fixsfsi>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	29 81       	ldd	r18, Y+1	; 0x01
    11b4:	3a 81       	ldd	r19, Y+2	; 0x02
    11b6:	4d 81       	ldd	r20, Y+5	; 0x05
    11b8:	5e 81       	ldd	r21, Y+6	; 0x06
    11ba:	b2 01       	movw	r22, r4
    11bc:	0e 94 b1 05 	call	0xb62	; 0xb62 <distance>
    11c0:	9b 01       	movw	r18, r22
    11c2:	ac 01       	movw	r20, r24
    11c4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    11c6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    11c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11ca:	98 a1       	ldd	r25, Y+32	; 0x20
    11cc:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    11d0:	9b 01       	movw	r18, r22
    11d2:	ac 01       	movw	r20, r24
    11d4:	69 a1       	ldd	r22, Y+33	; 0x21
    11d6:	7a a1       	ldd	r23, Y+34	; 0x22
    11d8:	8b a1       	ldd	r24, Y+35	; 0x23
    11da:	9c a1       	ldd	r25, Y+36	; 0x24
    11dc:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__divsf3>
    11e0:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <acos>
    11e4:	2b 01       	movw	r4, r22
    11e6:	3c 01       	movw	r6, r24
    
    mid_angle = atan((screen_mid_y - yc) / (screen_mid_x - xc));
    11e8:	29 85       	ldd	r18, Y+9	; 0x09
    11ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    11ec:	4b 85       	ldd	r20, Y+11	; 0x0b
    11ee:	5c 85       	ldd	r21, Y+12	; 0x0c
    11f0:	69 89       	ldd	r22, Y+17	; 0x11
    11f2:	7a 89       	ldd	r23, Y+18	; 0x12
    11f4:	8b 89       	ldd	r24, Y+19	; 0x13
    11f6:	9c 89       	ldd	r25, Y+20	; 0x14
    11f8:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__divsf3>
    11fc:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <atan>
    1200:	6b 01       	movw	r12, r22
    1202:	7c 01       	movw	r14, r24
    x3_angle = atan((new_y3 - yc) / (new_x3 - xc));
    1204:	2d 85       	ldd	r18, Y+13	; 0x0d
    1206:	3e 85       	ldd	r19, Y+14	; 0x0e
    1208:	4f 85       	ldd	r20, Y+15	; 0x0f
    120a:	58 89       	ldd	r21, Y+16	; 0x10
    120c:	6d 89       	ldd	r22, Y+21	; 0x15
    120e:	7e 89       	ldd	r23, Y+22	; 0x16
    1210:	8f 89       	ldd	r24, Y+23	; 0x17
    1212:	98 8d       	ldd	r25, Y+24	; 0x18
    1214:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__divsf3>
    1218:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <atan>
    121c:	4b 01       	movw	r8, r22
    121e:	5c 01       	movw	r10, r24
    
    angle_d = angle * (180.0 / PI);
    1220:	20 ee       	ldi	r18, 0xE0	; 224
    1222:	3e e2       	ldi	r19, 0x2E	; 46
    1224:	45 e6       	ldi	r20, 0x65	; 101
    1226:	52 e4       	ldi	r21, 0x42	; 66
    1228:	c3 01       	movw	r24, r6
    122a:	b2 01       	movw	r22, r4
    122c:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    1230:	2b 01       	movw	r4, r22
    1232:	3c 01       	movw	r6, r24
    mid_angle_d = mid_angle * (180.0 / PI);
    1234:	20 ee       	ldi	r18, 0xE0	; 224
    1236:	3e e2       	ldi	r19, 0x2E	; 46
    1238:	45 e6       	ldi	r20, 0x65	; 101
    123a:	52 e4       	ldi	r21, 0x42	; 66
    123c:	c7 01       	movw	r24, r14
    123e:	b6 01       	movw	r22, r12
    1240:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    x3_angle_d = x3_angle * (180.0 / PI);
    
    mid_angle_adj = adjust_angle(mid_angle_d, screen_mid_x - xc, screen_mid_y - yc);
    1244:	e9 88       	ldd	r14, Y+17	; 0x11
    1246:	fa 88       	ldd	r15, Y+18	; 0x12
    1248:	0b 89       	ldd	r16, Y+19	; 0x13
    124a:	1c 89       	ldd	r17, Y+20	; 0x14
    124c:	29 85       	ldd	r18, Y+9	; 0x09
    124e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1250:	4b 85       	ldd	r20, Y+11	; 0x0b
    1252:	5c 85       	ldd	r21, Y+12	; 0x0c
    1254:	0e 94 84 07 	call	0xf08	; 0xf08 <adjust_angle>
    1258:	69 83       	std	Y+1, r22	; 0x01
    125a:	7a 83       	std	Y+2, r23	; 0x02
    125c:	8b 83       	std	Y+3, r24	; 0x03
    125e:	9c 83       	std	Y+4, r25	; 0x04
    mid_angle = atan((screen_mid_y - yc) / (screen_mid_x - xc));
    x3_angle = atan((new_y3 - yc) / (new_x3 - xc));
    
    angle_d = angle * (180.0 / PI);
    mid_angle_d = mid_angle * (180.0 / PI);
    x3_angle_d = x3_angle * (180.0 / PI);
    1260:	20 ee       	ldi	r18, 0xE0	; 224
    1262:	3e e2       	ldi	r19, 0x2E	; 46
    1264:	45 e6       	ldi	r20, 0x65	; 101
    1266:	52 e4       	ldi	r21, 0x42	; 66
    1268:	c5 01       	movw	r24, r10
    126a:	b4 01       	movw	r22, r8
    126c:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    
    mid_angle_adj = adjust_angle(mid_angle_d, screen_mid_x - xc, screen_mid_y - yc);
    x3_angle_adj = adjust_angle(x3_angle_d, new_x3 - xc, new_y3 - yc);
    1270:	ed 88       	ldd	r14, Y+21	; 0x15
    1272:	fe 88       	ldd	r15, Y+22	; 0x16
    1274:	0f 89       	ldd	r16, Y+23	; 0x17
    1276:	18 8d       	ldd	r17, Y+24	; 0x18
    1278:	2d 85       	ldd	r18, Y+13	; 0x0d
    127a:	3e 85       	ldd	r19, Y+14	; 0x0e
    127c:	4f 85       	ldd	r20, Y+15	; 0x0f
    127e:	58 89       	ldd	r21, Y+16	; 0x10
    1280:	0e 94 84 07 	call	0xf08	; 0xf08 <adjust_angle>
    1284:	4b 01       	movw	r8, r22
    1286:	5c 01       	movw	r10, r24
    
    diff = mid_angle_adj - x3_angle_adj;
    1288:	9b 01       	movw	r18, r22
    128a:	ac 01       	movw	r20, r24
    128c:	69 81       	ldd	r22, Y+1	; 0x01
    128e:	7a 81       	ldd	r23, Y+2	; 0x02
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    1298:	6b 01       	movw	r12, r22
    129a:	7c 01       	movw	r14, r24
    
    if (diff < 180 && diff > 0) {
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	44 e3       	ldi	r20, 0x34	; 52
    12a2:	53 e4       	ldi	r21, 0x43	; 67
    12a4:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    12a8:	88 23       	and	r24, r24
    12aa:	4c f4       	brge	.+18     	; 0x12be <calc_angle+0x250>
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	a9 01       	movw	r20, r18
    12b2:	c7 01       	movw	r24, r14
    12b4:	b6 01       	movw	r22, r12
    12b6:	0e 94 11 18 	call	0x3022	; 0x3022 <__gesf2>
    12ba:	18 16       	cp	r1, r24
    12bc:	94 f1       	brlt	.+100    	; 0x1322 <calc_angle+0x2b4>
        angle_d = angle_d;
    } else if (diff > -180 && diff < 0) {
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	44 e3       	ldi	r20, 0x34	; 52
    12c4:	53 ec       	ldi	r21, 0xC3	; 195
    12c6:	c7 01       	movw	r24, r14
    12c8:	b6 01       	movw	r22, r12
    12ca:	0e 94 11 18 	call	0x3022	; 0x3022 <__gesf2>
    12ce:	18 16       	cp	r1, r24
    12d0:	74 f4       	brge	.+28     	; 0x12ee <calc_angle+0x280>
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	a9 01       	movw	r20, r18
    12d8:	c7 01       	movw	r24, r14
    12da:	b6 01       	movw	r22, r12
    12dc:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    12e0:	88 23       	and	r24, r24
    12e2:	2c f4       	brge	.+10     	; 0x12ee <calc_angle+0x280>
        angle_d = -angle_d;
    12e4:	77 fa       	bst	r7, 7
    12e6:	70 94       	com	r7
    12e8:	77 f8       	bld	r7, 7
    12ea:	70 94       	com	r7
    12ec:	1a c0       	rjmp	.+52     	; 0x1322 <calc_angle+0x2b4>
    } else if (diff > 180 && mid_angle_adj > 180) {
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	44 e3       	ldi	r20, 0x34	; 52
    12f4:	53 e4       	ldi	r21, 0x43	; 67
    12f6:	c7 01       	movw	r24, r14
    12f8:	b6 01       	movw	r22, r12
    12fa:	0e 94 11 18 	call	0x3022	; 0x3022 <__gesf2>
    12fe:	18 16       	cp	r1, r24
    1300:	84 f4       	brge	.+32     	; 0x1322 <calc_angle+0x2b4>
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	44 e3       	ldi	r20, 0x34	; 52
    1308:	53 e4       	ldi	r21, 0x43	; 67
    130a:	69 81       	ldd	r22, Y+1	; 0x01
    130c:	7a 81       	ldd	r23, Y+2	; 0x02
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	0e 94 11 18 	call	0x3022	; 0x3022 <__gesf2>
    1316:	18 16       	cp	r1, r24
    1318:	24 f4       	brge	.+8      	; 0x1322 <calc_angle+0x2b4>
        angle_d = -angle_d;
    131a:	77 fa       	bst	r7, 7
    131c:	70 94       	com	r7
    131e:	77 f8       	bld	r7, 7
    1320:	70 94       	com	r7
    } else if (diff < -180 && x3_angle_adj > 180) {
        angle_d = angle_d;
    }
    
    angles[0] = angle_d;
    1322:	ec e1       	ldi	r30, 0x1C	; 28
    1324:	f1 e0       	ldi	r31, 0x01	; 1
    1326:	40 82       	st	Z, r4
    1328:	51 82       	std	Z+1, r5	; 0x01
    132a:	62 82       	std	Z+2, r6	; 0x02
    132c:	73 82       	std	Z+3, r7	; 0x03
    angles[1] = x3_angle_adj;
    132e:	84 82       	std	Z+4, r8	; 0x04
    1330:	95 82       	std	Z+5, r9	; 0x05
    1332:	a6 82       	std	Z+6, r10	; 0x06
    1334:	b7 82       	std	Z+7, r11	; 0x07
    
    return angles;
}
    1336:	cf 01       	movw	r24, r30
    1338:	a4 96       	adiw	r28, 0x24	; 36
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	ff 90       	pop	r15
    134e:	ef 90       	pop	r14
    1350:	df 90       	pop	r13
    1352:	cf 90       	pop	r12
    1354:	bf 90       	pop	r11
    1356:	af 90       	pop	r10
    1358:	9f 90       	pop	r9
    135a:	8f 90       	pop	r8
    135c:	7f 90       	pop	r7
    135e:	6f 90       	pop	r6
    1360:	5f 90       	pop	r5
    1362:	4f 90       	pop	r4
    1364:	08 95       	ret

00001366 <find_bot>:

float* find_bot(float dist_cm, float angle) {
    1366:	4f 92       	push	r4
    1368:	5f 92       	push	r5
    136a:	6f 92       	push	r6
    136c:	7f 92       	push	r7
    136e:	8f 92       	push	r8
    1370:	9f 92       	push	r9
    1372:	af 92       	push	r10
    1374:	bf 92       	push	r11
    1376:	cf 92       	push	r12
    1378:	df 92       	push	r13
    137a:	ef 92       	push	r14
    137c:	ff 92       	push	r15
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	28 97       	sbiw	r28, 0x08	; 8
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	6d 83       	std	Y+5, r22	; 0x05
    1394:	7e 83       	std	Y+6, r23	; 0x06
    1396:	8f 83       	std	Y+7, r24	; 0x07
    1398:	98 87       	std	Y+8, r25	; 0x08
    139a:	29 83       	std	Y+1, r18	; 0x01
    139c:	3a 83       	std	Y+2, r19	; 0x02
    139e:	4b 83       	std	Y+3, r20	; 0x03
    13a0:	5c 83       	std	Y+4, r21	; 0x04
    float new_angle;
    float new_angle_R;
    float x_b;
    float y_b;
    
    if (angle < -90 && angle > -180) {
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	44 eb       	ldi	r20, 0xB4	; 180
    13a8:	52 ec       	ldi	r21, 0xC2	; 194
    13aa:	69 81       	ldd	r22, Y+1	; 0x01
    13ac:	7a 81       	ldd	r23, Y+2	; 0x02
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    13b6:	88 23       	and	r24, r24
    13b8:	0c f0       	brlt	.+2      	; 0x13bc <find_bot+0x56>
    13ba:	4c c0       	rjmp	.+152    	; 0x1454 <find_bot+0xee>
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	44 e3       	ldi	r20, 0x34	; 52
    13c2:	53 ec       	ldi	r21, 0xC3	; 195
    13c4:	69 81       	ldd	r22, Y+1	; 0x01
    13c6:	7a 81       	ldd	r23, Y+2	; 0x02
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	9c 81       	ldd	r25, Y+4	; 0x04
    13cc:	0e 94 11 18 	call	0x3022	; 0x3022 <__gesf2>
    13d0:	18 16       	cp	r1, r24
    13d2:	0c f0       	brlt	.+2      	; 0x13d6 <find_bot+0x70>
    13d4:	3f c0       	rjmp	.+126    	; 0x1454 <find_bot+0xee>
        new_angle = -(angle + 90);
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	44 eb       	ldi	r20, 0xB4	; 180
    13dc:	52 e4       	ldi	r21, 0x42	; 66
    13de:	69 81       	ldd	r22, Y+1	; 0x01
    13e0:	7a 81       	ldd	r23, Y+2	; 0x02
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	9c 81       	ldd	r25, Y+4	; 0x04
    13e6:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__addsf3>
    13ea:	4b 01       	movw	r8, r22
    13ec:	5c 01       	movw	r10, r24
    13ee:	b7 fa       	bst	r11, 7
    13f0:	b0 94       	com	r11
    13f2:	b7 f8       	bld	r11, 7
    13f4:	b0 94       	com	r11
        new_angle_R = (PI / 180.0) * new_angle;
    13f6:	25 e3       	ldi	r18, 0x35	; 53
    13f8:	3a ef       	ldi	r19, 0xFA	; 250
    13fa:	4e e8       	ldi	r20, 0x8E	; 142
    13fc:	5c e3       	ldi	r21, 0x3C	; 60
    13fe:	c5 01       	movw	r24, r10
    1400:	b4 01       	movw	r22, r8
    1402:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    1406:	6b 01       	movw	r12, r22
    1408:	7c 01       	movw	r14, r24
        x_b = 115 - (cos(new_angle_R) * dist_cm);
    140a:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <cos>
    140e:	2d 81       	ldd	r18, Y+5	; 0x05
    1410:	3e 81       	ldd	r19, Y+6	; 0x06
    1412:	4f 81       	ldd	r20, Y+7	; 0x07
    1414:	58 85       	ldd	r21, Y+8	; 0x08
    1416:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    141a:	9b 01       	movw	r18, r22
    141c:	ac 01       	movw	r20, r24
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	86 ee       	ldi	r24, 0xE6	; 230
    1424:	92 e4       	ldi	r25, 0x42	; 66
    1426:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    142a:	2b 01       	movw	r4, r22
    142c:	3c 01       	movw	r6, r24
        y_b = 60 + (sin(new_angle_R) * dist_cm);
    142e:	c7 01       	movw	r24, r14
    1430:	b6 01       	movw	r22, r12
    1432:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sin>
    1436:	2d 81       	ldd	r18, Y+5	; 0x05
    1438:	3e 81       	ldd	r19, Y+6	; 0x06
    143a:	4f 81       	ldd	r20, Y+7	; 0x07
    143c:	58 85       	ldd	r21, Y+8	; 0x08
    143e:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e7       	ldi	r20, 0x70	; 112
    1448:	52 e4       	ldi	r21, 0x42	; 66
    144a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__addsf3>
    144e:	6b 01       	movw	r12, r22
    1450:	7c 01       	movw	r14, r24
    1452:	ed c0       	rjmp	.+474    	; 0x162e <find_bot+0x2c8>
    
    } else if (angle < 0 && angle > -90) {
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	a9 01       	movw	r20, r18
    145a:	69 81       	ldd	r22, Y+1	; 0x01
    145c:	7a 81       	ldd	r23, Y+2	; 0x02
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    1466:	88 23       	and	r24, r24
    1468:	0c f0       	brlt	.+2      	; 0x146c <find_bot+0x106>
    146a:	45 c0       	rjmp	.+138    	; 0x14f6 <find_bot+0x190>
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	44 eb       	ldi	r20, 0xB4	; 180
    1472:	52 ec       	ldi	r21, 0xC2	; 194
    1474:	69 81       	ldd	r22, Y+1	; 0x01
    1476:	7a 81       	ldd	r23, Y+2	; 0x02
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	0e 94 11 18 	call	0x3022	; 0x3022 <__gesf2>
    1480:	18 16       	cp	r1, r24
    1482:	cc f5       	brge	.+114    	; 0x14f6 <find_bot+0x190>
        new_angle = -angle;
    1484:	89 80       	ldd	r8, Y+1	; 0x01
    1486:	9a 80       	ldd	r9, Y+2	; 0x02
    1488:	ab 80       	ldd	r10, Y+3	; 0x03
    148a:	bc 80       	ldd	r11, Y+4	; 0x04
    148c:	b7 fa       	bst	r11, 7
    148e:	b0 94       	com	r11
    1490:	b7 f8       	bld	r11, 7
    1492:	b0 94       	com	r11
        new_angle_R = (PI / 180.0) * new_angle;
    1494:	25 e3       	ldi	r18, 0x35	; 53
    1496:	3a ef       	ldi	r19, 0xFA	; 250
    1498:	4e e8       	ldi	r20, 0x8E	; 142
    149a:	5c e3       	ldi	r21, 0x3C	; 60
    149c:	c5 01       	movw	r24, r10
    149e:	b4 01       	movw	r22, r8
    14a0:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    14a4:	6b 01       	movw	r12, r22
    14a6:	7c 01       	movw	r14, r24
        x_b = 115 - (sin(new_angle_R) * dist_cm);
    14a8:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sin>
    14ac:	2d 81       	ldd	r18, Y+5	; 0x05
    14ae:	3e 81       	ldd	r19, Y+6	; 0x06
    14b0:	4f 81       	ldd	r20, Y+7	; 0x07
    14b2:	58 85       	ldd	r21, Y+8	; 0x08
    14b4:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    14b8:	9b 01       	movw	r18, r22
    14ba:	ac 01       	movw	r20, r24
    14bc:	60 e0       	ldi	r22, 0x00	; 0
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	86 ee       	ldi	r24, 0xE6	; 230
    14c2:	92 e4       	ldi	r25, 0x42	; 66
    14c4:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    14c8:	2b 01       	movw	r4, r22
    14ca:	3c 01       	movw	r6, r24
        y_b = 60 - (cos(new_angle_R) * dist_cm);
    14cc:	c7 01       	movw	r24, r14
    14ce:	b6 01       	movw	r22, r12
    14d0:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <cos>
    14d4:	2d 81       	ldd	r18, Y+5	; 0x05
    14d6:	3e 81       	ldd	r19, Y+6	; 0x06
    14d8:	4f 81       	ldd	r20, Y+7	; 0x07
    14da:	58 85       	ldd	r21, Y+8	; 0x08
    14dc:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    14e0:	9b 01       	movw	r18, r22
    14e2:	ac 01       	movw	r20, r24
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	80 e7       	ldi	r24, 0x70	; 112
    14ea:	92 e4       	ldi	r25, 0x42	; 66
    14ec:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    14f0:	6b 01       	movw	r12, r22
    14f2:	7c 01       	movw	r14, r24
    14f4:	9c c0       	rjmp	.+312    	; 0x162e <find_bot+0x2c8>
    
    } else if (angle > 0 && angle < 90) {
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	a9 01       	movw	r20, r18
    14fc:	69 81       	ldd	r22, Y+1	; 0x01
    14fe:	7a 81       	ldd	r23, Y+2	; 0x02
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	9c 81       	ldd	r25, Y+4	; 0x04
    1504:	0e 94 11 18 	call	0x3022	; 0x3022 <__gesf2>
    1508:	18 16       	cp	r1, r24
    150a:	0c f0       	brlt	.+2      	; 0x150e <find_bot+0x1a8>
    150c:	41 c0       	rjmp	.+130    	; 0x1590 <find_bot+0x22a>
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	44 eb       	ldi	r20, 0xB4	; 180
    1514:	52 e4       	ldi	r21, 0x42	; 66
    1516:	69 81       	ldd	r22, Y+1	; 0x01
    1518:	7a 81       	ldd	r23, Y+2	; 0x02
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	9c 81       	ldd	r25, Y+4	; 0x04
    151e:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    1522:	88 23       	and	r24, r24
    1524:	ac f5       	brge	.+106    	; 0x1590 <find_bot+0x22a>
        new_angle = angle;
        new_angle_R = (PI / 180.0) * new_angle;
    1526:	25 e3       	ldi	r18, 0x35	; 53
    1528:	3a ef       	ldi	r19, 0xFA	; 250
    152a:	4e e8       	ldi	r20, 0x8E	; 142
    152c:	5c e3       	ldi	r21, 0x3C	; 60
    152e:	69 81       	ldd	r22, Y+1	; 0x01
    1530:	7a 81       	ldd	r23, Y+2	; 0x02
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	9c 81       	ldd	r25, Y+4	; 0x04
    1536:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    153a:	6b 01       	movw	r12, r22
    153c:	7c 01       	movw	r14, r24
        x_b = 115 + (sin(new_angle_R) * dist_cm);
    153e:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sin>
    1542:	2d 81       	ldd	r18, Y+5	; 0x05
    1544:	3e 81       	ldd	r19, Y+6	; 0x06
    1546:	4f 81       	ldd	r20, Y+7	; 0x07
    1548:	58 85       	ldd	r21, Y+8	; 0x08
    154a:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	46 ee       	ldi	r20, 0xE6	; 230
    1554:	52 e4       	ldi	r21, 0x42	; 66
    1556:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__addsf3>
    155a:	2b 01       	movw	r4, r22
    155c:	3c 01       	movw	r6, r24
        y_b = 60 - (cos(new_angle_R) * dist_cm);
    155e:	c7 01       	movw	r24, r14
    1560:	b6 01       	movw	r22, r12
    1562:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <cos>
    1566:	2d 81       	ldd	r18, Y+5	; 0x05
    1568:	3e 81       	ldd	r19, Y+6	; 0x06
    156a:	4f 81       	ldd	r20, Y+7	; 0x07
    156c:	58 85       	ldd	r21, Y+8	; 0x08
    156e:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    1572:	9b 01       	movw	r18, r22
    1574:	ac 01       	movw	r20, r24
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	80 e7       	ldi	r24, 0x70	; 112
    157c:	92 e4       	ldi	r25, 0x42	; 66
    157e:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    1582:	6b 01       	movw	r12, r22
    1584:	7c 01       	movw	r14, r24
        new_angle_R = (PI / 180.0) * new_angle;
        x_b = 115 - (sin(new_angle_R) * dist_cm);
        y_b = 60 - (cos(new_angle_R) * dist_cm);
    
    } else if (angle > 0 && angle < 90) {
        new_angle = angle;
    1586:	89 80       	ldd	r8, Y+1	; 0x01
    1588:	9a 80       	ldd	r9, Y+2	; 0x02
    158a:	ab 80       	ldd	r10, Y+3	; 0x03
    158c:	bc 80       	ldd	r11, Y+4	; 0x04
        new_angle_R = (PI / 180.0) * new_angle;
        x_b = 115 + (sin(new_angle_R) * dist_cm);
        y_b = 60 - (cos(new_angle_R) * dist_cm);
    158e:	4f c0       	rjmp	.+158    	; 0x162e <find_bot+0x2c8>
        
    } else if (angle > 90 && angle < 180) {
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	44 eb       	ldi	r20, 0xB4	; 180
    1596:	52 e4       	ldi	r21, 0x42	; 66
    1598:	69 81       	ldd	r22, Y+1	; 0x01
    159a:	7a 81       	ldd	r23, Y+2	; 0x02
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	0e 94 11 18 	call	0x3022	; 0x3022 <__gesf2>
    15a4:	18 16       	cp	r1, r24
    15a6:	0c f0       	brlt	.+2      	; 0x15aa <find_bot+0x244>
    15a8:	42 c0       	rjmp	.+132    	; 0x162e <find_bot+0x2c8>
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	44 e3       	ldi	r20, 0x34	; 52
    15b0:	53 e4       	ldi	r21, 0x43	; 67
    15b2:	69 81       	ldd	r22, Y+1	; 0x01
    15b4:	7a 81       	ldd	r23, Y+2	; 0x02
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    15be:	88 23       	and	r24, r24
    15c0:	b4 f5       	brge	.+108    	; 0x162e <find_bot+0x2c8>
        new_angle = angle - 90;
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	44 eb       	ldi	r20, 0xB4	; 180
    15c8:	52 e4       	ldi	r21, 0x42	; 66
    15ca:	69 81       	ldd	r22, Y+1	; 0x01
    15cc:	7a 81       	ldd	r23, Y+2	; 0x02
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	9c 81       	ldd	r25, Y+4	; 0x04
    15d2:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    15d6:	4b 01       	movw	r8, r22
    15d8:	5c 01       	movw	r10, r24
        new_angle_R = (PI / 180.0) * new_angle;
    15da:	25 e3       	ldi	r18, 0x35	; 53
    15dc:	3a ef       	ldi	r19, 0xFA	; 250
    15de:	4e e8       	ldi	r20, 0x8E	; 142
    15e0:	5c e3       	ldi	r21, 0x3C	; 60
    15e2:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    15e6:	6b 01       	movw	r12, r22
    15e8:	7c 01       	movw	r14, r24
        x_b = 115 + (cos(new_angle_R) * dist_cm);
    15ea:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <cos>
    15ee:	2d 81       	ldd	r18, Y+5	; 0x05
    15f0:	3e 81       	ldd	r19, Y+6	; 0x06
    15f2:	4f 81       	ldd	r20, Y+7	; 0x07
    15f4:	58 85       	ldd	r21, Y+8	; 0x08
    15f6:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	46 ee       	ldi	r20, 0xE6	; 230
    1600:	52 e4       	ldi	r21, 0x42	; 66
    1602:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__addsf3>
    1606:	2b 01       	movw	r4, r22
    1608:	3c 01       	movw	r6, r24
        y_b = 60 + (sin(new_angle_R) * dist_cm);
    160a:	c7 01       	movw	r24, r14
    160c:	b6 01       	movw	r22, r12
    160e:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sin>
    1612:	2d 81       	ldd	r18, Y+5	; 0x05
    1614:	3e 81       	ldd	r19, Y+6	; 0x06
    1616:	4f 81       	ldd	r20, Y+7	; 0x07
    1618:	58 85       	ldd	r21, Y+8	; 0x08
    161a:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e7       	ldi	r20, 0x70	; 112
    1624:	52 e4       	ldi	r21, 0x42	; 66
    1626:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__addsf3>
    162a:	6b 01       	movw	r12, r22
    162c:	7c 01       	movw	r14, r24
    }
    
    coords_angle[0] = x_b;
    162e:	e2 e3       	ldi	r30, 0x32	; 50
    1630:	f1 e0       	ldi	r31, 0x01	; 1
    1632:	40 82       	st	Z, r4
    1634:	51 82       	std	Z+1, r5	; 0x01
    1636:	62 82       	std	Z+2, r6	; 0x02
    1638:	73 82       	std	Z+3, r7	; 0x03
    coords_angle[1] = y_b;
    163a:	c4 82       	std	Z+4, r12	; 0x04
    163c:	d5 82       	std	Z+5, r13	; 0x05
    163e:	e6 82       	std	Z+6, r14	; 0x06
    1640:	f7 82       	std	Z+7, r15	; 0x07
    coords_angle[2] = new_angle;
    1642:	80 86       	std	Z+8, r8	; 0x08
    1644:	91 86       	std	Z+9, r9	; 0x09
    1646:	a2 86       	std	Z+10, r10	; 0x0a
    1648:	b3 86       	std	Z+11, r11	; 0x0b

    return coords_angle;
}
    164a:	cf 01       	movw	r24, r30
    164c:	28 96       	adiw	r28, 0x08	; 8
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	ff 90       	pop	r15
    165e:	ef 90       	pop	r14
    1660:	df 90       	pop	r13
    1662:	cf 90       	pop	r12
    1664:	bf 90       	pop	r11
    1666:	af 90       	pop	r10
    1668:	9f 90       	pop	r9
    166a:	8f 90       	pop	r8
    166c:	7f 90       	pop	r7
    166e:	6f 90       	pop	r6
    1670:	5f 90       	pop	r5
    1672:	4f 90       	pop	r4
    1674:	08 95       	ret

00001676 <main>:


int main(void)
{
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	ea 97       	sbiw	r28, 0x3a	; 58
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    float dist_cm;
    
    float* coords_angle_return;
    int bot_angle_x3;
    int bot_angle;
    int blobs[12] = {0};
    168a:	fe 01       	movw	r30, r28
    168c:	71 96       	adiw	r30, 0x11	; 17
    168e:	88 e1       	ldi	r24, 0x18	; 24
    1690:	df 01       	movw	r26, r30
    1692:	1d 92       	st	X+, r1
    1694:	8a 95       	dec	r24
    1696:	e9 f7       	brne	.-6      	; 0x1692 <main+0x1c>
    

    
    
    
    m_clockdivide(0); //2MHz
    1698:	e1 e6       	ldi	r30, 0x61	; 97
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 e8       	ldi	r24, 0x80	; 128
    169e:	80 83       	st	Z, r24
    16a0:	10 82       	st	Z, r1
    
    m_bus_init();
    16a2:	0e 94 3f 10 	call	0x207e	; 0x207e <m_bus_init>
    m_usb_init();
    16a6:	0e 94 0a 11 	call	0x2214	; 0x2214 <m_usb_init>

    
    m_rf_open(CHANNEL,RXADDRESS,PACKET_LENGTH);
    16aa:	4a e0       	ldi	r20, 0x0A	; 10
    16ac:	6c e5       	ldi	r22, 0x5C	; 92
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	0e 94 50 10 	call	0x20a0	; 0x20a0 <m_rf_open>
//    set(TCCR1A,WGM10);
//    
//    set(TCCR1A,COM1B1);
//    clear(TCCR1A,COM1B0);
    
    clear(TCCR3B,CS32);
    16b4:	e1 e9       	ldi	r30, 0x91	; 145
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	8b 7f       	andi	r24, 0xFB	; 251
    16bc:	80 83       	st	Z, r24
    clear(TCCR3B,CS31);
    16be:	80 81       	ld	r24, Z
    16c0:	8d 7f       	andi	r24, 0xFD	; 253
    16c2:	80 83       	st	Z, r24
    set(TCCR3B,CS30);
    16c4:	80 81       	ld	r24, Z
    16c6:	81 60       	ori	r24, 0x01	; 1
    16c8:	80 83       	st	Z, r24
    
    set(TCCR3B,WGM33);
    16ca:	80 81       	ld	r24, Z
    16cc:	80 61       	ori	r24, 0x10	; 16
    16ce:	80 83       	st	Z, r24
    set(TCCR3B,WGM32);
    16d0:	80 81       	ld	r24, Z
    16d2:	88 60       	ori	r24, 0x08	; 8
    16d4:	80 83       	st	Z, r24
    set(TCCR3A,WGM31);
    16d6:	e0 e9       	ldi	r30, 0x90	; 144
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	82 60       	ori	r24, 0x02	; 2
    16de:	80 83       	st	Z, r24
    clear(TCCR3A,WGM30);
    16e0:	80 81       	ld	r24, Z
    16e2:	8e 7f       	andi	r24, 0xFE	; 254
    16e4:	80 83       	st	Z, r24
    
    set(TCCR3A,COM3A1);
    16e6:	80 81       	ld	r24, Z
    16e8:	80 68       	ori	r24, 0x80	; 128
    16ea:	80 83       	st	Z, r24
    clear(TCCR3A,COM3A0);
    16ec:	80 81       	ld	r24, Z
    16ee:	8f 7b       	andi	r24, 0xBF	; 191
    16f0:	80 83       	st	Z, r24
    
    clear(DDRC,6);
    16f2:	3e 98       	cbi	0x07, 6	; 7

    ir = m_wii_open();
    16f4:	0e 94 c6 13 	call	0x278c	; 0x278c <m_wii_open>
    
    sei();
    16f8:	78 94       	sei
    float xb;
    float yb;
    float xg;
    float yg;
    
    int first_star_flag = 0;
    16fa:	1a a6       	std	Y+42, r1	; 0x2a
    16fc:	19 a6       	std	Y+41, r1	; 0x29
//            continue;
////            m_red(TOGGLE);
////            m_wait(100);
//        }
        
        IR_data = m_wii_read(blobs);
    16fe:	ce 01       	movw	r24, r28
    1700:	41 96       	adiw	r24, 0x11	; 17
    1702:	0e 94 e7 14 	call	0x29ce	; 0x29ce <m_wii_read>
        
        X_i[0] = blobs[0];
    1706:	89 89       	ldd	r24, Y+17	; 0x11
    1708:	9a 89       	ldd	r25, Y+18	; 0x12
    170a:	9a 83       	std	Y+2, r25	; 0x02
    170c:	89 83       	std	Y+1, r24	; 0x01
        X_i[1] = blobs[3];
    170e:	2f 89       	ldd	r18, Y+23	; 0x17
    1710:	38 8d       	ldd	r19, Y+24	; 0x18
    1712:	3c 83       	std	Y+4, r19	; 0x04
    1714:	2b 83       	std	Y+3, r18	; 0x03
        X_i[2] = blobs[6];
    1716:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1718:	3e 8d       	ldd	r19, Y+30	; 0x1e
    171a:	3e 83       	std	Y+6, r19	; 0x06
    171c:	2d 83       	std	Y+5, r18	; 0x05
        X_i[3] = blobs[9];
    171e:	2b a1       	ldd	r18, Y+35	; 0x23
    1720:	3c a1       	ldd	r19, Y+36	; 0x24
    1722:	38 87       	std	Y+8, r19	; 0x08
    1724:	2f 83       	std	Y+7, r18	; 0x07
        X_i[4] = blobs[1];
    1726:	2b 89       	ldd	r18, Y+19	; 0x13
    1728:	3c 89       	ldd	r19, Y+20	; 0x14
    172a:	3a 87       	std	Y+10, r19	; 0x0a
    172c:	29 87       	std	Y+9, r18	; 0x09
        X_i[5] = blobs[4];
    172e:	29 8d       	ldd	r18, Y+25	; 0x19
    1730:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1732:	3c 87       	std	Y+12, r19	; 0x0c
    1734:	2b 87       	std	Y+11, r18	; 0x0b
        X_i[6] = blobs[7];
    1736:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1738:	38 a1       	ldd	r19, Y+32	; 0x20
    173a:	3e 87       	std	Y+14, r19	; 0x0e
    173c:	2d 87       	std	Y+13, r18	; 0x0d
        X_i[7] = blobs[10];
    173e:	2d a1       	ldd	r18, Y+37	; 0x25
    1740:	3e a1       	ldd	r19, Y+38	; 0x26
    1742:	38 8b       	std	Y+16, r19	; 0x10
    1744:	2f 87       	std	Y+15, r18	; 0x0f
        
        m_usb_tx_int(blobs[0]);
    1746:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <m_usb_tx_int>
        m_usb_tx_string(" x \n");
    174a:	81 ef       	ldi	r24, 0xF1	; 241
    174c:	91 e0       	ldi	r25, 0x01	; 1
    174e:	0e 94 3f 13 	call	0x267e	; 0x267e <print_P>
        m_usb_tx_int(blobs[1]);
    1752:	8b 89       	ldd	r24, Y+19	; 0x13
    1754:	9c 89       	ldd	r25, Y+20	; 0x14
    1756:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <m_usb_tx_int>
        m_usb_tx_string(" y \n");
    175a:	8c ee       	ldi	r24, 0xEC	; 236
    175c:	91 e0       	ldi	r25, 0x01	; 1
    175e:	0e 94 3f 13 	call	0x267e	; 0x267e <print_P>
        
        
        
        if (!((X_i[4] == 1023) || (X_i[5] == 1023) || (X_i[6] == 1023) || (X_i[7] == 1023)))
    1762:	89 85       	ldd	r24, Y+9	; 0x09
    1764:	9a 85       	ldd	r25, Y+10	; 0x0a
    1766:	8f 3f       	cpi	r24, 0xFF	; 255
    1768:	93 40       	sbci	r25, 0x03	; 3
    176a:	49 f2       	breq	.-110    	; 0x16fe <main+0x88>
    176c:	8b 85       	ldd	r24, Y+11	; 0x0b
    176e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1770:	8f 3f       	cpi	r24, 0xFF	; 255
    1772:	93 40       	sbci	r25, 0x03	; 3
    1774:	21 f2       	breq	.-120    	; 0x16fe <main+0x88>
    1776:	8d 85       	ldd	r24, Y+13	; 0x0d
    1778:	9e 85       	ldd	r25, Y+14	; 0x0e
    177a:	8f 3f       	cpi	r24, 0xFF	; 255
    177c:	93 40       	sbci	r25, 0x03	; 3
    177e:	09 f4       	brne	.+2      	; 0x1782 <main+0x10c>
    1780:	be cf       	rjmp	.-132    	; 0x16fe <main+0x88>
    1782:	8f 85       	ldd	r24, Y+15	; 0x0f
    1784:	98 89       	ldd	r25, Y+16	; 0x10
    1786:	8f 3f       	cpi	r24, 0xFF	; 255
    1788:	93 40       	sbci	r25, 0x03	; 3
    178a:	09 f4       	brne	.+2      	; 0x178e <main+0x118>
    178c:	b8 cf       	rjmp	.-144    	; 0x16fe <main+0x88>
        {
            
            assign_test = loss(X_i, 100.0);
    178e:	40 e0       	ldi	r20, 0x00	; 0
    1790:	50 e0       	ldi	r21, 0x00	; 0
    1792:	68 ec       	ldi	r22, 0xC8	; 200
    1794:	72 e4       	ldi	r23, 0x42	; 66
    1796:	ce 01       	movw	r24, r28
    1798:	01 96       	adiw	r24, 0x01	; 1
    179a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <loss>
            perm = permute_dists(assign_test, X_i);
    179e:	be 01       	movw	r22, r28
    17a0:	6f 5f       	subi	r22, 0xFF	; 255
    17a2:	7f 4f       	sbci	r23, 0xFF	; 255
    17a4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <permute_dists>
    17a8:	fc 01       	movw	r30, r24
            
            new_x1 = perm[0];
    17aa:	80 81       	ld	r24, Z
    17ac:	91 81       	ldd	r25, Z+1	; 0x01
    17ae:	98 ab       	std	Y+48, r25	; 0x30
    17b0:	8f a7       	std	Y+47, r24	; 0x2f
            new_x3 = perm[2];
    17b2:	64 80       	ldd	r6, Z+4	; 0x04
    17b4:	75 80       	ldd	r7, Z+5	; 0x05
            new_y1 = perm[4];
    17b6:	a0 85       	ldd	r26, Z+8	; 0x08
    17b8:	b1 85       	ldd	r27, Z+9	; 0x09
    17ba:	ba ab       	std	Y+50, r27	; 0x32
    17bc:	a9 ab       	std	Y+49, r26	; 0x31
            new_y3 = perm[6];
    17be:	44 84       	ldd	r4, Z+12	; 0x0c
    17c0:	55 84       	ldd	r5, Z+13	; 0x0d
            
            xc = (new_x1+new_x3)/2;
    17c2:	1c 01       	movw	r2, r24
    17c4:	26 0c       	add	r2, r6
    17c6:	37 1c       	adc	r3, r7
    17c8:	33 20       	and	r3, r3
    17ca:	1c f4       	brge	.+6      	; 0x17d2 <main+0x15c>
    17cc:	bf ef       	ldi	r27, 0xFF	; 255
    17ce:	2b 1a       	sub	r2, r27
    17d0:	3b 0a       	sbc	r3, r27
    17d2:	35 94       	asr	r3
    17d4:	27 94       	ror	r2
            yc = (new_y1+new_y3)/2;
    17d6:	89 a8       	ldd	r8, Y+49	; 0x31
    17d8:	9a a8       	ldd	r9, Y+50	; 0x32
    17da:	84 0c       	add	r8, r4
    17dc:	95 1c       	adc	r9, r5
    17de:	99 20       	and	r9, r9
    17e0:	1c f4       	brge	.+6      	; 0x17e8 <main+0x172>
    17e2:	ef ef       	ldi	r30, 0xFF	; 255
    17e4:	8e 1a       	sub	r8, r30
    17e6:	9e 0a       	sbc	r9, r30
    17e8:	95 94       	asr	r9
    17ea:	87 94       	ror	r8
            
            angles_return = calc_angle(xc, yc, new_x3, new_y3);
    17ec:	b2 01       	movw	r22, r4
    17ee:	05 2c       	mov	r0, r5
    17f0:	00 0c       	add	r0, r0
    17f2:	88 0b       	sbc	r24, r24
    17f4:	99 0b       	sbc	r25, r25
    17f6:	0e 94 db 16 	call	0x2db6	; 0x2db6 <__floatsisf>
    17fa:	5b 01       	movw	r10, r22
    17fc:	6c 01       	movw	r12, r24
    17fe:	b3 01       	movw	r22, r6
    1800:	07 2c       	mov	r0, r7
    1802:	00 0c       	add	r0, r0
    1804:	88 0b       	sbc	r24, r24
    1806:	99 0b       	sbc	r25, r25
    1808:	0e 94 db 16 	call	0x2db6	; 0x2db6 <__floatsisf>
    180c:	6b ab       	std	Y+51, r22	; 0x33
    180e:	7c ab       	std	Y+52, r23	; 0x34
    1810:	8d ab       	std	Y+53, r24	; 0x35
    1812:	9e ab       	std	Y+54, r25	; 0x36
    1814:	b4 01       	movw	r22, r8
    1816:	09 2c       	mov	r0, r9
    1818:	00 0c       	add	r0, r0
    181a:	88 0b       	sbc	r24, r24
    181c:	99 0b       	sbc	r25, r25
    181e:	0e 94 db 16 	call	0x2db6	; 0x2db6 <__floatsisf>
    1822:	6f ab       	std	Y+55, r22	; 0x37
    1824:	78 af       	std	Y+56, r23	; 0x38
    1826:	89 af       	std	Y+57, r24	; 0x39
    1828:	9a af       	std	Y+58, r25	; 0x3a
    182a:	b1 01       	movw	r22, r2
    182c:	03 2c       	mov	r0, r3
    182e:	00 0c       	add	r0, r0
    1830:	88 0b       	sbc	r24, r24
    1832:	99 0b       	sbc	r25, r25
    1834:	0e 94 db 16 	call	0x2db6	; 0x2db6 <__floatsisf>
    1838:	eb a8       	ldd	r14, Y+51	; 0x33
    183a:	fc a8       	ldd	r15, Y+52	; 0x34
    183c:	0d a9       	ldd	r16, Y+53	; 0x35
    183e:	1e a9       	ldd	r17, Y+54	; 0x36
    1840:	2f a9       	ldd	r18, Y+55	; 0x37
    1842:	38 ad       	ldd	r19, Y+56	; 0x38
    1844:	49 ad       	ldd	r20, Y+57	; 0x39
    1846:	5a ad       	ldd	r21, Y+58	; 0x3a
    1848:	0e 94 37 08 	call	0x106e	; 0x106e <calc_angle>
    184c:	7c 01       	movw	r14, r24
            
            p_dist_from_c = distance(512, 384, xc, yc);
    184e:	94 01       	movw	r18, r8
    1850:	a1 01       	movw	r20, r2
    1852:	60 e8       	ldi	r22, 0x80	; 128
    1854:	71 e0       	ldi	r23, 0x01	; 1
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	92 e0       	ldi	r25, 0x02	; 2
    185a:	0e 94 b1 05 	call	0xb62	; 0xb62 <distance>
    185e:	4b 01       	movw	r8, r22
    1860:	5c 01       	movw	r10, r24
            p_dist = distance(new_x1, new_y1, new_x3, new_y3);
    1862:	92 01       	movw	r18, r4
    1864:	a3 01       	movw	r20, r6
    1866:	69 a9       	ldd	r22, Y+49	; 0x31
    1868:	7a a9       	ldd	r23, Y+50	; 0x32
    186a:	8f a5       	ldd	r24, Y+47	; 0x2f
    186c:	98 a9       	ldd	r25, Y+48	; 0x30
    186e:	0e 94 b1 05 	call	0xb62	; 0xb62 <distance>
    1872:	9b 01       	movw	r18, r22
    1874:	ac 01       	movw	r20, r24
            dist_cm = p_dist_from_c * (29 / p_dist);
            
            coords_angle_return = find_bot(dist_cm, angles_return[0]);
    1876:	d7 01       	movw	r26, r14
    1878:	cd 90       	ld	r12, X+
    187a:	dd 90       	ld	r13, X+
    187c:	ed 90       	ld	r14, X+
    187e:	fc 90       	ld	r15, X
            
            angles_return = calc_angle(xc, yc, new_x3, new_y3);
            
            p_dist_from_c = distance(512, 384, xc, yc);
            p_dist = distance(new_x1, new_y1, new_x3, new_y3);
            dist_cm = p_dist_from_c * (29 / p_dist);
    1880:	60 e0       	ldi	r22, 0x00	; 0
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	88 ee       	ldi	r24, 0xE8	; 232
    1886:	91 e4       	ldi	r25, 0x41	; 65
    1888:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__divsf3>
    188c:	a5 01       	movw	r20, r10
    188e:	94 01       	movw	r18, r8
    1890:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
            
            coords_angle_return = find_bot(dist_cm, angles_return[0]);
    1894:	a7 01       	movw	r20, r14
    1896:	96 01       	movw	r18, r12
    1898:	0e 94 b3 09 	call	0x1366	; 0x1366 <find_bot>
    189c:	5c 01       	movw	r10, r24
      
            bot_angle_x3 = ((int)angles[1] + 90) % 360;
    189e:	60 91 20 01 	lds	r22, 0x0120
    18a2:	70 91 21 01 	lds	r23, 0x0121
    18a6:	80 91 22 01 	lds	r24, 0x0122
    18aa:	90 91 23 01 	lds	r25, 0x0123
    18ae:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fixsfsi>
    18b2:	cb 01       	movw	r24, r22
    18b4:	86 5a       	subi	r24, 0xA6	; 166
    18b6:	9f 4f       	sbci	r25, 0xFF	; 255
    18b8:	68 e6       	ldi	r22, 0x68	; 104
    18ba:	71 e0       	ldi	r23, 0x01	; 1
    18bc:	0e 94 4e 1a 	call	0x349c	; 0x349c <__divmodhi4>
            bot_angle = (360-((180+bot_angle_x3)%360));
    18c0:	8c 54       	subi	r24, 0x4C	; 76
    18c2:	9f 4f       	sbci	r25, 0xFF	; 255
    18c4:	68 e6       	ldi	r22, 0x68	; 104
    18c6:	71 e0       	ldi	r23, 0x01	; 1
    18c8:	0e 94 4e 1a 	call	0x349c	; 0x349c <__divmodhi4>
    18cc:	1c 01       	movw	r2, r24
            
            xb = coords_angle_return[0];
    18ce:	f5 01       	movw	r30, r10
    18d0:	c0 80       	ld	r12, Z
    18d2:	d1 80       	ldd	r13, Z+1	; 0x01
    18d4:	e2 80       	ldd	r14, Z+2	; 0x02
    18d6:	f3 80       	ldd	r15, Z+3	; 0x03
            yb = coords_angle_return[1];
    18d8:	44 80       	ldd	r4, Z+4	; 0x04
    18da:	55 80       	ldd	r5, Z+5	; 0x05
    18dc:	66 80       	ldd	r6, Z+6	; 0x06
    18de:	77 80       	ldd	r7, Z+7	; 0x07
            
            if ((xb > 115) && (first_star_flag == 0)) {
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	46 ee       	ldi	r20, 0xE6	; 230
    18e6:	52 e4       	ldi	r21, 0x42	; 66
    18e8:	c7 01       	movw	r24, r14
    18ea:	b6 01       	movw	r22, r12
    18ec:	0e 94 11 18 	call	0x3022	; 0x3022 <__gesf2>
    18f0:	18 16       	cp	r1, r24
    18f2:	34 f4       	brge	.+12     	; 0x1900 <main+0x28a>
    18f4:	89 a5       	ldd	r24, Y+41	; 0x29
    18f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    18f8:	89 2b       	or	r24, r25
    18fa:	09 f4       	brne	.+2      	; 0x18fe <main+0x288>
    18fc:	51 c3       	rjmp	.+1698   	; 0x1fa0 <main+0x92a>
    18fe:	0f c0       	rjmp	.+30     	; 0x191e <main+0x2a8>
                first_star_flag = 1;
            } else if ((xb <= 115) && (first_star_flag == 0)){
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	46 ee       	ldi	r20, 0xE6	; 230
    1906:	52 e4       	ldi	r21, 0x42	; 66
    1908:	c7 01       	movw	r24, r14
    190a:	b6 01       	movw	r22, r12
    190c:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    1910:	18 16       	cp	r1, r24
    1912:	2c f0       	brlt	.+10     	; 0x191e <main+0x2a8>
    1914:	a9 a5       	ldd	r26, Y+41	; 0x29
    1916:	ba a5       	ldd	r27, Y+42	; 0x2a
    1918:	ab 2b       	or	r26, r27
    191a:	09 f4       	brne	.+2      	; 0x191e <main+0x2a8>
    191c:	5f c3       	rjmp	.+1726   	; 0x1fdc <main+0x966>
                first_star_flag = 2;
            }
            
            m_usb_tx_int(xb);
    191e:	c7 01       	movw	r24, r14
    1920:	b6 01       	movw	r22, r12
    1922:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fixsfsi>
    1926:	cb 01       	movw	r24, r22
    1928:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <m_usb_tx_int>
            m_usb_tx_string(" xb \n");
    192c:	86 ee       	ldi	r24, 0xE6	; 230
    192e:	91 e0       	ldi	r25, 0x01	; 1
    1930:	0e 94 3f 13 	call	0x267e	; 0x267e <print_P>
            m_usb_tx_int(yb);
    1934:	c3 01       	movw	r24, r6
    1936:	b2 01       	movw	r22, r4
    1938:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fixsfsi>
    193c:	cb 01       	movw	r24, r22
    193e:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <m_usb_tx_int>
            m_usb_tx_string(" yb \n");
    1942:	80 ee       	ldi	r24, 0xE0	; 224
    1944:	91 e0       	ldi	r25, 0x01	; 1
    1946:	0e 94 3f 13 	call	0x267e	; 0x267e <print_P>
        } else {
            continue;
        }
        
        
        if (first_star_flag == 1) {
    194a:	e9 a5       	ldd	r30, Y+41	; 0x29
    194c:	fa a5       	ldd	r31, Y+42	; 0x2a
    194e:	e1 30       	cpi	r30, 0x01	; 1
    1950:	f1 05       	cpc	r31, r1
    1952:	49 f0       	breq	.+18     	; 0x1966 <main+0x2f0>
            xg = 0;
            yg = 60;
        } else if (first_star_flag == 2){
    1954:	32 97       	sbiw	r30, 0x02	; 2
    1956:	59 f4       	brne	.+22     	; 0x196e <main+0x2f8>
            xg = 230;
    1958:	1b a6       	std	Y+43, r1	; 0x2b
    195a:	1c a6       	std	Y+44, r1	; 0x2c
    195c:	f6 e6       	ldi	r31, 0x66	; 102
    195e:	fd a7       	std	Y+45, r31	; 0x2d
    1960:	23 e4       	ldi	r18, 0x43	; 67
    1962:	2e a7       	std	Y+46, r18	; 0x2e
    1964:	04 c0       	rjmp	.+8      	; 0x196e <main+0x2f8>
            continue;
        }
        
        
        if (first_star_flag == 1) {
            xg = 0;
    1966:	1b a6       	std	Y+43, r1	; 0x2b
    1968:	1c a6       	std	Y+44, r1	; 0x2c
    196a:	1d a6       	std	Y+45, r1	; 0x2d
    196c:	1e a6       	std	Y+46, r1	; 0x2e
            yg = 60;
        }
        
        
        
        if (xb >= xg) {
    196e:	a7 01       	movw	r20, r14
    1970:	96 01       	movw	r18, r12
    1972:	6b a5       	ldd	r22, Y+43	; 0x2b
    1974:	7c a5       	ldd	r23, Y+44	; 0x2c
    1976:	8d a5       	ldd	r24, Y+45	; 0x2d
    1978:	9e a5       	ldd	r25, Y+46	; 0x2e
    197a:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    197e:	18 16       	cp	r1, r24
    1980:	0c f4       	brge	.+2      	; 0x1984 <main+0x30e>
    1982:	a9 c0       	rjmp	.+338    	; 0x1ad6 <main+0x460>

            if (yb > 60) {
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e7       	ldi	r20, 0x70	; 112
    198a:	52 e4       	ldi	r21, 0x42	; 66
    198c:	c3 01       	movw	r24, r6
    198e:	b2 01       	movw	r22, r4
    1990:	0e 94 11 18 	call	0x3022	; 0x3022 <__gesf2>
    1994:	18 16       	cp	r1, r24
    1996:	0c f0       	brlt	.+2      	; 0x199a <main+0x324>
    1998:	4f c0       	rjmp	.+158    	; 0x1a38 <main+0x3c2>
                theta = atan((yb - yg)/(xb - xg));
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	40 e7       	ldi	r20, 0x70	; 112
    19a0:	52 e4       	ldi	r21, 0x42	; 66
    19a2:	c3 01       	movw	r24, r6
    19a4:	b2 01       	movw	r22, r4
    19a6:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    19aa:	4b 01       	movw	r8, r22
    19ac:	5c 01       	movw	r10, r24
    19ae:	2b a5       	ldd	r18, Y+43	; 0x2b
    19b0:	3c a5       	ldd	r19, Y+44	; 0x2c
    19b2:	4d a5       	ldd	r20, Y+45	; 0x2d
    19b4:	5e a5       	ldd	r21, Y+46	; 0x2e
    19b6:	c7 01       	movw	r24, r14
    19b8:	b6 01       	movw	r22, r12
    19ba:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    19be:	9b 01       	movw	r18, r22
    19c0:	ac 01       	movw	r20, r24
    19c2:	c5 01       	movw	r24, r10
    19c4:	b4 01       	movw	r22, r8
    19c6:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__divsf3>
    19ca:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <atan>
    19ce:	60 93 24 01 	sts	0x0124, r22
    19d2:	70 93 25 01 	sts	0x0125, r23
    19d6:	80 93 26 01 	sts	0x0126, r24
    19da:	90 93 27 01 	sts	0x0127, r25
                theta_deg = (180 / PI) * theta;
    19de:	60 91 24 01 	lds	r22, 0x0124
    19e2:	70 91 25 01 	lds	r23, 0x0125
    19e6:	80 91 26 01 	lds	r24, 0x0126
    19ea:	90 91 27 01 	lds	r25, 0x0127
    19ee:	20 ee       	ldi	r18, 0xE0	; 224
    19f0:	3e e2       	ldi	r19, 0x2E	; 46
    19f2:	45 e6       	ldi	r20, 0x65	; 101
    19f4:	52 e4       	ldi	r21, 0x42	; 66
    19f6:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    19fa:	60 93 2e 01 	sts	0x012E, r22
    19fe:	70 93 2f 01 	sts	0x012F, r23
    1a02:	80 93 30 01 	sts	0x0130, r24
    1a06:	90 93 31 01 	sts	0x0131, r25

                target_angle = 90 - theta_deg;
    1a0a:	20 91 2e 01 	lds	r18, 0x012E
    1a0e:	30 91 2f 01 	lds	r19, 0x012F
    1a12:	40 91 30 01 	lds	r20, 0x0130
    1a16:	50 91 31 01 	lds	r21, 0x0131
    1a1a:	60 e0       	ldi	r22, 0x00	; 0
    1a1c:	70 e0       	ldi	r23, 0x00	; 0
    1a1e:	84 eb       	ldi	r24, 0xB4	; 180
    1a20:	92 e4       	ldi	r25, 0x42	; 66
    1a22:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    1a26:	60 93 18 01 	sts	0x0118, r22
    1a2a:	70 93 19 01 	sts	0x0119, r23
    1a2e:	80 93 1a 01 	sts	0x011A, r24
    1a32:	90 93 1b 01 	sts	0x011B, r25
    1a36:	f7 c0       	rjmp	.+494    	; 0x1c26 <main+0x5b0>
            } else {
                theta = atan((yg - yb)/(xb - xg));
    1a38:	a3 01       	movw	r20, r6
    1a3a:	92 01       	movw	r18, r4
    1a3c:	60 e0       	ldi	r22, 0x00	; 0
    1a3e:	70 e0       	ldi	r23, 0x00	; 0
    1a40:	80 e7       	ldi	r24, 0x70	; 112
    1a42:	92 e4       	ldi	r25, 0x42	; 66
    1a44:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    1a48:	4b 01       	movw	r8, r22
    1a4a:	5c 01       	movw	r10, r24
    1a4c:	2b a5       	ldd	r18, Y+43	; 0x2b
    1a4e:	3c a5       	ldd	r19, Y+44	; 0x2c
    1a50:	4d a5       	ldd	r20, Y+45	; 0x2d
    1a52:	5e a5       	ldd	r21, Y+46	; 0x2e
    1a54:	c7 01       	movw	r24, r14
    1a56:	b6 01       	movw	r22, r12
    1a58:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    1a5c:	9b 01       	movw	r18, r22
    1a5e:	ac 01       	movw	r20, r24
    1a60:	c5 01       	movw	r24, r10
    1a62:	b4 01       	movw	r22, r8
    1a64:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__divsf3>
    1a68:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <atan>
    1a6c:	60 93 24 01 	sts	0x0124, r22
    1a70:	70 93 25 01 	sts	0x0125, r23
    1a74:	80 93 26 01 	sts	0x0126, r24
    1a78:	90 93 27 01 	sts	0x0127, r25
                theta_deg = (180 / PI) * theta;
    1a7c:	60 91 24 01 	lds	r22, 0x0124
    1a80:	70 91 25 01 	lds	r23, 0x0125
    1a84:	80 91 26 01 	lds	r24, 0x0126
    1a88:	90 91 27 01 	lds	r25, 0x0127
    1a8c:	20 ee       	ldi	r18, 0xE0	; 224
    1a8e:	3e e2       	ldi	r19, 0x2E	; 46
    1a90:	45 e6       	ldi	r20, 0x65	; 101
    1a92:	52 e4       	ldi	r21, 0x42	; 66
    1a94:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    1a98:	60 93 2e 01 	sts	0x012E, r22
    1a9c:	70 93 2f 01 	sts	0x012F, r23
    1aa0:	80 93 30 01 	sts	0x0130, r24
    1aa4:	90 93 31 01 	sts	0x0131, r25

                target_angle = 90 + theta_deg;
    1aa8:	60 91 2e 01 	lds	r22, 0x012E
    1aac:	70 91 2f 01 	lds	r23, 0x012F
    1ab0:	80 91 30 01 	lds	r24, 0x0130
    1ab4:	90 91 31 01 	lds	r25, 0x0131
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	44 eb       	ldi	r20, 0xB4	; 180
    1abe:	52 e4       	ldi	r21, 0x42	; 66
    1ac0:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__addsf3>
    1ac4:	60 93 18 01 	sts	0x0118, r22
    1ac8:	70 93 19 01 	sts	0x0119, r23
    1acc:	80 93 1a 01 	sts	0x011A, r24
    1ad0:	90 93 1b 01 	sts	0x011B, r25
    1ad4:	a8 c0       	rjmp	.+336    	; 0x1c26 <main+0x5b0>
            }
        } else {
            
            if (yb > 60) {
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e7       	ldi	r20, 0x70	; 112
    1adc:	52 e4       	ldi	r21, 0x42	; 66
    1ade:	c3 01       	movw	r24, r6
    1ae0:	b2 01       	movw	r22, r4
    1ae2:	0e 94 11 18 	call	0x3022	; 0x3022 <__gesf2>
    1ae6:	18 16       	cp	r1, r24
    1ae8:	0c f0       	brlt	.+2      	; 0x1aec <main+0x476>
    1aea:	4f c0       	rjmp	.+158    	; 0x1b8a <main+0x514>
                theta = atan((yb - yg)/(xg - xb));
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	40 e7       	ldi	r20, 0x70	; 112
    1af2:	52 e4       	ldi	r21, 0x42	; 66
    1af4:	c3 01       	movw	r24, r6
    1af6:	b2 01       	movw	r22, r4
    1af8:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    1afc:	4b 01       	movw	r8, r22
    1afe:	5c 01       	movw	r10, r24
    1b00:	a7 01       	movw	r20, r14
    1b02:	96 01       	movw	r18, r12
    1b04:	6b a5       	ldd	r22, Y+43	; 0x2b
    1b06:	7c a5       	ldd	r23, Y+44	; 0x2c
    1b08:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b0a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b0c:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    1b10:	9b 01       	movw	r18, r22
    1b12:	ac 01       	movw	r20, r24
    1b14:	c5 01       	movw	r24, r10
    1b16:	b4 01       	movw	r22, r8
    1b18:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__divsf3>
    1b1c:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <atan>
    1b20:	60 93 24 01 	sts	0x0124, r22
    1b24:	70 93 25 01 	sts	0x0125, r23
    1b28:	80 93 26 01 	sts	0x0126, r24
    1b2c:	90 93 27 01 	sts	0x0127, r25
                theta_deg = (180 / PI) * theta;
    1b30:	60 91 24 01 	lds	r22, 0x0124
    1b34:	70 91 25 01 	lds	r23, 0x0125
    1b38:	80 91 26 01 	lds	r24, 0x0126
    1b3c:	90 91 27 01 	lds	r25, 0x0127
    1b40:	20 ee       	ldi	r18, 0xE0	; 224
    1b42:	3e e2       	ldi	r19, 0x2E	; 46
    1b44:	45 e6       	ldi	r20, 0x65	; 101
    1b46:	52 e4       	ldi	r21, 0x42	; 66
    1b48:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    1b4c:	60 93 2e 01 	sts	0x012E, r22
    1b50:	70 93 2f 01 	sts	0x012F, r23
    1b54:	80 93 30 01 	sts	0x0130, r24
    1b58:	90 93 31 01 	sts	0x0131, r25
                
                target_angle = 270 + theta_deg;
    1b5c:	60 91 2e 01 	lds	r22, 0x012E
    1b60:	70 91 2f 01 	lds	r23, 0x012F
    1b64:	80 91 30 01 	lds	r24, 0x0130
    1b68:	90 91 31 01 	lds	r25, 0x0131
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	47 e8       	ldi	r20, 0x87	; 135
    1b72:	53 e4       	ldi	r21, 0x43	; 67
    1b74:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__addsf3>
    1b78:	60 93 18 01 	sts	0x0118, r22
    1b7c:	70 93 19 01 	sts	0x0119, r23
    1b80:	80 93 1a 01 	sts	0x011A, r24
    1b84:	90 93 1b 01 	sts	0x011B, r25
    1b88:	4e c0       	rjmp	.+156    	; 0x1c26 <main+0x5b0>
            } else {
                theta = atan((yg - yb)/(xg - xb));
    1b8a:	a3 01       	movw	r20, r6
    1b8c:	92 01       	movw	r18, r4
    1b8e:	60 e0       	ldi	r22, 0x00	; 0
    1b90:	70 e0       	ldi	r23, 0x00	; 0
    1b92:	80 e7       	ldi	r24, 0x70	; 112
    1b94:	92 e4       	ldi	r25, 0x42	; 66
    1b96:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    1b9a:	4b 01       	movw	r8, r22
    1b9c:	5c 01       	movw	r10, r24
    1b9e:	a7 01       	movw	r20, r14
    1ba0:	96 01       	movw	r18, r12
    1ba2:	6b a5       	ldd	r22, Y+43	; 0x2b
    1ba4:	7c a5       	ldd	r23, Y+44	; 0x2c
    1ba6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ba8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1baa:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    1bae:	9b 01       	movw	r18, r22
    1bb0:	ac 01       	movw	r20, r24
    1bb2:	c5 01       	movw	r24, r10
    1bb4:	b4 01       	movw	r22, r8
    1bb6:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__divsf3>
    1bba:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <atan>
    1bbe:	60 93 24 01 	sts	0x0124, r22
    1bc2:	70 93 25 01 	sts	0x0125, r23
    1bc6:	80 93 26 01 	sts	0x0126, r24
    1bca:	90 93 27 01 	sts	0x0127, r25
                theta_deg = (180 / PI) * theta;
    1bce:	60 91 24 01 	lds	r22, 0x0124
    1bd2:	70 91 25 01 	lds	r23, 0x0125
    1bd6:	80 91 26 01 	lds	r24, 0x0126
    1bda:	90 91 27 01 	lds	r25, 0x0127
    1bde:	20 ee       	ldi	r18, 0xE0	; 224
    1be0:	3e e2       	ldi	r19, 0x2E	; 46
    1be2:	45 e6       	ldi	r20, 0x65	; 101
    1be4:	52 e4       	ldi	r21, 0x42	; 66
    1be6:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    1bea:	60 93 2e 01 	sts	0x012E, r22
    1bee:	70 93 2f 01 	sts	0x012F, r23
    1bf2:	80 93 30 01 	sts	0x0130, r24
    1bf6:	90 93 31 01 	sts	0x0131, r25
                
                target_angle = 270 - theta_deg;
    1bfa:	20 91 2e 01 	lds	r18, 0x012E
    1bfe:	30 91 2f 01 	lds	r19, 0x012F
    1c02:	40 91 30 01 	lds	r20, 0x0130
    1c06:	50 91 31 01 	lds	r21, 0x0131
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	87 e8       	ldi	r24, 0x87	; 135
    1c10:	93 e4       	ldi	r25, 0x43	; 67
    1c12:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    1c16:	60 93 18 01 	sts	0x0118, r22
    1c1a:	70 93 19 01 	sts	0x0119, r23
    1c1e:	80 93 1a 01 	sts	0x011A, r24
    1c22:	90 93 1b 01 	sts	0x011B, r25
        
        bot_angle = 360 - bot_angle;
        
        // motor drivers
        
        diff = bot_angle - target_angle;
    1c26:	80 90 18 01 	lds	r8, 0x0118
    1c2a:	90 90 19 01 	lds	r9, 0x0119
    1c2e:	a0 90 1a 01 	lds	r10, 0x011A
    1c32:	b0 90 1b 01 	lds	r11, 0x011B
    1c36:	b1 01       	movw	r22, r2
    1c38:	03 2c       	mov	r0, r3
    1c3a:	00 0c       	add	r0, r0
    1c3c:	88 0b       	sbc	r24, r24
    1c3e:	99 0b       	sbc	r25, r25
    1c40:	0e 94 db 16 	call	0x2db6	; 0x2db6 <__floatsisf>
    1c44:	a5 01       	movw	r20, r10
    1c46:	94 01       	movw	r18, r8
    1c48:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    1c4c:	60 93 2a 01 	sts	0x012A, r22
    1c50:	70 93 2b 01 	sts	0x012B, r23
    1c54:	80 93 2c 01 	sts	0x012C, r24
    1c58:	90 93 2d 01 	sts	0x012D, r25
        if (diff < 180 && diff >= 0) {
    1c5c:	60 91 2a 01 	lds	r22, 0x012A
    1c60:	70 91 2b 01 	lds	r23, 0x012B
    1c64:	80 91 2c 01 	lds	r24, 0x012C
    1c68:	90 91 2d 01 	lds	r25, 0x012D
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	44 e3       	ldi	r20, 0x34	; 52
    1c72:	53 e4       	ldi	r21, 0x43	; 67
    1c74:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    1c78:	88 23       	and	r24, r24
    1c7a:	04 f5       	brge	.+64     	; 0x1cbc <main+0x646>
    1c7c:	60 91 2a 01 	lds	r22, 0x012A
    1c80:	70 91 2b 01 	lds	r23, 0x012B
    1c84:	80 91 2c 01 	lds	r24, 0x012C
    1c88:	90 91 2d 01 	lds	r25, 0x012D
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	a9 01       	movw	r20, r18
    1c92:	0e 94 11 18 	call	0x3022	; 0x3022 <__gesf2>
    1c96:	88 23       	and	r24, r24
    1c98:	8c f0       	brlt	.+34     	; 0x1cbc <main+0x646>
            diff = diff;
    1c9a:	80 91 2a 01 	lds	r24, 0x012A
    1c9e:	90 91 2b 01 	lds	r25, 0x012B
    1ca2:	a0 91 2c 01 	lds	r26, 0x012C
    1ca6:	b0 91 2d 01 	lds	r27, 0x012D
    1caa:	80 93 2a 01 	sts	0x012A, r24
    1cae:	90 93 2b 01 	sts	0x012B, r25
    1cb2:	a0 93 2c 01 	sts	0x012C, r26
    1cb6:	b0 93 2d 01 	sts	0x012D, r27
    1cba:	56 c0       	rjmp	.+172    	; 0x1d68 <main+0x6f2>
        } else if (diff < -180) {
    1cbc:	60 91 2a 01 	lds	r22, 0x012A
    1cc0:	70 91 2b 01 	lds	r23, 0x012B
    1cc4:	80 91 2c 01 	lds	r24, 0x012C
    1cc8:	90 91 2d 01 	lds	r25, 0x012D
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	44 e3       	ldi	r20, 0x34	; 52
    1cd2:	53 ec       	ldi	r21, 0xC3	; 195
    1cd4:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    1cd8:	88 23       	and	r24, r24
    1cda:	bc f4       	brge	.+46     	; 0x1d0a <main+0x694>
            diff = (360 + diff);
    1cdc:	60 91 2a 01 	lds	r22, 0x012A
    1ce0:	70 91 2b 01 	lds	r23, 0x012B
    1ce4:	80 91 2c 01 	lds	r24, 0x012C
    1ce8:	90 91 2d 01 	lds	r25, 0x012D
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	44 eb       	ldi	r20, 0xB4	; 180
    1cf2:	53 e4       	ldi	r21, 0x43	; 67
    1cf4:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__addsf3>
    1cf8:	60 93 2a 01 	sts	0x012A, r22
    1cfc:	70 93 2b 01 	sts	0x012B, r23
    1d00:	80 93 2c 01 	sts	0x012C, r24
    1d04:	90 93 2d 01 	sts	0x012D, r25
    1d08:	2f c0       	rjmp	.+94     	; 0x1d68 <main+0x6f2>
        } else if (diff < 0 && diff >= -180) {
    1d0a:	60 91 2a 01 	lds	r22, 0x012A
    1d0e:	70 91 2b 01 	lds	r23, 0x012B
    1d12:	80 91 2c 01 	lds	r24, 0x012C
    1d16:	90 91 2d 01 	lds	r25, 0x012D
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	a9 01       	movw	r20, r18
    1d20:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    1d24:	88 23       	and	r24, r24
    1d26:	04 f5       	brge	.+64     	; 0x1d68 <main+0x6f2>
    1d28:	60 91 2a 01 	lds	r22, 0x012A
    1d2c:	70 91 2b 01 	lds	r23, 0x012B
    1d30:	80 91 2c 01 	lds	r24, 0x012C
    1d34:	90 91 2d 01 	lds	r25, 0x012D
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	44 e3       	ldi	r20, 0x34	; 52
    1d3e:	53 ec       	ldi	r21, 0xC3	; 195
    1d40:	0e 94 11 18 	call	0x3022	; 0x3022 <__gesf2>
    1d44:	88 23       	and	r24, r24
    1d46:	84 f0       	brlt	.+32     	; 0x1d68 <main+0x6f2>
            diff = diff;
    1d48:	80 91 2a 01 	lds	r24, 0x012A
    1d4c:	90 91 2b 01 	lds	r25, 0x012B
    1d50:	a0 91 2c 01 	lds	r26, 0x012C
    1d54:	b0 91 2d 01 	lds	r27, 0x012D
    1d58:	80 93 2a 01 	sts	0x012A, r24
    1d5c:	90 93 2b 01 	sts	0x012B, r25
    1d60:	a0 93 2c 01 	sts	0x012C, r26
    1d64:	b0 93 2d 01 	sts	0x012D, r27
        }

//        diff = 20;
        
        m_usb_tx_int(xg);
    1d68:	6b a5       	ldd	r22, Y+43	; 0x2b
    1d6a:	7c a5       	ldd	r23, Y+44	; 0x2c
    1d6c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d6e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d70:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fixsfsi>
    1d74:	cb 01       	movw	r24, r22
    1d76:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <m_usb_tx_int>
        m_usb_tx_string(" xg \n");
    1d7a:	8a ed       	ldi	r24, 0xDA	; 218
    1d7c:	91 e0       	ldi	r25, 0x01	; 1
    1d7e:	0e 94 3f 13 	call	0x267e	; 0x267e <print_P>
        m_usb_tx_int(yg);
    1d82:	8c e3       	ldi	r24, 0x3C	; 60
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <m_usb_tx_int>
        m_usb_tx_string(" yg \n");
    1d8a:	84 ed       	ldi	r24, 0xD4	; 212
    1d8c:	91 e0       	ldi	r25, 0x01	; 1
    1d8e:	0e 94 3f 13 	call	0x267e	; 0x267e <print_P>

        
        m_usb_tx_int(theta_deg);
    1d92:	60 91 2e 01 	lds	r22, 0x012E
    1d96:	70 91 2f 01 	lds	r23, 0x012F
    1d9a:	80 91 30 01 	lds	r24, 0x0130
    1d9e:	90 91 31 01 	lds	r25, 0x0131
    1da2:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fixsfsi>
    1da6:	cb 01       	movw	r24, r22
    1da8:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <m_usb_tx_int>
        m_usb_tx_string(" theta_deg \n");
    1dac:	87 ec       	ldi	r24, 0xC7	; 199
    1dae:	91 e0       	ldi	r25, 0x01	; 1
    1db0:	0e 94 3f 13 	call	0x267e	; 0x267e <print_P>

        
        m_usb_tx_int(target_angle);
    1db4:	60 91 18 01 	lds	r22, 0x0118
    1db8:	70 91 19 01 	lds	r23, 0x0119
    1dbc:	80 91 1a 01 	lds	r24, 0x011A
    1dc0:	90 91 1b 01 	lds	r25, 0x011B
    1dc4:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fixsfsi>
    1dc8:	cb 01       	movw	r24, r22
    1dca:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <m_usb_tx_int>
        m_usb_tx_string(" target angle \n");
    1dce:	87 eb       	ldi	r24, 0xB7	; 183
    1dd0:	91 e0       	ldi	r25, 0x01	; 1
    1dd2:	0e 94 3f 13 	call	0x267e	; 0x267e <print_P>
        
        m_usb_tx_int(bot_angle);
    1dd6:	c1 01       	movw	r24, r2
    1dd8:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <m_usb_tx_int>
        m_usb_tx_string(" bot_angle \n");
    1ddc:	8a ea       	ldi	r24, 0xAA	; 170
    1dde:	91 e0       	ldi	r25, 0x01	; 1
    1de0:	0e 94 3f 13 	call	0x267e	; 0x267e <print_P>

        
        m_usb_tx_int(diff);
    1de4:	60 91 2a 01 	lds	r22, 0x012A
    1de8:	70 91 2b 01 	lds	r23, 0x012B
    1dec:	80 91 2c 01 	lds	r24, 0x012C
    1df0:	90 91 2d 01 	lds	r25, 0x012D
    1df4:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fixsfsi>
    1df8:	cb 01       	movw	r24, r22
    1dfa:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <m_usb_tx_int>
        m_usb_tx_string(" diff \n");
    1dfe:	82 ea       	ldi	r24, 0xA2	; 162
    1e00:	91 e0       	ldi	r25, 0x01	; 1
    1e02:	0e 94 3f 13 	call	0x267e	; 0x267e <print_P>

        
        if (first_star_flag) {
    1e06:	89 a5       	ldd	r24, Y+41	; 0x29
    1e08:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e0a:	89 2b       	or	r24, r25
    1e0c:	71 f1       	breq	.+92     	; 0x1e6a <main+0x7f4>
            at_goal = (xb < 20) && (yb > 40 && yb < 80);
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 ea       	ldi	r20, 0xA0	; 160
    1e14:	51 e4       	ldi	r21, 0x41	; 65
    1e16:	c7 01       	movw	r24, r14
    1e18:	b6 01       	movw	r22, r12
    1e1a:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    1e1e:	88 23       	and	r24, r24
    1e20:	dc f4       	brge	.+54     	; 0x1e58 <main+0x7e2>
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e2       	ldi	r20, 0x20	; 32
    1e28:	52 e4       	ldi	r21, 0x42	; 66
    1e2a:	c3 01       	movw	r24, r6
    1e2c:	b2 01       	movw	r22, r4
    1e2e:	0e 94 11 18 	call	0x3022	; 0x3022 <__gesf2>
    1e32:	18 16       	cp	r1, r24
    1e34:	a4 f4       	brge	.+40     	; 0x1e5e <main+0x7e8>
    1e36:	ee 24       	eor	r14, r14
    1e38:	e3 94       	inc	r14
    1e3a:	f1 2c       	mov	r15, r1
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	40 ea       	ldi	r20, 0xA0	; 160
    1e42:	52 e4       	ldi	r21, 0x42	; 66
    1e44:	c3 01       	movw	r24, r6
    1e46:	b2 01       	movw	r22, r4
    1e48:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    1e4c:	88 23       	and	r24, r24
    1e4e:	0c f0       	brlt	.+2      	; 0x1e52 <main+0x7dc>
    1e50:	e1 2c       	mov	r14, r1
    1e52:	8e 2d       	mov	r24, r14
    1e54:	9f 2d       	mov	r25, r15
    1e56:	05 c0       	rjmp	.+10     	; 0x1e62 <main+0x7ec>
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <main+0x7ec>
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	90 93 29 01 	sts	0x0129, r25
    1e66:	80 93 28 01 	sts	0x0128, r24
        } else if (first_star_flag == 2) {
            at_goal = (xb > 210) && (yb > 40 && yb < 80);
        }

        set(DDRC,6);
    1e6a:	3e 9a       	sbi	0x07, 6	; 7
        ICR3 = 10000;
    1e6c:	e0 e1       	ldi	r30, 0x10	; 16
    1e6e:	f7 e2       	ldi	r31, 0x27	; 39
    1e70:	a6 e9       	ldi	r26, 0x96	; 150
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	11 96       	adiw	r26, 0x01	; 1
    1e76:	fc 93       	st	X, r31
    1e78:	ee 93       	st	-X, r30

        
        if (diff >= 10 && !at_goal) {
    1e7a:	60 91 2a 01 	lds	r22, 0x012A
    1e7e:	70 91 2b 01 	lds	r23, 0x012B
    1e82:	80 91 2c 01 	lds	r24, 0x012C
    1e86:	90 91 2d 01 	lds	r25, 0x012D
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e2       	ldi	r20, 0x20	; 32
    1e90:	51 e4       	ldi	r21, 0x41	; 65
    1e92:	0e 94 11 18 	call	0x3022	; 0x3022 <__gesf2>
    1e96:	88 23       	and	r24, r24
    1e98:	b4 f0       	brlt	.+44     	; 0x1ec6 <main+0x850>
    1e9a:	80 91 28 01 	lds	r24, 0x0128
    1e9e:	90 91 29 01 	lds	r25, 0x0129
    1ea2:	89 2b       	or	r24, r25
    1ea4:	81 f4       	brne	.+32     	; 0x1ec6 <main+0x850>
            m_red(ON);
    1ea6:	6e 9a       	sbi	0x0d, 6	; 13
    1ea8:	76 98       	cbi	0x0e, 6	; 14
            m_green(OFF);
    1eaa:	6a 9a       	sbi	0x0d, 2	; 13
    1eac:	72 9a       	sbi	0x0e, 2	; 14
            
            OCR3A = 3500;
    1eae:	ec ea       	ldi	r30, 0xAC	; 172
    1eb0:	fd e0       	ldi	r31, 0x0D	; 13
    1eb2:	a8 e9       	ldi	r26, 0x98	; 152
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	11 96       	adiw	r26, 0x01	; 1
    1eb8:	fc 93       	st	X, r31
    1eba:	ee 93       	st	-X, r30
            
            set(DDRB,2);
    1ebc:	22 9a       	sbi	0x04, 2	; 4
            set(PORTB,2);
    1ebe:	2a 9a       	sbi	0x05, 2	; 5
    
            clear(DDRC,7);
    1ec0:	3f 98       	cbi	0x07, 7	; 7
            clear(PORTC,7);
    1ec2:	47 98       	cbi	0x08, 7	; 8
    1ec4:	1c cc       	rjmp	.-1992   	; 0x16fe <main+0x88>
            
        } else if (diff <= -10 && !at_goal) {
    1ec6:	60 91 2a 01 	lds	r22, 0x012A
    1eca:	70 91 2b 01 	lds	r23, 0x012B
    1ece:	80 91 2c 01 	lds	r24, 0x012C
    1ed2:	90 91 2d 01 	lds	r25, 0x012D
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e2       	ldi	r20, 0x20	; 32
    1edc:	51 ec       	ldi	r21, 0xC1	; 193
    1ede:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    1ee2:	18 16       	cp	r1, r24
    1ee4:	b4 f0       	brlt	.+44     	; 0x1f12 <main+0x89c>
    1ee6:	80 91 28 01 	lds	r24, 0x0128
    1eea:	90 91 29 01 	lds	r25, 0x0129
    1eee:	89 2b       	or	r24, r25
    1ef0:	81 f4       	brne	.+32     	; 0x1f12 <main+0x89c>
            m_red(ON);
    1ef2:	6e 9a       	sbi	0x0d, 6	; 13
    1ef4:	76 98       	cbi	0x0e, 6	; 14
            m_green(OFF);
    1ef6:	6a 9a       	sbi	0x0d, 2	; 13
    1ef8:	72 9a       	sbi	0x0e, 2	; 14
            
            OCR3A = 3500;
    1efa:	ec ea       	ldi	r30, 0xAC	; 172
    1efc:	fd e0       	ldi	r31, 0x0D	; 13
    1efe:	a8 e9       	ldi	r26, 0x98	; 152
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	11 96       	adiw	r26, 0x01	; 1
    1f04:	fc 93       	st	X, r31
    1f06:	ee 93       	st	-X, r30
            
            set(DDRB,2);
    1f08:	22 9a       	sbi	0x04, 2	; 4
            set(PORTB,2);
    1f0a:	2a 9a       	sbi	0x05, 2	; 5
            
            set(DDRC,7);
    1f0c:	3f 9a       	sbi	0x07, 7	; 7
            set(PORTC,7);
    1f0e:	47 9a       	sbi	0x08, 7	; 8
    1f10:	f6 cb       	rjmp	.-2068   	; 0x16fe <main+0x88>
            

            
        } else if ((diff < 10 || diff > -10) && !at_goal) {
    1f12:	60 91 2a 01 	lds	r22, 0x012A
    1f16:	70 91 2b 01 	lds	r23, 0x012B
    1f1a:	80 91 2c 01 	lds	r24, 0x012C
    1f1e:	90 91 2d 01 	lds	r25, 0x012D
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e2       	ldi	r20, 0x20	; 32
    1f28:	51 e4       	ldi	r21, 0x41	; 65
    1f2a:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__cmpsf2>
    1f2e:	88 23       	and	r24, r24
    1f30:	84 f0       	brlt	.+32     	; 0x1f52 <main+0x8dc>
    1f32:	60 91 2a 01 	lds	r22, 0x012A
    1f36:	70 91 2b 01 	lds	r23, 0x012B
    1f3a:	80 91 2c 01 	lds	r24, 0x012C
    1f3e:	90 91 2d 01 	lds	r25, 0x012D
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	40 e2       	ldi	r20, 0x20	; 32
    1f48:	51 ec       	ldi	r21, 0xC1	; 193
    1f4a:	0e 94 11 18 	call	0x3022	; 0x3022 <__gesf2>
    1f4e:	18 16       	cp	r1, r24
    1f50:	b4 f4       	brge	.+44     	; 0x1f7e <main+0x908>
    1f52:	80 91 28 01 	lds	r24, 0x0128
    1f56:	90 91 29 01 	lds	r25, 0x0129
    1f5a:	89 2b       	or	r24, r25
    1f5c:	81 f4       	brne	.+32     	; 0x1f7e <main+0x908>
           
            OCR3A = 3500;
    1f5e:	ec ea       	ldi	r30, 0xAC	; 172
    1f60:	fd e0       	ldi	r31, 0x0D	; 13
    1f62:	a8 e9       	ldi	r26, 0x98	; 152
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	11 96       	adiw	r26, 0x01	; 1
    1f68:	fc 93       	st	X, r31
    1f6a:	ee 93       	st	-X, r30
            
            m_green(ON);
    1f6c:	6a 9a       	sbi	0x0d, 2	; 13
    1f6e:	72 98       	cbi	0x0e, 2	; 14
             m_red(OFF);
    1f70:	6e 9a       	sbi	0x0d, 6	; 13
    1f72:	76 9a       	sbi	0x0e, 6	; 14
            
            clear(DDRB,2);
    1f74:	22 98       	cbi	0x04, 2	; 4
            clear(PORTB,2);
    1f76:	2a 98       	cbi	0x05, 2	; 5
            
            clear(DDRC,7);
    1f78:	3f 98       	cbi	0x07, 7	; 7
            clear(PORTC,7);
    1f7a:	47 98       	cbi	0x08, 7	; 8
    1f7c:	c0 cb       	rjmp	.-2176   	; 0x16fe <main+0x88>
            
        } else {
            m_red(ON);
    1f7e:	6e 9a       	sbi	0x0d, 6	; 13
    1f80:	76 98       	cbi	0x0e, 6	; 14
            m_green(ON);
    1f82:	6a 9a       	sbi	0x0d, 2	; 13
    1f84:	72 98       	cbi	0x0e, 2	; 14
            
            OCR3A = 0;
    1f86:	a8 e9       	ldi	r26, 0x98	; 152
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	11 96       	adiw	r26, 0x01	; 1
    1f8c:	1c 92       	st	X, r1
    1f8e:	1e 92       	st	-X, r1
            
            m_green(OFF);
    1f90:	6a 9a       	sbi	0x0d, 2	; 13
    1f92:	72 9a       	sbi	0x0e, 2	; 14
            
            clear(DDRC,6);
    1f94:	3e 98       	cbi	0x07, 6	; 7
            
            clear(DDRB,2);
    1f96:	22 98       	cbi	0x04, 2	; 4
            clear(PORTB,2);
    1f98:	2a 98       	cbi	0x05, 2	; 5
            
            clear(DDRC,7);
    1f9a:	3f 98       	cbi	0x07, 7	; 7
            clear(PORTC,7);
    1f9c:	47 98       	cbi	0x08, 7	; 8
    1f9e:	af cb       	rjmp	.-2210   	; 0x16fe <main+0x88>
                first_star_flag = 1;
            } else if ((xb <= 115) && (first_star_flag == 0)){
                first_star_flag = 2;
            }
            
            m_usb_tx_int(xb);
    1fa0:	c7 01       	movw	r24, r14
    1fa2:	b6 01       	movw	r22, r12
    1fa4:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fixsfsi>
    1fa8:	cb 01       	movw	r24, r22
    1faa:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <m_usb_tx_int>
            m_usb_tx_string(" xb \n");
    1fae:	86 ee       	ldi	r24, 0xE6	; 230
    1fb0:	91 e0       	ldi	r25, 0x01	; 1
    1fb2:	0e 94 3f 13 	call	0x267e	; 0x267e <print_P>
            m_usb_tx_int(yb);
    1fb6:	c3 01       	movw	r24, r6
    1fb8:	b2 01       	movw	r22, r4
    1fba:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fixsfsi>
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <m_usb_tx_int>
            m_usb_tx_string(" yb \n");
    1fc4:	80 ee       	ldi	r24, 0xE0	; 224
    1fc6:	91 e0       	ldi	r25, 0x01	; 1
    1fc8:	0e 94 3f 13 	call	0x267e	; 0x267e <print_P>
            
            xb = coords_angle_return[0];
            yb = coords_angle_return[1];
            
            if ((xb > 115) && (first_star_flag == 0)) {
                first_star_flag = 1;
    1fcc:	b1 e0       	ldi	r27, 0x01	; 1
    1fce:	b9 a7       	std	Y+41, r27	; 0x29
    1fd0:	1a a6       	std	Y+42, r1	; 0x2a
            continue;
        }
        
        
        if (first_star_flag == 1) {
            xg = 0;
    1fd2:	1b a6       	std	Y+43, r1	; 0x2b
    1fd4:	1c a6       	std	Y+44, r1	; 0x2c
    1fd6:	1d a6       	std	Y+45, r1	; 0x2d
    1fd8:	1e a6       	std	Y+46, r1	; 0x2e
    1fda:	c9 cc       	rjmp	.-1646   	; 0x196e <main+0x2f8>
                first_star_flag = 1;
            } else if ((xb <= 115) && (first_star_flag == 0)){
                first_star_flag = 2;
            }
            
            m_usb_tx_int(xb);
    1fdc:	c7 01       	movw	r24, r14
    1fde:	b6 01       	movw	r22, r12
    1fe0:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fixsfsi>
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <m_usb_tx_int>
            m_usb_tx_string(" xb \n");
    1fea:	86 ee       	ldi	r24, 0xE6	; 230
    1fec:	91 e0       	ldi	r25, 0x01	; 1
    1fee:	0e 94 3f 13 	call	0x267e	; 0x267e <print_P>
            m_usb_tx_int(yb);
    1ff2:	c3 01       	movw	r24, r6
    1ff4:	b2 01       	movw	r22, r4
    1ff6:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__fixsfsi>
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <m_usb_tx_int>
            m_usb_tx_string(" yb \n");
    2000:	80 ee       	ldi	r24, 0xE0	; 224
    2002:	91 e0       	ldi	r25, 0x01	; 1
    2004:	0e 94 3f 13 	call	0x267e	; 0x267e <print_P>
            yb = coords_angle_return[1];
            
            if ((xb > 115) && (first_star_flag == 0)) {
                first_star_flag = 1;
            } else if ((xb <= 115) && (first_star_flag == 0)){
                first_star_flag = 2;
    2008:	e2 e0       	ldi	r30, 0x02	; 2
    200a:	e9 a7       	std	Y+41, r30	; 0x29
    200c:	1a a6       	std	Y+42, r1	; 0x2a
        
        if (first_star_flag == 1) {
            xg = 0;
            yg = 60;
        } else if (first_star_flag == 2){
            xg = 230;
    200e:	1b a6       	std	Y+43, r1	; 0x2b
    2010:	1c a6       	std	Y+44, r1	; 0x2c
    2012:	f6 e6       	ldi	r31, 0x66	; 102
    2014:	fd a7       	std	Y+45, r31	; 0x2d
    2016:	23 e4       	ldi	r18, 0x43	; 67
    2018:	2e a7       	std	Y+46, r18	; 0x2e
    201a:	a9 cc       	rjmp	.-1710   	; 0x196e <main+0x2f8>

0000201c <__vector_3>:
}



ISR(INT2_vect)
{
    201c:	1f 92       	push	r1
    201e:	0f 92       	push	r0
    2020:	0f b6       	in	r0, 0x3f	; 63
    2022:	0f 92       	push	r0
    2024:	11 24       	eor	r1, r1
    2026:	2f 93       	push	r18
    2028:	3f 93       	push	r19
    202a:	4f 93       	push	r20
    202c:	5f 93       	push	r21
    202e:	6f 93       	push	r22
    2030:	7f 93       	push	r23
    2032:	8f 93       	push	r24
    2034:	9f 93       	push	r25
    2036:	af 93       	push	r26
    2038:	bf 93       	push	r27
    203a:	ef 93       	push	r30
    203c:	ff 93       	push	r31
    (m_rf_read(buffer,PACKET_LENGTH));
    203e:	6a e0       	ldi	r22, 0x0A	; 10
    2040:	88 e0       	ldi	r24, 0x08	; 8
    2042:	91 e0       	ldi	r25, 0x01	; 1
    2044:	0e 94 a6 10 	call	0x214c	; 0x214c <m_rf_read>
    
    
        if (buffer[0] == 0xA1)
    2048:	80 91 08 01 	lds	r24, 0x0108
    204c:	81 3a       	cpi	r24, 0xA1	; 161
    204e:	31 f4       	brne	.+12     	; 0x205c <__vector_3+0x40>
        {
            play_com = 1;
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	90 93 13 01 	sts	0x0113, r25
    2058:	80 93 12 01 	sts	0x0112, r24
//             m_green(TOGGLE);
        
        }
    
}
    205c:	ff 91       	pop	r31
    205e:	ef 91       	pop	r30
    2060:	bf 91       	pop	r27
    2062:	af 91       	pop	r26
    2064:	9f 91       	pop	r25
    2066:	8f 91       	pop	r24
    2068:	7f 91       	pop	r23
    206a:	6f 91       	pop	r22
    206c:	5f 91       	pop	r21
    206e:	4f 91       	pop	r20
    2070:	3f 91       	pop	r19
    2072:	2f 91       	pop	r18
    2074:	0f 90       	pop	r0
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	0f 90       	pop	r0
    207a:	1f 90       	pop	r1
    207c:	18 95       	reti

0000207e <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    207e:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    2080:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    2082:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    2084:	8c e0       	ldi	r24, 0x0C	; 12
    2086:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    208a:	e9 e6       	ldi	r30, 0x69	; 105
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	80 62       	ori	r24, 0x20	; 32
    2092:	80 83       	st	Z, r24
    2094:	80 81       	ld	r24, Z
    2096:	8f 7e       	andi	r24, 0xEF	; 239
    2098:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    209a:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    209c:	78 94       	sei
    209e:	08 95       	ret

000020a0 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    20a0:	1f 93       	push	r17
    20a2:	cf 93       	push	r28
    20a4:	df 93       	push	r29
    20a6:	18 2f       	mov	r17, r24
    20a8:	d6 2f       	mov	r29, r22
    20aa:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    20ac:	0e 94 3f 10 	call	0x207e	; 0x207e <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    20b0:	94 ea       	ldi	r25, 0xA4	; 164
    20b2:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    20b6:	ec eb       	ldi	r30, 0xBC	; 188
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	90 81       	ld	r25, Z
    20bc:	99 23       	and	r25, r25
    20be:	ec f7       	brge	.-6      	; 0x20ba <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    20c0:	90 e5       	ldi	r25, 0x50	; 80
    20c2:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    20c6:	94 e8       	ldi	r25, 0x84	; 132
    20c8:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    20cc:	ec eb       	ldi	r30, 0xBC	; 188
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	90 81       	ld	r25, Z
    20d2:	99 23       	and	r25, r25
    20d4:	ec f7       	brge	.-6      	; 0x20d0 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    20d6:	90 91 b9 00 	lds	r25, 0x00B9
    20da:	98 7f       	andi	r25, 0xF8	; 248
    20dc:	90 32       	cpi	r25, 0x20	; 32
    20de:	29 f4       	brne	.+10     	; 0x20ea <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    20e0:	84 e9       	ldi	r24, 0x94	; 148
    20e2:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	2d c0       	rjmp	.+90     	; 0x2144 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    20f0:	84 e8       	ldi	r24, 0x84	; 132
    20f2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    20f6:	ec eb       	ldi	r30, 0xBC	; 188
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	90 81       	ld	r25, Z
    20fc:	99 23       	and	r25, r25
    20fe:	ec f7       	brge	.-6      	; 0x20fa <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    2100:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    2104:	84 e8       	ldi	r24, 0x84	; 132
    2106:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    210a:	ec eb       	ldi	r30, 0xBC	; 188
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	88 23       	and	r24, r24
    2112:	ec f7       	brge	.-6      	; 0x210e <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    2114:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    2118:	84 e8       	ldi	r24, 0x84	; 132
    211a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    211e:	ec eb       	ldi	r30, 0xBC	; 188
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	88 23       	and	r24, r24
    2126:	ec f7       	brge	.-6      	; 0x2122 <m_rf_open+0x82>
	
	TWDR = packet_length;
    2128:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    212c:	84 e8       	ldi	r24, 0x84	; 132
    212e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2132:	ec eb       	ldi	r30, 0xBC	; 188
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	88 23       	and	r24, r24
    213a:	ec f7       	brge	.-6      	; 0x2136 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    213c:	84 e9       	ldi	r24, 0x94	; 148
    213e:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    2142:	81 e0       	ldi	r24, 0x01	; 1
}
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	1f 91       	pop	r17
    214a:	08 95       	ret

0000214c <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2152:	84 ea       	ldi	r24, 0xA4	; 164
    2154:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2158:	ec eb       	ldi	r30, 0xBC	; 188
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	90 81       	ld	r25, Z
    215e:	99 23       	and	r25, r25
    2160:	ec f7       	brge	.-6      	; 0x215c <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    2162:	81 e5       	ldi	r24, 0x51	; 81
    2164:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2168:	84 e8       	ldi	r24, 0x84	; 132
    216a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    216e:	ec eb       	ldi	r30, 0xBC	; 188
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	90 81       	ld	r25, Z
    2174:	99 23       	and	r25, r25
    2176:	ec f7       	brge	.-6      	; 0x2172 <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    2178:	80 91 b9 00 	lds	r24, 0x00B9
    217c:	88 7f       	andi	r24, 0xF8	; 248
    217e:	88 34       	cpi	r24, 0x48	; 72
    2180:	29 f4       	brne	.+10     	; 0x218c <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2182:	84 e9       	ldi	r24, 0x94	; 148
    2184:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	41 c0       	rjmp	.+130    	; 0x220e <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    218c:	84 ec       	ldi	r24, 0xC4	; 196
    218e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2192:	ec eb       	ldi	r30, 0xBC	; 188
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	90 81       	ld	r25, Z
    2198:	99 23       	and	r25, r25
    219a:	ec f7       	brge	.-6      	; 0x2196 <m_rf_read+0x4a>
	bytes = TWDR;
    219c:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    21a0:	46 13       	cpse	r20, r22
    21a2:	09 c0       	rjmp	.+18     	; 0x21b6 <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    21a4:	84 2f       	mov	r24, r20
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	18 16       	cp	r1, r24
    21ac:	19 06       	cpc	r1, r25
    21ae:	44 f0       	brlt	.+16     	; 0x21c0 <m_rf_read+0x74>
    21b0:	40 e0       	ldi	r20, 0x00	; 0
    21b2:	50 e0       	ldi	r21, 0x00	; 0
    21b4:	1a c0       	rjmp	.+52     	; 0x21ea <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    21b6:	84 e9       	ldi	r24, 0x94	; 148
    21b8:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	27 c0       	rjmp	.+78     	; 0x220e <m_rf_read+0xc2>
    21c0:	d9 01       	movw	r26, r18
    21c2:	50 e0       	ldi	r21, 0x00	; 0
    21c4:	41 50       	subi	r20, 0x01	; 1
    21c6:	51 09       	sbc	r21, r1
    21c8:	b9 01       	movw	r22, r18
    21ca:	64 0f       	add	r22, r20
    21cc:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    21ce:	ec eb       	ldi	r30, 0xBC	; 188
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    21d4:	cb eb       	ldi	r28, 0xBB	; 187
    21d6:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    21d8:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    21da:	90 81       	ld	r25, Z
    21dc:	99 23       	and	r25, r25
    21de:	ec f7       	brge	.-6      	; 0x21da <m_rf_read+0x8e>
		buffer[i] = TWDR;
    21e0:	98 81       	ld	r25, Y
    21e2:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    21e4:	a6 17       	cp	r26, r22
    21e6:	b7 07       	cpc	r27, r23
    21e8:	b9 f7       	brne	.-18     	; 0x21d8 <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    21ea:	84 e8       	ldi	r24, 0x84	; 132
    21ec:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    21f0:	ec eb       	ldi	r30, 0xBC	; 188
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	90 81       	ld	r25, Z
    21f6:	99 23       	and	r25, r25
    21f8:	ec f7       	brge	.-6      	; 0x21f4 <m_rf_read+0xa8>
	buffer[i++] = TWDR;
    21fa:	80 91 bb 00 	lds	r24, 0x00BB
    21fe:	f9 01       	movw	r30, r18
    2200:	e4 0f       	add	r30, r20
    2202:	f5 1f       	adc	r31, r21
    2204:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2206:	84 e9       	ldi	r24, 0x94	; 148
    2208:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    220c:	81 e0       	ldi	r24, 0x01	; 1
}
    220e:	df 91       	pop	r29
    2210:	cf 91       	pop	r28
    2212:	08 95       	ret

00002214 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    221a:	80 ea       	ldi	r24, 0xA0	; 160
    221c:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    2220:	82 e1       	ldi	r24, 0x12	; 18
    2222:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    2224:	09 b4       	in	r0, 0x29	; 41
    2226:	00 fe       	sbrs	r0, 0
    2228:	fd cf       	rjmp	.-6      	; 0x2224 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    222a:	80 e9       	ldi	r24, 0x90	; 144
    222c:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    2230:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    2234:	10 92 17 01 	sts	0x0117, r1
	cdc_line_rtsdtr = 0;
    2238:	10 92 14 01 	sts	0x0114, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    223c:	8c e0       	ldi	r24, 0x0C	; 12
    223e:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    2242:	78 94       	sei
    2244:	08 95       	ret

00002246 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    224a:	90 91 17 01 	lds	r25, 0x0117
    224e:	99 23       	and	r25, r25
    2250:	09 f4       	brne	.+2      	; 0x2254 <m_usb_tx_char+0xe>
    2252:	4c c0       	rjmp	.+152    	; 0x22ec <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    2254:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2256:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    2258:	24 e0       	ldi	r18, 0x04	; 4
    225a:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    225e:	20 91 15 01 	lds	r18, 0x0115
    2262:	22 23       	and	r18, r18
    2264:	49 f0       	breq	.+18     	; 0x2278 <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
    2266:	20 91 e8 00 	lds	r18, 0x00E8
    226a:	25 fd       	sbrc	r18, 5
    226c:	03 c0       	rjmp	.+6      	; 0x2274 <m_usb_tx_char+0x2e>
			SREG = intr_state;
    226e:	9f bf       	out	0x3f, r25	; 63
			return -1;
    2270:	8f ef       	ldi	r24, 0xFF	; 255
    2272:	41 c0       	rjmp	.+130    	; 0x22f6 <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
    2274:	10 92 15 01 	sts	0x0115, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    2278:	30 91 e4 00 	lds	r19, 0x00E4
    227c:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    227e:	20 91 e8 00 	lds	r18, 0x00E8
    2282:	25 fd       	sbrc	r18, 5
    2284:	24 c0       	rjmp	.+72     	; 0x22ce <m_usb_tx_char+0x88>
		SREG = intr_state;
    2286:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2288:	90 91 e4 00 	lds	r25, 0x00E4
    228c:	93 17       	cp	r25, r19
    228e:	81 f0       	breq	.+32     	; 0x22b0 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2290:	90 91 17 01 	lds	r25, 0x0117
    2294:	99 23       	and	r25, r25
    2296:	61 f1       	breq	.+88     	; 0x22f0 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    2298:	a9 ee       	ldi	r26, 0xE9	; 233
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    229e:	e8 ee       	ldi	r30, 0xE8	; 232
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    22a2:	c4 ee       	ldi	r28, 0xE4	; 228
    22a4:	d0 e0       	ldi	r29, 0x00	; 0
    22a6:	0d c0       	rjmp	.+26     	; 0x22c2 <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    22a8:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    22aa:	98 81       	ld	r25, Y
    22ac:	93 13       	cpse	r25, r19
    22ae:	05 c0       	rjmp	.+10     	; 0x22ba <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	80 93 15 01 	sts	0x0115, r24
			return -1;
    22b6:	8f ef       	ldi	r24, 0xFF	; 255
    22b8:	1e c0       	rjmp	.+60     	; 0x22f6 <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    22ba:	90 91 17 01 	lds	r25, 0x0117
    22be:	99 23       	and	r25, r25
    22c0:	c9 f0       	breq	.+50     	; 0x22f4 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
    22c2:	9f b7       	in	r25, 0x3f	; 63
		cli();
    22c4:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    22c6:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    22c8:	20 81       	ld	r18, Z
    22ca:	25 ff       	sbrs	r18, 5
    22cc:	ed cf       	rjmp	.-38     	; 0x22a8 <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    22ce:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    22d2:	80 91 e8 00 	lds	r24, 0x00E8
    22d6:	85 fd       	sbrc	r24, 5
    22d8:	03 c0       	rjmp	.+6      	; 0x22e0 <m_usb_tx_char+0x9a>
    22da:	8a e3       	ldi	r24, 0x3A	; 58
    22dc:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    22e0:	85 e0       	ldi	r24, 0x05	; 5
    22e2:	80 93 16 01 	sts	0x0116, r24
	SREG = intr_state;
    22e6:	9f bf       	out	0x3f, r25	; 63
	return 0;
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	05 c0       	rjmp	.+10     	; 0x22f6 <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    22ec:	8f ef       	ldi	r24, 0xFF	; 255
    22ee:	03 c0       	rjmp	.+6      	; 0x22f6 <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    22f0:	8f ef       	ldi	r24, 0xFF	; 255
    22f2:	01 c0       	rjmp	.+2      	; 0x22f6 <m_usb_tx_char+0xb0>
    22f4:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    22f6:	df 91       	pop	r29
    22f8:	cf 91       	pop	r28
    22fa:	08 95       	ret

000022fc <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    22fc:	1f 92       	push	r1
    22fe:	0f 92       	push	r0
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	0f 92       	push	r0
    2304:	11 24       	eor	r1, r1
    2306:	8f 93       	push	r24
    2308:	9f 93       	push	r25
    230a:	ef 93       	push	r30
    230c:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    230e:	e1 ee       	ldi	r30, 0xE1	; 225
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
        UDINT = 0;
    2314:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    2316:	83 ff       	sbrs	r24, 3
    2318:	11 c0       	rjmp	.+34     	; 0x233c <__vector_10+0x40>
		UENUM = 0;
    231a:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    231e:	91 e0       	ldi	r25, 0x01	; 1
    2320:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    2324:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    2328:	92 e1       	ldi	r25, 0x12	; 18
    232a:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    232e:	98 e0       	ldi	r25, 0x08	; 8
    2330:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    2334:	10 92 17 01 	sts	0x0117, r1
		cdc_line_rtsdtr = 0;
    2338:	10 92 14 01 	sts	0x0114, r1
        }
	if (intbits & (1<<SOFI)) {
    233c:	82 ff       	sbrs	r24, 2
    233e:	13 c0       	rjmp	.+38     	; 0x2366 <__vector_10+0x6a>
		if (usb_configuration) {
    2340:	80 91 17 01 	lds	r24, 0x0117
    2344:	88 23       	and	r24, r24
    2346:	79 f0       	breq	.+30     	; 0x2366 <__vector_10+0x6a>
			t = transmit_flush_timer;
    2348:	80 91 16 01 	lds	r24, 0x0116
			if (t) {
    234c:	88 23       	and	r24, r24
    234e:	59 f0       	breq	.+22     	; 0x2366 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    2350:	81 50       	subi	r24, 0x01	; 1
    2352:	80 93 16 01 	sts	0x0116, r24
				if (!t) {
    2356:	81 11       	cpse	r24, r1
    2358:	06 c0       	rjmp	.+12     	; 0x2366 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    235a:	84 e0       	ldi	r24, 0x04	; 4
    235c:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    2360:	8a e3       	ldi	r24, 0x3A	; 58
    2362:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    2366:	ff 91       	pop	r31
    2368:	ef 91       	pop	r30
    236a:	9f 91       	pop	r25
    236c:	8f 91       	pop	r24
    236e:	0f 90       	pop	r0
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	0f 90       	pop	r0
    2374:	1f 90       	pop	r1
    2376:	18 95       	reti

00002378 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    2378:	1f 92       	push	r1
    237a:	0f 92       	push	r0
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	0f 92       	push	r0
    2380:	11 24       	eor	r1, r1
    2382:	0f 93       	push	r16
    2384:	1f 93       	push	r17
    2386:	2f 93       	push	r18
    2388:	3f 93       	push	r19
    238a:	4f 93       	push	r20
    238c:	5f 93       	push	r21
    238e:	6f 93       	push	r22
    2390:	7f 93       	push	r23
    2392:	8f 93       	push	r24
    2394:	9f 93       	push	r25
    2396:	af 93       	push	r26
    2398:	bf 93       	push	r27
    239a:	cf 93       	push	r28
    239c:	df 93       	push	r29
    239e:	ef 93       	push	r30
    23a0:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    23a2:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    23a6:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    23aa:	83 ff       	sbrs	r24, 3
    23ac:	4c c1       	rjmp	.+664    	; 0x2646 <__vector_11+0x2ce>
                bmRequestType = UEDATX;
    23ae:	e1 ef       	ldi	r30, 0xF1	; 241
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	60 81       	ld	r22, Z
                bRequest = UEDATX;
    23b4:	80 81       	ld	r24, Z
                wValue = UEDATX;
    23b6:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    23b8:	90 81       	ld	r25, Z
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	39 2b       	or	r19, r25
                wIndex = UEDATX;
    23be:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
    23c0:	90 81       	ld	r25, Z
    23c2:	50 e0       	ldi	r21, 0x00	; 0
    23c4:	59 2b       	or	r21, r25
                wLength = UEDATX;
    23c6:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
    23c8:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    23ca:	92 ef       	ldi	r25, 0xF2	; 242
    23cc:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
    23d0:	86 30       	cpi	r24, 0x06	; 6
    23d2:	09 f0       	breq	.+2      	; 0x23d6 <__vector_11+0x5e>
    23d4:	58 c0       	rjmp	.+176    	; 0x2486 <__vector_11+0x10e>
    23d6:	04 c0       	rjmp	.+8      	; 0x23e0 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    23d8:	81 e2       	ldi	r24, 0x21	; 33
    23da:	80 93 eb 00 	sts	0x00EB, r24
					return;
    23de:	3a c1       	rjmp	.+628    	; 0x2654 <__vector_11+0x2dc>
    23e0:	66 e0       	ldi	r22, 0x06	; 6
    23e2:	86 ef       	ldi	r24, 0xF6	; 246
    23e4:	91 e0       	ldi	r25, 0x01	; 1
				}
				desc_val = pgm_read_word(list);
    23e6:	fc 01       	movw	r30, r24
    23e8:	a5 91       	lpm	r26, Z+
    23ea:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
    23ec:	2a 17       	cp	r18, r26
    23ee:	3b 07       	cpc	r19, r27
    23f0:	11 f0       	breq	.+4      	; 0x23f6 <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
    23f2:	07 96       	adiw	r24, 0x07	; 7
					continue;
    23f4:	23 c0       	rjmp	.+70     	; 0x243c <__vector_11+0xc4>
				}
				list += 2;
    23f6:	fc 01       	movw	r30, r24
    23f8:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    23fa:	a5 91       	lpm	r26, Z+
    23fc:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
    23fe:	4a 17       	cp	r20, r26
    2400:	5b 07       	cpc	r21, r27
    2402:	11 f0       	breq	.+4      	; 0x2408 <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
    2404:	07 96       	adiw	r24, 0x07	; 7
					continue;
    2406:	1a c0       	rjmp	.+52     	; 0x243c <__vector_11+0xc4>
				}
				list += 2;
    2408:	fc 01       	movw	r30, r24
    240a:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    240c:	45 91       	lpm	r20, Z+
    240e:	54 91       	lpm	r21, Z
				list += 2;
    2410:	fc 01       	movw	r30, r24
    2412:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    2414:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    2416:	87 2f       	mov	r24, r23
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    241c:	8f 3f       	cpi	r24, 0xFF	; 255
    241e:	91 05       	cpc	r25, r1
    2420:	19 f0       	breq	.+6      	; 0x2428 <__vector_11+0xb0>
    2422:	10 f0       	brcs	.+4      	; 0x2428 <__vector_11+0xb0>
    2424:	8f ef       	ldi	r24, 0xFF	; 255
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	82 17       	cp	r24, r18
    242a:	08 f4       	brcc	.+2      	; 0x242e <__vector_11+0xb6>
    242c:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    242e:	a8 ee       	ldi	r26, 0xE8	; 232
    2430:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2432:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2434:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    2436:	c1 ef       	ldi	r28, 0xF1	; 241
    2438:	d0 e0       	ldi	r29, 0x00	; 0
    243a:	03 c0       	rjmp	.+6      	; 0x2442 <__vector_11+0xca>
    243c:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    243e:	99 f6       	brne	.-90     	; 0x23e6 <__vector_11+0x6e>
    2440:	cb cf       	rjmp	.-106    	; 0x23d8 <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2442:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    2444:	98 2f       	mov	r25, r24
    2446:	95 70       	andi	r25, 0x05	; 5
    2448:	e1 f3       	breq	.-8      	; 0x2442 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
    244a:	82 fd       	sbrc	r24, 2
    244c:	03 c1       	rjmp	.+518    	; 0x2654 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    244e:	32 2f       	mov	r19, r18
    2450:	21 31       	cpi	r18, 0x11	; 17
    2452:	08 f0       	brcs	.+2      	; 0x2456 <__vector_11+0xde>
    2454:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
    2456:	33 23       	and	r19, r19
    2458:	09 f4       	brne	.+2      	; 0x245c <__vector_11+0xe4>
    245a:	f9 c0       	rjmp	.+498    	; 0x264e <__vector_11+0x2d6>
    245c:	fa 01       	movw	r30, r20
    245e:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
    2460:	94 91       	lpm	r25, Z
    2462:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    2464:	81 50       	subi	r24, 0x01	; 1
    2466:	31 96       	adiw	r30, 0x01	; 1
    2468:	81 11       	cpse	r24, r1
    246a:	fa cf       	rjmp	.-12     	; 0x2460 <__vector_11+0xe8>
    246c:	8f ef       	ldi	r24, 0xFF	; 255
    246e:	83 0f       	add	r24, r19
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	01 96       	adiw	r24, 0x01	; 1
    2474:	48 0f       	add	r20, r24
    2476:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    2478:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    247a:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    247c:	21 11       	cpse	r18, r1
    247e:	e1 cf       	rjmp	.-62     	; 0x2442 <__vector_11+0xca>
    2480:	30 31       	cpi	r19, 0x10	; 16
    2482:	f9 f2       	breq	.-66     	; 0x2442 <__vector_11+0xca>
    2484:	e7 c0       	rjmp	.+462    	; 0x2654 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    2486:	85 30       	cpi	r24, 0x05	; 5
    2488:	61 f4       	brne	.+24     	; 0x24a2 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    248a:	8e ef       	ldi	r24, 0xFE	; 254
    248c:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2490:	e8 ee       	ldi	r30, 0xE8	; 232
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	80 ff       	sbrs	r24, 0
    2498:	fd cf       	rjmp	.-6      	; 0x2494 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    249a:	20 68       	ori	r18, 0x80	; 128
    249c:	20 93 e3 00 	sts	0x00E3, r18
			return;
    24a0:	d9 c0       	rjmp	.+434    	; 0x2654 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    24a2:	89 30       	cpi	r24, 0x09	; 9
    24a4:	09 f0       	breq	.+2      	; 0x24a8 <__vector_11+0x130>
    24a6:	35 c0       	rjmp	.+106    	; 0x2512 <__vector_11+0x19a>
    24a8:	61 11       	cpse	r22, r1
    24aa:	cd c0       	rjmp	.+410    	; 0x2646 <__vector_11+0x2ce>
			usb_configuration = wValue;
    24ac:	20 93 17 01 	sts	0x0117, r18
			cdc_line_rtsdtr = 0;
    24b0:	10 92 14 01 	sts	0x0114, r1
			transmit_flush_timer = 0;
    24b4:	10 92 16 01 	sts	0x0116, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    24b8:	8e ef       	ldi	r24, 0xFE	; 254
    24ba:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    24be:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    24c0:	2f e9       	ldi	r18, 0x9F	; 159
    24c2:	32 e0       	ldi	r19, 0x02	; 2
			for (i=1; i<5; i++) {
				UENUM = i;
    24c4:	c9 ee       	ldi	r28, 0xE9	; 233
    24c6:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    24c8:	ab ee       	ldi	r26, 0xEB	; 235
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    24cc:	0c ee       	ldi	r16, 0xEC	; 236
    24ce:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    24d0:	6d ee       	ldi	r22, 0xED	; 237
    24d2:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    24d4:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
    24d6:	a9 01       	movw	r20, r18
    24d8:	4f 5f       	subi	r20, 0xFF	; 255
    24da:	5f 4f       	sbci	r21, 0xFF	; 255
    24dc:	f9 01       	movw	r30, r18
    24de:	94 91       	lpm	r25, Z
				UECONX = en;
    24e0:	9c 93       	st	X, r25
				if (en) {
    24e2:	99 23       	and	r25, r25
    24e4:	61 f0       	breq	.+24     	; 0x24fe <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
    24e6:	fa 01       	movw	r30, r20
    24e8:	44 91       	lpm	r20, Z
    24ea:	f8 01       	movw	r30, r16
    24ec:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
    24ee:	f9 01       	movw	r30, r18
    24f0:	32 96       	adiw	r30, 0x02	; 2
    24f2:	94 91       	lpm	r25, Z
    24f4:	2d 5f       	subi	r18, 0xFD	; 253
    24f6:	3f 4f       	sbci	r19, 0xFF	; 255
    24f8:	fb 01       	movw	r30, r22
    24fa:	90 83       	st	Z, r25
    24fc:	01 c0       	rjmp	.+2      	; 0x2500 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    24fe:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2500:	8f 5f       	subi	r24, 0xFF	; 255
    2502:	85 30       	cpi	r24, 0x05	; 5
    2504:	39 f7       	brne	.-50     	; 0x24d4 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    2506:	ea ee       	ldi	r30, 0xEA	; 234
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	8e e1       	ldi	r24, 0x1E	; 30
    250c:	80 83       	st	Z, r24
        		UERST = 0;
    250e:	10 82       	st	Z, r1
			return;
    2510:	a1 c0       	rjmp	.+322    	; 0x2654 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    2512:	88 30       	cpi	r24, 0x08	; 8
    2514:	81 f4       	brne	.+32     	; 0x2536 <__vector_11+0x1be>
    2516:	60 38       	cpi	r22, 0x80	; 128
    2518:	09 f0       	breq	.+2      	; 0x251c <__vector_11+0x1a4>
    251a:	95 c0       	rjmp	.+298    	; 0x2646 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    251c:	e8 ee       	ldi	r30, 0xE8	; 232
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	80 ff       	sbrs	r24, 0
    2524:	fd cf       	rjmp	.-6      	; 0x2520 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    2526:	80 91 17 01 	lds	r24, 0x0117
    252a:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    252e:	8e ef       	ldi	r24, 0xFE	; 254
    2530:	80 93 e8 00 	sts	0x00E8, r24
    2534:	8f c0       	rjmp	.+286    	; 0x2654 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    2536:	81 32       	cpi	r24, 0x21	; 33
    2538:	b9 f4       	brne	.+46     	; 0x2568 <__vector_11+0x1f0>
    253a:	61 3a       	cpi	r22, 0xA1	; 161
    253c:	09 f0       	breq	.+2      	; 0x2540 <__vector_11+0x1c8>
    253e:	83 c0       	rjmp	.+262    	; 0x2646 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2540:	e8 ee       	ldi	r30, 0xE8	; 232
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	80 ff       	sbrs	r24, 0
    2548:	fd cf       	rjmp	.-6      	; 0x2544 <__vector_11+0x1cc>
    254a:	e0 e0       	ldi	r30, 0x00	; 0
    254c:	f1 e0       	ldi	r31, 0x01	; 1
    254e:	27 e0       	ldi	r18, 0x07	; 7
    2550:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    2552:	a1 ef       	ldi	r26, 0xF1	; 241
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	81 91       	ld	r24, Z+
    2558:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    255a:	e2 17       	cp	r30, r18
    255c:	f3 07       	cpc	r31, r19
    255e:	d9 f7       	brne	.-10     	; 0x2556 <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2560:	8e ef       	ldi	r24, 0xFE	; 254
    2562:	80 93 e8 00 	sts	0x00E8, r24
    2566:	76 c0       	rjmp	.+236    	; 0x2654 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    2568:	80 32       	cpi	r24, 0x20	; 32
    256a:	d1 f4       	brne	.+52     	; 0x25a0 <__vector_11+0x228>
    256c:	61 32       	cpi	r22, 0x21	; 33
    256e:	09 f0       	breq	.+2      	; 0x2572 <__vector_11+0x1fa>
    2570:	6a c0       	rjmp	.+212    	; 0x2646 <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    2572:	e8 ee       	ldi	r30, 0xE8	; 232
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	82 ff       	sbrs	r24, 2
    257a:	fd cf       	rjmp	.-6      	; 0x2576 <__vector_11+0x1fe>
    257c:	e0 e0       	ldi	r30, 0x00	; 0
    257e:	f1 e0       	ldi	r31, 0x01	; 1
    2580:	27 e0       	ldi	r18, 0x07	; 7
    2582:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    2584:	a1 ef       	ldi	r26, 0xF1	; 241
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	8c 91       	ld	r24, X
    258a:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    258c:	e2 17       	cp	r30, r18
    258e:	f3 07       	cpc	r31, r19
    2590:	d9 f7       	brne	.-10     	; 0x2588 <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    2592:	e8 ee       	ldi	r30, 0xE8	; 232
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	8b ef       	ldi	r24, 0xFB	; 251
    2598:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    259a:	8e ef       	ldi	r24, 0xFE	; 254
    259c:	80 83       	st	Z, r24
    259e:	5a c0       	rjmp	.+180    	; 0x2654 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    25a0:	82 32       	cpi	r24, 0x22	; 34
    25a2:	71 f4       	brne	.+28     	; 0x25c0 <__vector_11+0x248>
    25a4:	61 32       	cpi	r22, 0x21	; 33
    25a6:	09 f0       	breq	.+2      	; 0x25aa <__vector_11+0x232>
    25a8:	4e c0       	rjmp	.+156    	; 0x2646 <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
    25aa:	20 93 14 01 	sts	0x0114, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    25ae:	e8 ee       	ldi	r30, 0xE8	; 232
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	80 ff       	sbrs	r24, 0
    25b6:	fd cf       	rjmp	.-6      	; 0x25b2 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    25b8:	8e ef       	ldi	r24, 0xFE	; 254
    25ba:	80 93 e8 00 	sts	0x00E8, r24
    25be:	4a c0       	rjmp	.+148    	; 0x2654 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    25c0:	81 11       	cpse	r24, r1
    25c2:	1a c0       	rjmp	.+52     	; 0x25f8 <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    25c4:	e8 ee       	ldi	r30, 0xE8	; 232
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	80 ff       	sbrs	r24, 0
    25cc:	fd cf       	rjmp	.-6      	; 0x25c8 <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    25ce:	62 38       	cpi	r22, 0x82	; 130
    25d0:	51 f4       	brne	.+20     	; 0x25e6 <__vector_11+0x26e>
				UENUM = wIndex;
    25d2:	e9 ee       	ldi	r30, 0xE9	; 233
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
    25d8:	80 91 eb 00 	lds	r24, 0x00EB
    25dc:	85 fb       	bst	r24, 5
    25de:	88 27       	eor	r24, r24
    25e0:	80 f9       	bld	r24, 0
				UENUM = 0;
    25e2:	10 82       	st	Z, r1
    25e4:	01 c0       	rjmp	.+2      	; 0x25e8 <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    25e6:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    25e8:	e1 ef       	ldi	r30, 0xF1	; 241
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 83       	st	Z, r24
			UEDATX = 0;
    25ee:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    25f0:	8e ef       	ldi	r24, 0xFE	; 254
    25f2:	80 93 e8 00 	sts	0x00E8, r24
    25f6:	2e c0       	rjmp	.+92     	; 0x2654 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    25f8:	98 2f       	mov	r25, r24
    25fa:	9d 7f       	andi	r25, 0xFD	; 253
    25fc:	91 30       	cpi	r25, 0x01	; 1
    25fe:	19 f5       	brne	.+70     	; 0x2646 <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
    2600:	62 30       	cpi	r22, 0x02	; 2
    2602:	09 f5       	brne	.+66     	; 0x2646 <__vector_11+0x2ce>
    2604:	23 2b       	or	r18, r19
    2606:	f9 f4       	brne	.+62     	; 0x2646 <__vector_11+0x2ce>
			i = wIndex & 0x7F;
    2608:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    260a:	9f ef       	ldi	r25, 0xFF	; 255
    260c:	94 0f       	add	r25, r20
    260e:	94 30       	cpi	r25, 0x04	; 4
    2610:	d0 f4       	brcc	.+52     	; 0x2646 <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2612:	9e ef       	ldi	r25, 0xFE	; 254
    2614:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    2618:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
    261c:	83 30       	cpi	r24, 0x03	; 3
    261e:	21 f4       	brne	.+8      	; 0x2628 <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    2620:	81 e2       	ldi	r24, 0x21	; 33
    2622:	80 93 eb 00 	sts	0x00EB, r24
    2626:	16 c0       	rjmp	.+44     	; 0x2654 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    2628:	89 e1       	ldi	r24, 0x19	; 25
    262a:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	02 c0       	rjmp	.+4      	; 0x2638 <__vector_11+0x2c0>
    2634:	88 0f       	add	r24, r24
    2636:	99 1f       	adc	r25, r25
    2638:	4a 95       	dec	r20
    263a:	e2 f7       	brpl	.-8      	; 0x2634 <__vector_11+0x2bc>
    263c:	ea ee       	ldi	r30, 0xEA	; 234
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 83       	st	Z, r24
					UERST = 0;
    2642:	10 82       	st	Z, r1
    2644:	07 c0       	rjmp	.+14     	; 0x2654 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    2646:	81 e2       	ldi	r24, 0x21	; 33
    2648:	80 93 eb 00 	sts	0x00EB, r24
    264c:	03 c0       	rjmp	.+6      	; 0x2654 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    264e:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2650:	21 11       	cpse	r18, r1
    2652:	f7 ce       	rjmp	.-530    	; 0x2442 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    2654:	ff 91       	pop	r31
    2656:	ef 91       	pop	r30
    2658:	df 91       	pop	r29
    265a:	cf 91       	pop	r28
    265c:	bf 91       	pop	r27
    265e:	af 91       	pop	r26
    2660:	9f 91       	pop	r25
    2662:	8f 91       	pop	r24
    2664:	7f 91       	pop	r23
    2666:	6f 91       	pop	r22
    2668:	5f 91       	pop	r21
    266a:	4f 91       	pop	r20
    266c:	3f 91       	pop	r19
    266e:	2f 91       	pop	r18
    2670:	1f 91       	pop	r17
    2672:	0f 91       	pop	r16
    2674:	0f 90       	pop	r0
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	0f 90       	pop	r0
    267a:	1f 90       	pop	r1
    267c:	18 95       	reti

0000267e <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    267e:	0f 93       	push	r16
    2680:	1f 93       	push	r17
    2682:	cf 93       	push	r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    2684:	8c 01       	movw	r16, r24
    2686:	0f 5f       	subi	r16, 0xFF	; 255
    2688:	1f 4f       	sbci	r17, 0xFF	; 255
    268a:	fc 01       	movw	r30, r24
    268c:	c4 91       	lpm	r28, Z
		if (!c) break;
    268e:	cc 23       	and	r28, r28
    2690:	71 f0       	breq	.+28     	; 0x26ae <print_P+0x30>
		if (c == '\n') usb_tx_char('\r');
    2692:	ca 30       	cpi	r28, 0x0A	; 10
    2694:	19 f4       	brne	.+6      	; 0x269c <print_P+0x1e>
    2696:	8d e0       	ldi	r24, 0x0D	; 13
    2698:	0e 94 23 11 	call	0x2246	; 0x2246 <m_usb_tx_char>
		usb_tx_char(c);
    269c:	8c 2f       	mov	r24, r28
    269e:	0e 94 23 11 	call	0x2246	; 0x2246 <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    26a2:	f8 01       	movw	r30, r16
    26a4:	c4 91       	lpm	r28, Z
    26a6:	0f 5f       	subi	r16, 0xFF	; 255
    26a8:	1f 4f       	sbci	r17, 0xFF	; 255
		if (!c) break;
    26aa:	c1 11       	cpse	r28, r1
    26ac:	f2 cf       	rjmp	.-28     	; 0x2692 <print_P+0x14>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
    26ae:	cf 91       	pop	r28
    26b0:	1f 91       	pop	r17
    26b2:	0f 91       	pop	r16
    26b4:	08 95       	ret

000026b6 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    26b6:	ef 92       	push	r14
    26b8:	ff 92       	push	r15
    26ba:	0f 93       	push	r16
    26bc:	1f 93       	push	r17
    26be:	cf 93       	push	r28
    26c0:	df 93       	push	r29
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    26c6:	27 97       	sbiw	r28, 0x07	; 7
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    26d2:	8e 01       	movw	r16, r28
    26d4:	0f 5f       	subi	r16, 0xFF	; 255
    26d6:	1f 4f       	sbci	r17, 0xFF	; 255
    26d8:	27 e0       	ldi	r18, 0x07	; 7
    26da:	f8 01       	movw	r30, r16
    26dc:	11 92       	st	Z+, r1
    26de:	2a 95       	dec	r18
    26e0:	e9 f7       	brne	.-6      	; 0x26dc <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    26e2:	4a e0       	ldi	r20, 0x0A	; 10
    26e4:	b8 01       	movw	r22, r16
    26e6:	0e 94 76 1a 	call	0x34ec	; 0x34ec <__itoa_ncheck>
    26ea:	7e 01       	movw	r14, r28
    26ec:	f8 e0       	ldi	r31, 0x08	; 8
    26ee:	ef 0e       	add	r14, r31
    26f0:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    26f2:	f8 01       	movw	r30, r16
    26f4:	81 91       	ld	r24, Z+
    26f6:	8f 01       	movw	r16, r30
    26f8:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    26fa:	0e 94 23 11 	call	0x2246	; 0x2246 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    26fe:	0e 15       	cp	r16, r14
    2700:	1f 05       	cpc	r17, r15
    2702:	b9 f7       	brne	.-18     	; 0x26f2 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    2704:	27 96       	adiw	r28, 0x07	; 7
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	cd bf       	out	0x3d, r28	; 61
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	1f 91       	pop	r17
    2716:	0f 91       	pop	r16
    2718:	ff 90       	pop	r15
    271a:	ef 90       	pop	r14
    271c:	08 95       	ret

0000271e <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    2722:	ec eb       	ldi	r30, 0xBC	; 188
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	88 23       	and	r24, r24
    272a:	34 f0       	brlt	.+12     	; 0x2738 <twi_wait+0x1a>
    272c:	2f 5f       	subi	r18, 0xFF	; 255
    272e:	3f 4f       	sbci	r19, 0xFF	; 255
    2730:	29 3e       	cpi	r18, 0xE9	; 233
    2732:	83 e0       	ldi	r24, 0x03	; 3
    2734:	38 07       	cpc	r19, r24
    2736:	b9 f7       	brne	.-18     	; 0x2726 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	28 3e       	cpi	r18, 0xE8	; 232
    273c:	33 40       	sbci	r19, 0x03	; 3
    273e:	09 f4       	brne	.+2      	; 0x2742 <twi_wait+0x24>
    2740:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    2742:	08 95       	ret

00002744 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    2744:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    2748:	84 e8       	ldi	r24, 0x84	; 132
    274a:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    274e:	0e 94 8f 13 	call	0x271e	; 0x271e <twi_wait>
    2752:	88 23       	and	r24, r24
    2754:	19 f0       	breq	.+6      	; 0x275c <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    2756:	80 91 b9 00 	lds	r24, 0x00B9
    275a:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    275c:	08 95       	ret

0000275e <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    275e:	cf 93       	push	r28
    2760:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2762:	94 ea       	ldi	r25, 0xA4	; 164
    2764:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    2768:	0e 94 8f 13 	call	0x271e	; 0x271e <twi_wait>
    276c:	88 23       	and	r24, r24
    276e:	61 f0       	breq	.+24     	; 0x2788 <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    2770:	8c 2f       	mov	r24, r28
    2772:	88 0f       	add	r24, r24
    2774:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    2778:	80 32       	cpi	r24, 0x20	; 32
    277a:	29 f4       	brne	.+10     	; 0x2786 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    277c:	84 e9       	ldi	r24, 0x94	; 148
    277e:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	01 c0       	rjmp	.+2      	; 0x2788 <start_write+0x2a>
	}	
	return 1;	// success
    2786:	81 e0       	ldi	r24, 0x01	; 1
}	
    2788:	cf 91       	pop	r28
    278a:	08 95       	ret

0000278c <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    278c:	0e 94 3f 10 	call	0x207e	; 0x207e <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2790:	88 e5       	ldi	r24, 0x58	; 88
    2792:	0e 94 af 13 	call	0x275e	; 0x275e <start_write>
    2796:	88 23       	and	r24, r24
    2798:	09 f4       	brne	.+2      	; 0x279c <m_wii_open+0x10>
    279a:	cd c0       	rjmp	.+410    	; 0x2936 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    279c:	80 e3       	ldi	r24, 0x30	; 48
    279e:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
    27a2:	88 23       	and	r24, r24
    27a4:	09 f4       	brne	.+2      	; 0x27a8 <m_wii_open+0x1c>
    27a6:	c9 c0       	rjmp	.+402    	; 0x293a <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
    27ae:	88 23       	and	r24, r24
    27b0:	09 f4       	brne	.+2      	; 0x27b4 <m_wii_open+0x28>
    27b2:	c5 c0       	rjmp	.+394    	; 0x293e <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    27b4:	84 e9       	ldi	r24, 0x94	; 148
    27b6:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    27ba:	83 ec       	ldi	r24, 0xC3	; 195
    27bc:	99 e0       	ldi	r25, 0x09	; 9
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	f1 f7       	brne	.-4      	; 0x27be <m_wii_open+0x32>
    27c2:	00 c0       	rjmp	.+0      	; 0x27c4 <m_wii_open+0x38>
    27c4:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    27c6:	88 e5       	ldi	r24, 0x58	; 88
    27c8:	0e 94 af 13 	call	0x275e	; 0x275e <start_write>
    27cc:	88 23       	and	r24, r24
    27ce:	09 f4       	brne	.+2      	; 0x27d2 <m_wii_open+0x46>
    27d0:	b8 c0       	rjmp	.+368    	; 0x2942 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
    27d8:	88 23       	and	r24, r24
    27da:	09 f4       	brne	.+2      	; 0x27de <m_wii_open+0x52>
    27dc:	b4 c0       	rjmp	.+360    	; 0x2946 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
    27e4:	88 23       	and	r24, r24
    27e6:	09 f4       	brne	.+2      	; 0x27ea <m_wii_open+0x5e>
    27e8:	b0 c0       	rjmp	.+352    	; 0x294a <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
    27f0:	88 23       	and	r24, r24
    27f2:	09 f4       	brne	.+2      	; 0x27f6 <m_wii_open+0x6a>
    27f4:	ac c0       	rjmp	.+344    	; 0x294e <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
    27fc:	88 23       	and	r24, r24
    27fe:	09 f4       	brne	.+2      	; 0x2802 <m_wii_open+0x76>
    2800:	a8 c0       	rjmp	.+336    	; 0x2952 <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
    2808:	88 23       	and	r24, r24
    280a:	09 f4       	brne	.+2      	; 0x280e <m_wii_open+0x82>
    280c:	a4 c0       	rjmp	.+328    	; 0x2956 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
    2814:	88 23       	and	r24, r24
    2816:	09 f4       	brne	.+2      	; 0x281a <m_wii_open+0x8e>
    2818:	a0 c0       	rjmp	.+320    	; 0x295a <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
    2820:	88 23       	and	r24, r24
    2822:	09 f4       	brne	.+2      	; 0x2826 <m_wii_open+0x9a>
    2824:	9c c0       	rjmp	.+312    	; 0x295e <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    2826:	80 e9       	ldi	r24, 0x90	; 144
    2828:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
    282c:	88 23       	and	r24, r24
    282e:	09 f4       	brne	.+2      	; 0x2832 <m_wii_open+0xa6>
    2830:	98 c0       	rjmp	.+304    	; 0x2962 <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2832:	84 e9       	ldi	r24, 0x94	; 148
    2834:	80 93 bc 00 	sts	0x00BC, r24
    2838:	83 ec       	ldi	r24, 0xC3	; 195
    283a:	99 e0       	ldi	r25, 0x09	; 9
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	f1 f7       	brne	.-4      	; 0x283c <m_wii_open+0xb0>
    2840:	00 c0       	rjmp	.+0      	; 0x2842 <m_wii_open+0xb6>
    2842:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2844:	88 e5       	ldi	r24, 0x58	; 88
    2846:	0e 94 af 13 	call	0x275e	; 0x275e <start_write>
    284a:	88 23       	and	r24, r24
    284c:	09 f4       	brne	.+2      	; 0x2850 <m_wii_open+0xc4>
    284e:	8b c0       	rjmp	.+278    	; 0x2966 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    2850:	87 e0       	ldi	r24, 0x07	; 7
    2852:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
    2856:	88 23       	and	r24, r24
    2858:	09 f4       	brne	.+2      	; 0x285c <m_wii_open+0xd0>
    285a:	87 c0       	rjmp	.+270    	; 0x296a <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
    2862:	88 23       	and	r24, r24
    2864:	09 f4       	brne	.+2      	; 0x2868 <m_wii_open+0xdc>
    2866:	83 c0       	rjmp	.+262    	; 0x296e <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    2868:	81 e4       	ldi	r24, 0x41	; 65
    286a:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
    286e:	88 23       	and	r24, r24
    2870:	09 f4       	brne	.+2      	; 0x2874 <m_wii_open+0xe8>
    2872:	7f c0       	rjmp	.+254    	; 0x2972 <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2874:	84 e9       	ldi	r24, 0x94	; 148
    2876:	80 93 bc 00 	sts	0x00BC, r24
    287a:	83 ec       	ldi	r24, 0xC3	; 195
    287c:	99 e0       	ldi	r25, 0x09	; 9
    287e:	01 97       	sbiw	r24, 0x01	; 1
    2880:	f1 f7       	brne	.-4      	; 0x287e <m_wii_open+0xf2>
    2882:	00 c0       	rjmp	.+0      	; 0x2884 <m_wii_open+0xf8>
    2884:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2886:	88 e5       	ldi	r24, 0x58	; 88
    2888:	0e 94 af 13 	call	0x275e	; 0x275e <start_write>
    288c:	88 23       	and	r24, r24
    288e:	09 f4       	brne	.+2      	; 0x2892 <m_wii_open+0x106>
    2890:	72 c0       	rjmp	.+228    	; 0x2976 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    2892:	8a e1       	ldi	r24, 0x1A	; 26
    2894:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
    2898:	88 23       	and	r24, r24
    289a:	09 f4       	brne	.+2      	; 0x289e <m_wii_open+0x112>
    289c:	6e c0       	rjmp	.+220    	; 0x297a <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    289e:	80 e4       	ldi	r24, 0x40	; 64
    28a0:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
    28a4:	88 23       	and	r24, r24
    28a6:	09 f4       	brne	.+2      	; 0x28aa <m_wii_open+0x11e>
    28a8:	6a c0       	rjmp	.+212    	; 0x297e <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
    28b0:	88 23       	and	r24, r24
    28b2:	09 f4       	brne	.+2      	; 0x28b6 <m_wii_open+0x12a>
    28b4:	66 c0       	rjmp	.+204    	; 0x2982 <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    28b6:	84 e9       	ldi	r24, 0x94	; 148
    28b8:	80 93 bc 00 	sts	0x00BC, r24
    28bc:	83 ec       	ldi	r24, 0xC3	; 195
    28be:	99 e0       	ldi	r25, 0x09	; 9
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	f1 f7       	brne	.-4      	; 0x28c0 <m_wii_open+0x134>
    28c4:	00 c0       	rjmp	.+0      	; 0x28c6 <m_wii_open+0x13a>
    28c6:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    28c8:	88 e5       	ldi	r24, 0x58	; 88
    28ca:	0e 94 af 13 	call	0x275e	; 0x275e <start_write>
    28ce:	88 23       	and	r24, r24
    28d0:	09 f4       	brne	.+2      	; 0x28d4 <m_wii_open+0x148>
    28d2:	59 c0       	rjmp	.+178    	; 0x2986 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    28d4:	83 e3       	ldi	r24, 0x33	; 51
    28d6:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
    28da:	88 23       	and	r24, r24
    28dc:	09 f4       	brne	.+2      	; 0x28e0 <m_wii_open+0x154>
    28de:	55 c0       	rjmp	.+170    	; 0x298a <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    28e0:	83 e0       	ldi	r24, 0x03	; 3
    28e2:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
    28e6:	88 23       	and	r24, r24
    28e8:	09 f4       	brne	.+2      	; 0x28ec <m_wii_open+0x160>
    28ea:	51 c0       	rjmp	.+162    	; 0x298e <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    28ec:	84 e9       	ldi	r24, 0x94	; 148
    28ee:	80 93 bc 00 	sts	0x00BC, r24
    28f2:	83 ec       	ldi	r24, 0xC3	; 195
    28f4:	99 e0       	ldi	r25, 0x09	; 9
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	f1 f7       	brne	.-4      	; 0x28f6 <m_wii_open+0x16a>
    28fa:	00 c0       	rjmp	.+0      	; 0x28fc <m_wii_open+0x170>
    28fc:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    28fe:	88 e5       	ldi	r24, 0x58	; 88
    2900:	0e 94 af 13 	call	0x275e	; 0x275e <start_write>
    2904:	88 23       	and	r24, r24
    2906:	09 f4       	brne	.+2      	; 0x290a <m_wii_open+0x17e>
    2908:	44 c0       	rjmp	.+136    	; 0x2992 <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    290a:	80 e3       	ldi	r24, 0x30	; 48
    290c:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
    2910:	88 23       	and	r24, r24
    2912:	09 f4       	brne	.+2      	; 0x2916 <m_wii_open+0x18a>
    2914:	40 c0       	rjmp	.+128    	; 0x2996 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    2916:	88 e0       	ldi	r24, 0x08	; 8
    2918:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
    291c:	88 23       	and	r24, r24
    291e:	e9 f1       	breq	.+122    	; 0x299a <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2920:	84 e9       	ldi	r24, 0x94	; 148
    2922:	80 93 bc 00 	sts	0x00BC, r24
    2926:	83 ec       	ldi	r24, 0xC3	; 195
    2928:	99 e0       	ldi	r25, 0x09	; 9
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	f1 f7       	brne	.-4      	; 0x292a <m_wii_open+0x19e>
    292e:	00 c0       	rjmp	.+0      	; 0x2930 <m_wii_open+0x1a4>
    2930:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    299a:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    299c:	08 95       	ret

0000299e <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    299e:	cf 93       	push	r28
    29a0:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    29a2:	84 ea       	ldi	r24, 0xA4	; 164
    29a4:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
    29a8:	0e 94 8f 13 	call	0x271e	; 0x271e <twi_wait>
    29ac:	88 23       	and	r24, r24
    29ae:	69 f0       	breq	.+26     	; 0x29ca <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    29b0:	8c 2f       	mov	r24, r28
    29b2:	88 0f       	add	r24, r24
    29b4:	8f 5f       	subi	r24, 0xFF	; 255
    29b6:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    29ba:	88 34       	cpi	r24, 0x48	; 72
    29bc:	29 f4       	brne	.+10     	; 0x29c8 <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    29be:	84 e9       	ldi	r24, 0x94	; 148
    29c0:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	01 c0       	rjmp	.+2      	; 0x29ca <start_read+0x2c>
	}	
	return 1;	// success
    29c8:	81 e0       	ldi	r24, 0x01	; 1
}	
    29ca:	cf 91       	pop	r28
    29cc:	08 95       	ret

000029ce <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    29ce:	0f 93       	push	r16
    29d0:	1f 93       	push	r17
    29d2:	cf 93       	push	r28
    29d4:	df 93       	push	r29
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
    29da:	60 97       	sbiw	r28, 0x10	; 16
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	f8 94       	cli
    29e0:	de bf       	out	0x3e, r29	; 62
    29e2:	0f be       	out	0x3f, r0	; 63
    29e4:	cd bf       	out	0x3d, r28	; 61
    29e6:	8c 01       	movw	r16, r24
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    29e8:	fe 01       	movw	r30, r28
    29ea:	31 96       	adiw	r30, 0x01	; 1
    29ec:	80 e1       	ldi	r24, 0x10	; 16
    29ee:	df 01       	movw	r26, r30
    29f0:	1d 92       	st	X+, r1
    29f2:	8a 95       	dec	r24
    29f4:	e9 f7       	brne	.-6      	; 0x29f0 <m_wii_read+0x22>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    29f6:	88 e5       	ldi	r24, 0x58	; 88
    29f8:	0e 94 af 13 	call	0x275e	; 0x275e <start_write>
    29fc:	88 23       	and	r24, r24
    29fe:	09 f4       	brne	.+2      	; 0x2a02 <m_wii_read+0x34>
    2a00:	69 c0       	rjmp	.+210    	; 0x2ad4 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    2a02:	86 e3       	ldi	r24, 0x36	; 54
    2a04:	0e 94 a2 13 	call	0x2744	; 0x2744 <send_byte>
    2a08:	88 23       	and	r24, r24
    2a0a:	09 f4       	brne	.+2      	; 0x2a0e <m_wii_read+0x40>
    2a0c:	65 c0       	rjmp	.+202    	; 0x2ad8 <m_wii_read+0x10a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2a0e:	84 e9       	ldi	r24, 0x94	; 148
    2a10:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a14:	b8 e0       	ldi	r27, 0x08	; 8
    2a16:	ba 95       	dec	r27
    2a18:	f1 f7       	brne	.-4      	; 0x2a16 <m_wii_read+0x48>
    2a1a:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2a1c:	88 e5       	ldi	r24, 0x58	; 88
    2a1e:	0e 94 cf 14 	call	0x299e	; 0x299e <start_read>
    2a22:	88 23       	and	r24, r24
    2a24:	09 f4       	brne	.+2      	; 0x2a28 <m_wii_read+0x5a>
    2a26:	5a c0       	rjmp	.+180    	; 0x2adc <m_wii_read+0x10e>
    2a28:	be 01       	movw	r22, r28
    2a2a:	6f 5f       	subi	r22, 0xFF	; 255
    2a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2e:	ae 01       	movw	r20, r28
    2a30:	40 5f       	subi	r20, 0xF0	; 240
    2a32:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2a34:	ec eb       	ldi	r30, 0xBC	; 188
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    2a3a:	2b eb       	ldi	r18, 0xBB	; 187
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2a3e:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2a40:	90 81       	ld	r25, Z
    2a42:	99 23       	and	r25, r25
    2a44:	ec f7       	brge	.-6      	; 0x2a40 <m_wii_read+0x72>
		temp[i] = TWDR;
    2a46:	d9 01       	movw	r26, r18
    2a48:	9c 91       	ld	r25, X
    2a4a:	db 01       	movw	r26, r22
    2a4c:	9d 93       	st	X+, r25
    2a4e:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    2a50:	a4 17       	cp	r26, r20
    2a52:	b5 07       	cpc	r27, r21
    2a54:	a1 f7       	brne	.-24     	; 0x2a3e <m_wii_read+0x70>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    2a56:	84 e8       	ldi	r24, 0x84	; 132
    2a58:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2a5c:	ec eb       	ldi	r30, 0xBC	; 188
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	80 81       	ld	r24, Z
    2a62:	88 23       	and	r24, r24
    2a64:	ec f7       	brge	.-6      	; 0x2a60 <m_wii_read+0x92>
	temp[15] = TWDR;
    2a66:	80 91 bb 00 	lds	r24, 0x00BB
    2a6a:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2a6c:	84 e9       	ldi	r24, 0x94	; 148
    2a6e:	80 93 bc 00 	sts	0x00BC, r24
    2a72:	be 01       	movw	r22, r28
    2a74:	6c 5f       	subi	r22, 0xFC	; 252
    2a76:	7f 4f       	sbci	r23, 0xFF	; 255
    2a78:	f8 01       	movw	r30, r16
    2a7a:	08 5e       	subi	r16, 0xE8	; 232
    2a7c:	1f 4f       	sbci	r17, 0xFF	; 255
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2a7e:	db 01       	movw	r26, r22
    2a80:	2c 91       	ld	r18, X
    2a82:	32 2f       	mov	r19, r18
    2a84:	30 73       	andi	r19, 0x30	; 48
    2a86:	cb 01       	movw	r24, r22
    2a88:	02 97       	sbiw	r24, 0x02	; 2
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	8c 91       	ld	r24, X
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	b0 e1       	ldi	r27, 0x10	; 16
    2a92:	3b 9f       	mul	r19, r27
    2a94:	80 0d       	add	r24, r0
    2a96:	91 1d       	adc	r25, r1
    2a98:	11 24       	eor	r1, r1
    2a9a:	91 83       	std	Z+1, r25	; 0x01
    2a9c:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2a9e:	42 2f       	mov	r20, r18
    2aa0:	40 7c       	andi	r20, 0xC0	; 192
    2aa2:	50 e0       	ldi	r21, 0x00	; 0
    2aa4:	44 0f       	add	r20, r20
    2aa6:	55 1f       	adc	r21, r21
    2aa8:	44 0f       	add	r20, r20
    2aaa:	55 1f       	adc	r21, r21
    2aac:	cb 01       	movw	r24, r22
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	8c 91       	ld	r24, X
    2ab4:	48 0f       	add	r20, r24
    2ab6:	51 1d       	adc	r21, r1
    2ab8:	53 83       	std	Z+3, r21	; 0x03
    2aba:	42 83       	std	Z+2, r20	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    2abc:	2f 70       	andi	r18, 0x0F	; 15
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	35 83       	std	Z+5, r19	; 0x05
    2ac2:	24 83       	std	Z+4, r18	; 0x04
    2ac4:	6d 5f       	subi	r22, 0xFD	; 253
    2ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac8:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    2aca:	e0 17       	cp	r30, r16
    2acc:	f1 07       	cpc	r31, r17
    2ace:	b9 f6       	brne	.-82     	; 0x2a7e <m_wii_read+0xb0>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	05 c0       	rjmp	.+10     	; 0x2ade <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	03 c0       	rjmp	.+6      	; 0x2ade <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	01 c0       	rjmp	.+2      	; 0x2ade <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2adc:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    2ade:	60 96       	adiw	r28, 0x10	; 16
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	f8 94       	cli
    2ae4:	de bf       	out	0x3e, r29	; 62
    2ae6:	0f be       	out	0x3f, r0	; 63
    2ae8:	cd bf       	out	0x3d, r28	; 61
    2aea:	df 91       	pop	r29
    2aec:	cf 91       	pop	r28
    2aee:	1f 91       	pop	r17
    2af0:	0f 91       	pop	r16
    2af2:	08 95       	ret

00002af4 <acos>:
    2af4:	9f 93       	push	r25
    2af6:	9f 77       	andi	r25, 0x7F	; 127
    2af8:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__fp_arccos>
    2afc:	0f 90       	pop	r0
    2afe:	00 20       	and	r0, r0
    2b00:	42 f4       	brpl	.+16     	; 0x2b12 <acos+0x1e>
    2b02:	90 58       	subi	r25, 0x80	; 128
    2b04:	a2 ea       	ldi	r26, 0xA2	; 162
    2b06:	2a ed       	ldi	r18, 0xDA	; 218
    2b08:	3f e0       	ldi	r19, 0x0F	; 15
    2b0a:	49 e4       	ldi	r20, 0x49	; 73
    2b0c:	50 e4       	ldi	r21, 0x40	; 64
    2b0e:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__addsf3x>
    2b12:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__fp_round>

00002b16 <__subsf3>:
    2b16:	50 58       	subi	r21, 0x80	; 128

00002b18 <__addsf3>:
    2b18:	bb 27       	eor	r27, r27
    2b1a:	aa 27       	eor	r26, r26
    2b1c:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__addsf3x>
    2b20:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__fp_round>
    2b24:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__fp_pscA>
    2b28:	38 f0       	brcs	.+14     	; 0x2b38 <__addsf3+0x20>
    2b2a:	0e 94 91 17 	call	0x2f22	; 0x2f22 <__fp_pscB>
    2b2e:	20 f0       	brcs	.+8      	; 0x2b38 <__addsf3+0x20>
    2b30:	39 f4       	brne	.+14     	; 0x2b40 <__addsf3+0x28>
    2b32:	9f 3f       	cpi	r25, 0xFF	; 255
    2b34:	19 f4       	brne	.+6      	; 0x2b3c <__addsf3+0x24>
    2b36:	26 f4       	brtc	.+8      	; 0x2b40 <__addsf3+0x28>
    2b38:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__fp_nan>
    2b3c:	0e f4       	brtc	.+2      	; 0x2b40 <__addsf3+0x28>
    2b3e:	e0 95       	com	r30
    2b40:	e7 fb       	bst	r30, 7
    2b42:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__fp_inf>

00002b46 <__addsf3x>:
    2b46:	e9 2f       	mov	r30, r25
    2b48:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <__fp_split3>
    2b4c:	58 f3       	brcs	.-42     	; 0x2b24 <__addsf3+0xc>
    2b4e:	ba 17       	cp	r27, r26
    2b50:	62 07       	cpc	r22, r18
    2b52:	73 07       	cpc	r23, r19
    2b54:	84 07       	cpc	r24, r20
    2b56:	95 07       	cpc	r25, r21
    2b58:	20 f0       	brcs	.+8      	; 0x2b62 <__addsf3x+0x1c>
    2b5a:	79 f4       	brne	.+30     	; 0x2b7a <__addsf3x+0x34>
    2b5c:	a6 f5       	brtc	.+104    	; 0x2bc6 <__addsf3x+0x80>
    2b5e:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__fp_zero>
    2b62:	0e f4       	brtc	.+2      	; 0x2b66 <__addsf3x+0x20>
    2b64:	e0 95       	com	r30
    2b66:	0b 2e       	mov	r0, r27
    2b68:	ba 2f       	mov	r27, r26
    2b6a:	a0 2d       	mov	r26, r0
    2b6c:	0b 01       	movw	r0, r22
    2b6e:	b9 01       	movw	r22, r18
    2b70:	90 01       	movw	r18, r0
    2b72:	0c 01       	movw	r0, r24
    2b74:	ca 01       	movw	r24, r20
    2b76:	a0 01       	movw	r20, r0
    2b78:	11 24       	eor	r1, r1
    2b7a:	ff 27       	eor	r31, r31
    2b7c:	59 1b       	sub	r21, r25
    2b7e:	99 f0       	breq	.+38     	; 0x2ba6 <__addsf3x+0x60>
    2b80:	59 3f       	cpi	r21, 0xF9	; 249
    2b82:	50 f4       	brcc	.+20     	; 0x2b98 <__addsf3x+0x52>
    2b84:	50 3e       	cpi	r21, 0xE0	; 224
    2b86:	68 f1       	brcs	.+90     	; 0x2be2 <__addsf3x+0x9c>
    2b88:	1a 16       	cp	r1, r26
    2b8a:	f0 40       	sbci	r31, 0x00	; 0
    2b8c:	a2 2f       	mov	r26, r18
    2b8e:	23 2f       	mov	r18, r19
    2b90:	34 2f       	mov	r19, r20
    2b92:	44 27       	eor	r20, r20
    2b94:	58 5f       	subi	r21, 0xF8	; 248
    2b96:	f3 cf       	rjmp	.-26     	; 0x2b7e <__addsf3x+0x38>
    2b98:	46 95       	lsr	r20
    2b9a:	37 95       	ror	r19
    2b9c:	27 95       	ror	r18
    2b9e:	a7 95       	ror	r26
    2ba0:	f0 40       	sbci	r31, 0x00	; 0
    2ba2:	53 95       	inc	r21
    2ba4:	c9 f7       	brne	.-14     	; 0x2b98 <__addsf3x+0x52>
    2ba6:	7e f4       	brtc	.+30     	; 0x2bc6 <__addsf3x+0x80>
    2ba8:	1f 16       	cp	r1, r31
    2baa:	ba 0b       	sbc	r27, r26
    2bac:	62 0b       	sbc	r22, r18
    2bae:	73 0b       	sbc	r23, r19
    2bb0:	84 0b       	sbc	r24, r20
    2bb2:	ba f0       	brmi	.+46     	; 0x2be2 <__addsf3x+0x9c>
    2bb4:	91 50       	subi	r25, 0x01	; 1
    2bb6:	a1 f0       	breq	.+40     	; 0x2be0 <__addsf3x+0x9a>
    2bb8:	ff 0f       	add	r31, r31
    2bba:	bb 1f       	adc	r27, r27
    2bbc:	66 1f       	adc	r22, r22
    2bbe:	77 1f       	adc	r23, r23
    2bc0:	88 1f       	adc	r24, r24
    2bc2:	c2 f7       	brpl	.-16     	; 0x2bb4 <__addsf3x+0x6e>
    2bc4:	0e c0       	rjmp	.+28     	; 0x2be2 <__addsf3x+0x9c>
    2bc6:	ba 0f       	add	r27, r26
    2bc8:	62 1f       	adc	r22, r18
    2bca:	73 1f       	adc	r23, r19
    2bcc:	84 1f       	adc	r24, r20
    2bce:	48 f4       	brcc	.+18     	; 0x2be2 <__addsf3x+0x9c>
    2bd0:	87 95       	ror	r24
    2bd2:	77 95       	ror	r23
    2bd4:	67 95       	ror	r22
    2bd6:	b7 95       	ror	r27
    2bd8:	f7 95       	ror	r31
    2bda:	9e 3f       	cpi	r25, 0xFE	; 254
    2bdc:	08 f0       	brcs	.+2      	; 0x2be0 <__addsf3x+0x9a>
    2bde:	b0 cf       	rjmp	.-160    	; 0x2b40 <__addsf3+0x28>
    2be0:	93 95       	inc	r25
    2be2:	88 0f       	add	r24, r24
    2be4:	08 f0       	brcs	.+2      	; 0x2be8 <__addsf3x+0xa2>
    2be6:	99 27       	eor	r25, r25
    2be8:	ee 0f       	add	r30, r30
    2bea:	97 95       	ror	r25
    2bec:	87 95       	ror	r24
    2bee:	08 95       	ret

00002bf0 <atan>:
    2bf0:	df 93       	push	r29
    2bf2:	dd 27       	eor	r29, r29
    2bf4:	b9 2f       	mov	r27, r25
    2bf6:	bf 77       	andi	r27, 0x7F	; 127
    2bf8:	40 e8       	ldi	r20, 0x80	; 128
    2bfa:	5f e3       	ldi	r21, 0x3F	; 63
    2bfc:	16 16       	cp	r1, r22
    2bfe:	17 06       	cpc	r1, r23
    2c00:	48 07       	cpc	r20, r24
    2c02:	5b 07       	cpc	r21, r27
    2c04:	18 f4       	brcc	.+6      	; 0x2c0c <atan+0x1c>
    2c06:	d9 2f       	mov	r29, r25
    2c08:	0e 94 16 18 	call	0x302c	; 0x302c <inverse>
    2c0c:	9f 93       	push	r25
    2c0e:	8f 93       	push	r24
    2c10:	7f 93       	push	r23
    2c12:	6f 93       	push	r22
    2c14:	0e 94 29 19 	call	0x3252	; 0x3252 <square>
    2c18:	ec ea       	ldi	r30, 0xAC	; 172
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <__fp_powser>
    2c20:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__fp_round>
    2c24:	2f 91       	pop	r18
    2c26:	3f 91       	pop	r19
    2c28:	4f 91       	pop	r20
    2c2a:	5f 91       	pop	r21
    2c2c:	0e 94 31 18 	call	0x3062	; 0x3062 <__mulsf3x>
    2c30:	dd 23       	and	r29, r29
    2c32:	51 f0       	breq	.+20     	; 0x2c48 <atan+0x58>
    2c34:	90 58       	subi	r25, 0x80	; 128
    2c36:	a2 ea       	ldi	r26, 0xA2	; 162
    2c38:	2a ed       	ldi	r18, 0xDA	; 218
    2c3a:	3f e0       	ldi	r19, 0x0F	; 15
    2c3c:	49 ec       	ldi	r20, 0xC9	; 201
    2c3e:	5f e3       	ldi	r21, 0x3F	; 63
    2c40:	d0 78       	andi	r29, 0x80	; 128
    2c42:	5d 27       	eor	r21, r29
    2c44:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__addsf3x>
    2c48:	df 91       	pop	r29
    2c4a:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__fp_round>

00002c4e <__cmpsf2>:
    2c4e:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <__fp_cmp>
    2c52:	08 f4       	brcc	.+2      	; 0x2c56 <__cmpsf2+0x8>
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	08 95       	ret

00002c58 <cos>:
    2c58:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <__fp_rempio2>
    2c5c:	e3 95       	inc	r30
    2c5e:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <__fp_sinus>

00002c62 <__divsf3>:
    2c62:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__divsf3x>
    2c66:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__fp_round>
    2c6a:	0e 94 91 17 	call	0x2f22	; 0x2f22 <__fp_pscB>
    2c6e:	58 f0       	brcs	.+22     	; 0x2c86 <__divsf3+0x24>
    2c70:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__fp_pscA>
    2c74:	40 f0       	brcs	.+16     	; 0x2c86 <__divsf3+0x24>
    2c76:	29 f4       	brne	.+10     	; 0x2c82 <__divsf3+0x20>
    2c78:	5f 3f       	cpi	r21, 0xFF	; 255
    2c7a:	29 f0       	breq	.+10     	; 0x2c86 <__divsf3+0x24>
    2c7c:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__fp_inf>
    2c80:	51 11       	cpse	r21, r1
    2c82:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__fp_szero>
    2c86:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__fp_nan>

00002c8a <__divsf3x>:
    2c8a:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <__fp_split3>
    2c8e:	68 f3       	brcs	.-38     	; 0x2c6a <__divsf3+0x8>

00002c90 <__divsf3_pse>:
    2c90:	99 23       	and	r25, r25
    2c92:	b1 f3       	breq	.-20     	; 0x2c80 <__divsf3+0x1e>
    2c94:	55 23       	and	r21, r21
    2c96:	91 f3       	breq	.-28     	; 0x2c7c <__divsf3+0x1a>
    2c98:	95 1b       	sub	r25, r21
    2c9a:	55 0b       	sbc	r21, r21
    2c9c:	bb 27       	eor	r27, r27
    2c9e:	aa 27       	eor	r26, r26
    2ca0:	62 17       	cp	r22, r18
    2ca2:	73 07       	cpc	r23, r19
    2ca4:	84 07       	cpc	r24, r20
    2ca6:	38 f0       	brcs	.+14     	; 0x2cb6 <__divsf3_pse+0x26>
    2ca8:	9f 5f       	subi	r25, 0xFF	; 255
    2caa:	5f 4f       	sbci	r21, 0xFF	; 255
    2cac:	22 0f       	add	r18, r18
    2cae:	33 1f       	adc	r19, r19
    2cb0:	44 1f       	adc	r20, r20
    2cb2:	aa 1f       	adc	r26, r26
    2cb4:	a9 f3       	breq	.-22     	; 0x2ca0 <__divsf3_pse+0x10>
    2cb6:	35 d0       	rcall	.+106    	; 0x2d22 <__divsf3_pse+0x92>
    2cb8:	0e 2e       	mov	r0, r30
    2cba:	3a f0       	brmi	.+14     	; 0x2cca <__divsf3_pse+0x3a>
    2cbc:	e0 e8       	ldi	r30, 0x80	; 128
    2cbe:	32 d0       	rcall	.+100    	; 0x2d24 <__divsf3_pse+0x94>
    2cc0:	91 50       	subi	r25, 0x01	; 1
    2cc2:	50 40       	sbci	r21, 0x00	; 0
    2cc4:	e6 95       	lsr	r30
    2cc6:	00 1c       	adc	r0, r0
    2cc8:	ca f7       	brpl	.-14     	; 0x2cbc <__divsf3_pse+0x2c>
    2cca:	2b d0       	rcall	.+86     	; 0x2d22 <__divsf3_pse+0x92>
    2ccc:	fe 2f       	mov	r31, r30
    2cce:	29 d0       	rcall	.+82     	; 0x2d22 <__divsf3_pse+0x92>
    2cd0:	66 0f       	add	r22, r22
    2cd2:	77 1f       	adc	r23, r23
    2cd4:	88 1f       	adc	r24, r24
    2cd6:	bb 1f       	adc	r27, r27
    2cd8:	26 17       	cp	r18, r22
    2cda:	37 07       	cpc	r19, r23
    2cdc:	48 07       	cpc	r20, r24
    2cde:	ab 07       	cpc	r26, r27
    2ce0:	b0 e8       	ldi	r27, 0x80	; 128
    2ce2:	09 f0       	breq	.+2      	; 0x2ce6 <__divsf3_pse+0x56>
    2ce4:	bb 0b       	sbc	r27, r27
    2ce6:	80 2d       	mov	r24, r0
    2ce8:	bf 01       	movw	r22, r30
    2cea:	ff 27       	eor	r31, r31
    2cec:	93 58       	subi	r25, 0x83	; 131
    2cee:	5f 4f       	sbci	r21, 0xFF	; 255
    2cf0:	3a f0       	brmi	.+14     	; 0x2d00 <__divsf3_pse+0x70>
    2cf2:	9e 3f       	cpi	r25, 0xFE	; 254
    2cf4:	51 05       	cpc	r21, r1
    2cf6:	78 f0       	brcs	.+30     	; 0x2d16 <__divsf3_pse+0x86>
    2cf8:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__fp_inf>
    2cfc:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__fp_szero>
    2d00:	5f 3f       	cpi	r21, 0xFF	; 255
    2d02:	e4 f3       	brlt	.-8      	; 0x2cfc <__divsf3_pse+0x6c>
    2d04:	98 3e       	cpi	r25, 0xE8	; 232
    2d06:	d4 f3       	brlt	.-12     	; 0x2cfc <__divsf3_pse+0x6c>
    2d08:	86 95       	lsr	r24
    2d0a:	77 95       	ror	r23
    2d0c:	67 95       	ror	r22
    2d0e:	b7 95       	ror	r27
    2d10:	f7 95       	ror	r31
    2d12:	9f 5f       	subi	r25, 0xFF	; 255
    2d14:	c9 f7       	brne	.-14     	; 0x2d08 <__divsf3_pse+0x78>
    2d16:	88 0f       	add	r24, r24
    2d18:	91 1d       	adc	r25, r1
    2d1a:	96 95       	lsr	r25
    2d1c:	87 95       	ror	r24
    2d1e:	97 f9       	bld	r25, 7
    2d20:	08 95       	ret
    2d22:	e1 e0       	ldi	r30, 0x01	; 1
    2d24:	66 0f       	add	r22, r22
    2d26:	77 1f       	adc	r23, r23
    2d28:	88 1f       	adc	r24, r24
    2d2a:	bb 1f       	adc	r27, r27
    2d2c:	62 17       	cp	r22, r18
    2d2e:	73 07       	cpc	r23, r19
    2d30:	84 07       	cpc	r24, r20
    2d32:	ba 07       	cpc	r27, r26
    2d34:	20 f0       	brcs	.+8      	; 0x2d3e <__divsf3_pse+0xae>
    2d36:	62 1b       	sub	r22, r18
    2d38:	73 0b       	sbc	r23, r19
    2d3a:	84 0b       	sbc	r24, r20
    2d3c:	ba 0b       	sbc	r27, r26
    2d3e:	ee 1f       	adc	r30, r30
    2d40:	88 f7       	brcc	.-30     	; 0x2d24 <__divsf3_pse+0x94>
    2d42:	e0 95       	com	r30
    2d44:	08 95       	ret

00002d46 <__fixsfsi>:
    2d46:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <__fixunssfsi>
    2d4a:	68 94       	set
    2d4c:	b1 11       	cpse	r27, r1
    2d4e:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__fp_szero>
    2d52:	08 95       	ret

00002d54 <__fixunssfsi>:
    2d54:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <__fp_splitA>
    2d58:	88 f0       	brcs	.+34     	; 0x2d7c <__fixunssfsi+0x28>
    2d5a:	9f 57       	subi	r25, 0x7F	; 127
    2d5c:	98 f0       	brcs	.+38     	; 0x2d84 <__fixunssfsi+0x30>
    2d5e:	b9 2f       	mov	r27, r25
    2d60:	99 27       	eor	r25, r25
    2d62:	b7 51       	subi	r27, 0x17	; 23
    2d64:	b0 f0       	brcs	.+44     	; 0x2d92 <__fixunssfsi+0x3e>
    2d66:	e1 f0       	breq	.+56     	; 0x2da0 <__fixunssfsi+0x4c>
    2d68:	66 0f       	add	r22, r22
    2d6a:	77 1f       	adc	r23, r23
    2d6c:	88 1f       	adc	r24, r24
    2d6e:	99 1f       	adc	r25, r25
    2d70:	1a f0       	brmi	.+6      	; 0x2d78 <__fixunssfsi+0x24>
    2d72:	ba 95       	dec	r27
    2d74:	c9 f7       	brne	.-14     	; 0x2d68 <__fixunssfsi+0x14>
    2d76:	14 c0       	rjmp	.+40     	; 0x2da0 <__fixunssfsi+0x4c>
    2d78:	b1 30       	cpi	r27, 0x01	; 1
    2d7a:	91 f0       	breq	.+36     	; 0x2da0 <__fixunssfsi+0x4c>
    2d7c:	0e 94 0a 18 	call	0x3014	; 0x3014 <__fp_zero>
    2d80:	b1 e0       	ldi	r27, 0x01	; 1
    2d82:	08 95       	ret
    2d84:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__fp_zero>
    2d88:	67 2f       	mov	r22, r23
    2d8a:	78 2f       	mov	r23, r24
    2d8c:	88 27       	eor	r24, r24
    2d8e:	b8 5f       	subi	r27, 0xF8	; 248
    2d90:	39 f0       	breq	.+14     	; 0x2da0 <__fixunssfsi+0x4c>
    2d92:	b9 3f       	cpi	r27, 0xF9	; 249
    2d94:	cc f3       	brlt	.-14     	; 0x2d88 <__fixunssfsi+0x34>
    2d96:	86 95       	lsr	r24
    2d98:	77 95       	ror	r23
    2d9a:	67 95       	ror	r22
    2d9c:	b3 95       	inc	r27
    2d9e:	d9 f7       	brne	.-10     	; 0x2d96 <__fixunssfsi+0x42>
    2da0:	3e f4       	brtc	.+14     	; 0x2db0 <__fixunssfsi+0x5c>
    2da2:	90 95       	com	r25
    2da4:	80 95       	com	r24
    2da6:	70 95       	com	r23
    2da8:	61 95       	neg	r22
    2daa:	7f 4f       	sbci	r23, 0xFF	; 255
    2dac:	8f 4f       	sbci	r24, 0xFF	; 255
    2dae:	9f 4f       	sbci	r25, 0xFF	; 255
    2db0:	08 95       	ret

00002db2 <__floatunsisf>:
    2db2:	e8 94       	clt
    2db4:	09 c0       	rjmp	.+18     	; 0x2dc8 <__floatsisf+0x12>

00002db6 <__floatsisf>:
    2db6:	97 fb       	bst	r25, 7
    2db8:	3e f4       	brtc	.+14     	; 0x2dc8 <__floatsisf+0x12>
    2dba:	90 95       	com	r25
    2dbc:	80 95       	com	r24
    2dbe:	70 95       	com	r23
    2dc0:	61 95       	neg	r22
    2dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc4:	8f 4f       	sbci	r24, 0xFF	; 255
    2dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc8:	99 23       	and	r25, r25
    2dca:	a9 f0       	breq	.+42     	; 0x2df6 <__floatsisf+0x40>
    2dcc:	f9 2f       	mov	r31, r25
    2dce:	96 e9       	ldi	r25, 0x96	; 150
    2dd0:	bb 27       	eor	r27, r27
    2dd2:	93 95       	inc	r25
    2dd4:	f6 95       	lsr	r31
    2dd6:	87 95       	ror	r24
    2dd8:	77 95       	ror	r23
    2dda:	67 95       	ror	r22
    2ddc:	b7 95       	ror	r27
    2dde:	f1 11       	cpse	r31, r1
    2de0:	f8 cf       	rjmp	.-16     	; 0x2dd2 <__floatsisf+0x1c>
    2de2:	fa f4       	brpl	.+62     	; 0x2e22 <__floatsisf+0x6c>
    2de4:	bb 0f       	add	r27, r27
    2de6:	11 f4       	brne	.+4      	; 0x2dec <__floatsisf+0x36>
    2de8:	60 ff       	sbrs	r22, 0
    2dea:	1b c0       	rjmp	.+54     	; 0x2e22 <__floatsisf+0x6c>
    2dec:	6f 5f       	subi	r22, 0xFF	; 255
    2dee:	7f 4f       	sbci	r23, 0xFF	; 255
    2df0:	8f 4f       	sbci	r24, 0xFF	; 255
    2df2:	9f 4f       	sbci	r25, 0xFF	; 255
    2df4:	16 c0       	rjmp	.+44     	; 0x2e22 <__floatsisf+0x6c>
    2df6:	88 23       	and	r24, r24
    2df8:	11 f0       	breq	.+4      	; 0x2dfe <__floatsisf+0x48>
    2dfa:	96 e9       	ldi	r25, 0x96	; 150
    2dfc:	11 c0       	rjmp	.+34     	; 0x2e20 <__floatsisf+0x6a>
    2dfe:	77 23       	and	r23, r23
    2e00:	21 f0       	breq	.+8      	; 0x2e0a <__floatsisf+0x54>
    2e02:	9e e8       	ldi	r25, 0x8E	; 142
    2e04:	87 2f       	mov	r24, r23
    2e06:	76 2f       	mov	r23, r22
    2e08:	05 c0       	rjmp	.+10     	; 0x2e14 <__floatsisf+0x5e>
    2e0a:	66 23       	and	r22, r22
    2e0c:	71 f0       	breq	.+28     	; 0x2e2a <__floatsisf+0x74>
    2e0e:	96 e8       	ldi	r25, 0x86	; 134
    2e10:	86 2f       	mov	r24, r22
    2e12:	70 e0       	ldi	r23, 0x00	; 0
    2e14:	60 e0       	ldi	r22, 0x00	; 0
    2e16:	2a f0       	brmi	.+10     	; 0x2e22 <__floatsisf+0x6c>
    2e18:	9a 95       	dec	r25
    2e1a:	66 0f       	add	r22, r22
    2e1c:	77 1f       	adc	r23, r23
    2e1e:	88 1f       	adc	r24, r24
    2e20:	da f7       	brpl	.-10     	; 0x2e18 <__floatsisf+0x62>
    2e22:	88 0f       	add	r24, r24
    2e24:	96 95       	lsr	r25
    2e26:	87 95       	ror	r24
    2e28:	97 f9       	bld	r25, 7
    2e2a:	08 95       	ret

00002e2c <__fp_arccos>:
    2e2c:	df 93       	push	r29
    2e2e:	cf 93       	push	r28
    2e30:	1f 93       	push	r17
    2e32:	0f 93       	push	r16
    2e34:	8b 01       	movw	r16, r22
    2e36:	ec 01       	movw	r28, r24
    2e38:	e9 ed       	ldi	r30, 0xD9	; 217
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <__fp_powser>
    2e40:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__fp_round>
    2e44:	98 01       	movw	r18, r16
    2e46:	ae 01       	movw	r20, r28
    2e48:	8b 01       	movw	r16, r22
    2e4a:	ec 01       	movw	r28, r24
    2e4c:	60 e0       	ldi	r22, 0x00	; 0
    2e4e:	70 e0       	ldi	r23, 0x00	; 0
    2e50:	80 e8       	ldi	r24, 0x80	; 128
    2e52:	9f e3       	ldi	r25, 0x3F	; 63
    2e54:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__subsf3>
    2e58:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sqrt>
    2e5c:	98 01       	movw	r18, r16
    2e5e:	ae 01       	movw	r20, r28
    2e60:	0f 91       	pop	r16
    2e62:	1f 91       	pop	r17
    2e64:	cf 91       	pop	r28
    2e66:	df 91       	pop	r29
    2e68:	0c 94 31 18 	jmp	0x3062	; 0x3062 <__mulsf3x>

00002e6c <__fp_cmp>:
    2e6c:	99 0f       	add	r25, r25
    2e6e:	00 08       	sbc	r0, r0
    2e70:	55 0f       	add	r21, r21
    2e72:	aa 0b       	sbc	r26, r26
    2e74:	e0 e8       	ldi	r30, 0x80	; 128
    2e76:	fe ef       	ldi	r31, 0xFE	; 254
    2e78:	16 16       	cp	r1, r22
    2e7a:	17 06       	cpc	r1, r23
    2e7c:	e8 07       	cpc	r30, r24
    2e7e:	f9 07       	cpc	r31, r25
    2e80:	c0 f0       	brcs	.+48     	; 0x2eb2 <__fp_cmp+0x46>
    2e82:	12 16       	cp	r1, r18
    2e84:	13 06       	cpc	r1, r19
    2e86:	e4 07       	cpc	r30, r20
    2e88:	f5 07       	cpc	r31, r21
    2e8a:	98 f0       	brcs	.+38     	; 0x2eb2 <__fp_cmp+0x46>
    2e8c:	62 1b       	sub	r22, r18
    2e8e:	73 0b       	sbc	r23, r19
    2e90:	84 0b       	sbc	r24, r20
    2e92:	95 0b       	sbc	r25, r21
    2e94:	39 f4       	brne	.+14     	; 0x2ea4 <__fp_cmp+0x38>
    2e96:	0a 26       	eor	r0, r26
    2e98:	61 f0       	breq	.+24     	; 0x2eb2 <__fp_cmp+0x46>
    2e9a:	23 2b       	or	r18, r19
    2e9c:	24 2b       	or	r18, r20
    2e9e:	25 2b       	or	r18, r21
    2ea0:	21 f4       	brne	.+8      	; 0x2eaa <__fp_cmp+0x3e>
    2ea2:	08 95       	ret
    2ea4:	0a 26       	eor	r0, r26
    2ea6:	09 f4       	brne	.+2      	; 0x2eaa <__fp_cmp+0x3e>
    2ea8:	a1 40       	sbci	r26, 0x01	; 1
    2eaa:	a6 95       	lsr	r26
    2eac:	8f ef       	ldi	r24, 0xFF	; 255
    2eae:	81 1d       	adc	r24, r1
    2eb0:	81 1d       	adc	r24, r1
    2eb2:	08 95       	ret

00002eb4 <__fp_inf>:
    2eb4:	97 f9       	bld	r25, 7
    2eb6:	9f 67       	ori	r25, 0x7F	; 127
    2eb8:	80 e8       	ldi	r24, 0x80	; 128
    2eba:	70 e0       	ldi	r23, 0x00	; 0
    2ebc:	60 e0       	ldi	r22, 0x00	; 0
    2ebe:	08 95       	ret

00002ec0 <__fp_nan>:
    2ec0:	9f ef       	ldi	r25, 0xFF	; 255
    2ec2:	80 ec       	ldi	r24, 0xC0	; 192
    2ec4:	08 95       	ret

00002ec6 <__fp_powser>:
    2ec6:	df 93       	push	r29
    2ec8:	cf 93       	push	r28
    2eca:	1f 93       	push	r17
    2ecc:	0f 93       	push	r16
    2ece:	ff 92       	push	r15
    2ed0:	ef 92       	push	r14
    2ed2:	df 92       	push	r13
    2ed4:	7b 01       	movw	r14, r22
    2ed6:	8c 01       	movw	r16, r24
    2ed8:	68 94       	set
    2eda:	06 c0       	rjmp	.+12     	; 0x2ee8 <__fp_powser+0x22>
    2edc:	da 2e       	mov	r13, r26
    2ede:	ef 01       	movw	r28, r30
    2ee0:	0e 94 31 18 	call	0x3062	; 0x3062 <__mulsf3x>
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	e8 94       	clt
    2ee8:	a5 91       	lpm	r26, Z+
    2eea:	25 91       	lpm	r18, Z+
    2eec:	35 91       	lpm	r19, Z+
    2eee:	45 91       	lpm	r20, Z+
    2ef0:	55 91       	lpm	r21, Z+
    2ef2:	a6 f3       	brts	.-24     	; 0x2edc <__fp_powser+0x16>
    2ef4:	ef 01       	movw	r28, r30
    2ef6:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__addsf3x>
    2efa:	fe 01       	movw	r30, r28
    2efc:	97 01       	movw	r18, r14
    2efe:	a8 01       	movw	r20, r16
    2f00:	da 94       	dec	r13
    2f02:	69 f7       	brne	.-38     	; 0x2ede <__fp_powser+0x18>
    2f04:	df 90       	pop	r13
    2f06:	ef 90       	pop	r14
    2f08:	ff 90       	pop	r15
    2f0a:	0f 91       	pop	r16
    2f0c:	1f 91       	pop	r17
    2f0e:	cf 91       	pop	r28
    2f10:	df 91       	pop	r29
    2f12:	08 95       	ret

00002f14 <__fp_pscA>:
    2f14:	00 24       	eor	r0, r0
    2f16:	0a 94       	dec	r0
    2f18:	16 16       	cp	r1, r22
    2f1a:	17 06       	cpc	r1, r23
    2f1c:	18 06       	cpc	r1, r24
    2f1e:	09 06       	cpc	r0, r25
    2f20:	08 95       	ret

00002f22 <__fp_pscB>:
    2f22:	00 24       	eor	r0, r0
    2f24:	0a 94       	dec	r0
    2f26:	12 16       	cp	r1, r18
    2f28:	13 06       	cpc	r1, r19
    2f2a:	14 06       	cpc	r1, r20
    2f2c:	05 06       	cpc	r0, r21
    2f2e:	08 95       	ret
    2f30:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__fp_nan>

00002f34 <__fp_rempio2>:
    2f34:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <__fp_splitA>
    2f38:	d8 f3       	brcs	.-10     	; 0x2f30 <__fp_pscB+0xe>
    2f3a:	e8 94       	clt
    2f3c:	e0 e0       	ldi	r30, 0x00	; 0
    2f3e:	bb 27       	eor	r27, r27
    2f40:	9f 57       	subi	r25, 0x7F	; 127
    2f42:	f0 f0       	brcs	.+60     	; 0x2f80 <__fp_rempio2+0x4c>
    2f44:	2a ed       	ldi	r18, 0xDA	; 218
    2f46:	3f e0       	ldi	r19, 0x0F	; 15
    2f48:	49 ec       	ldi	r20, 0xC9	; 201
    2f4a:	06 c0       	rjmp	.+12     	; 0x2f58 <__fp_rempio2+0x24>
    2f4c:	ee 0f       	add	r30, r30
    2f4e:	bb 0f       	add	r27, r27
    2f50:	66 1f       	adc	r22, r22
    2f52:	77 1f       	adc	r23, r23
    2f54:	88 1f       	adc	r24, r24
    2f56:	28 f0       	brcs	.+10     	; 0x2f62 <__fp_rempio2+0x2e>
    2f58:	b2 3a       	cpi	r27, 0xA2	; 162
    2f5a:	62 07       	cpc	r22, r18
    2f5c:	73 07       	cpc	r23, r19
    2f5e:	84 07       	cpc	r24, r20
    2f60:	28 f0       	brcs	.+10     	; 0x2f6c <__fp_rempio2+0x38>
    2f62:	b2 5a       	subi	r27, 0xA2	; 162
    2f64:	62 0b       	sbc	r22, r18
    2f66:	73 0b       	sbc	r23, r19
    2f68:	84 0b       	sbc	r24, r20
    2f6a:	e3 95       	inc	r30
    2f6c:	9a 95       	dec	r25
    2f6e:	72 f7       	brpl	.-36     	; 0x2f4c <__fp_rempio2+0x18>
    2f70:	80 38       	cpi	r24, 0x80	; 128
    2f72:	30 f4       	brcc	.+12     	; 0x2f80 <__fp_rempio2+0x4c>
    2f74:	9a 95       	dec	r25
    2f76:	bb 0f       	add	r27, r27
    2f78:	66 1f       	adc	r22, r22
    2f7a:	77 1f       	adc	r23, r23
    2f7c:	88 1f       	adc	r24, r24
    2f7e:	d2 f7       	brpl	.-12     	; 0x2f74 <__fp_rempio2+0x40>
    2f80:	90 48       	sbci	r25, 0x80	; 128
    2f82:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__fp_mpack_finite>

00002f86 <__fp_round>:
    2f86:	09 2e       	mov	r0, r25
    2f88:	03 94       	inc	r0
    2f8a:	00 0c       	add	r0, r0
    2f8c:	11 f4       	brne	.+4      	; 0x2f92 <__fp_round+0xc>
    2f8e:	88 23       	and	r24, r24
    2f90:	52 f0       	brmi	.+20     	; 0x2fa6 <__fp_round+0x20>
    2f92:	bb 0f       	add	r27, r27
    2f94:	40 f4       	brcc	.+16     	; 0x2fa6 <__fp_round+0x20>
    2f96:	bf 2b       	or	r27, r31
    2f98:	11 f4       	brne	.+4      	; 0x2f9e <__fp_round+0x18>
    2f9a:	60 ff       	sbrs	r22, 0
    2f9c:	04 c0       	rjmp	.+8      	; 0x2fa6 <__fp_round+0x20>
    2f9e:	6f 5f       	subi	r22, 0xFF	; 255
    2fa0:	7f 4f       	sbci	r23, 0xFF	; 255
    2fa2:	8f 4f       	sbci	r24, 0xFF	; 255
    2fa4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa6:	08 95       	ret

00002fa8 <__fp_sinus>:
    2fa8:	ef 93       	push	r30
    2faa:	e0 ff       	sbrs	r30, 0
    2fac:	07 c0       	rjmp	.+14     	; 0x2fbc <__fp_sinus+0x14>
    2fae:	a2 ea       	ldi	r26, 0xA2	; 162
    2fb0:	2a ed       	ldi	r18, 0xDA	; 218
    2fb2:	3f e0       	ldi	r19, 0x0F	; 15
    2fb4:	49 ec       	ldi	r20, 0xC9	; 201
    2fb6:	5f eb       	ldi	r21, 0xBF	; 191
    2fb8:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__addsf3x>
    2fbc:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__fp_round>
    2fc0:	0f 90       	pop	r0
    2fc2:	03 94       	inc	r0
    2fc4:	01 fc       	sbrc	r0, 1
    2fc6:	90 58       	subi	r25, 0x80	; 128
    2fc8:	e1 e0       	ldi	r30, 0x01	; 1
    2fca:	f1 e0       	ldi	r31, 0x01	; 1
    2fcc:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <__fp_powsodd>

00002fd0 <__fp_split3>:
    2fd0:	57 fd       	sbrc	r21, 7
    2fd2:	90 58       	subi	r25, 0x80	; 128
    2fd4:	44 0f       	add	r20, r20
    2fd6:	55 1f       	adc	r21, r21
    2fd8:	59 f0       	breq	.+22     	; 0x2ff0 <__fp_splitA+0x10>
    2fda:	5f 3f       	cpi	r21, 0xFF	; 255
    2fdc:	71 f0       	breq	.+28     	; 0x2ffa <__fp_splitA+0x1a>
    2fde:	47 95       	ror	r20

00002fe0 <__fp_splitA>:
    2fe0:	88 0f       	add	r24, r24
    2fe2:	97 fb       	bst	r25, 7
    2fe4:	99 1f       	adc	r25, r25
    2fe6:	61 f0       	breq	.+24     	; 0x3000 <__fp_splitA+0x20>
    2fe8:	9f 3f       	cpi	r25, 0xFF	; 255
    2fea:	79 f0       	breq	.+30     	; 0x300a <__fp_splitA+0x2a>
    2fec:	87 95       	ror	r24
    2fee:	08 95       	ret
    2ff0:	12 16       	cp	r1, r18
    2ff2:	13 06       	cpc	r1, r19
    2ff4:	14 06       	cpc	r1, r20
    2ff6:	55 1f       	adc	r21, r21
    2ff8:	f2 cf       	rjmp	.-28     	; 0x2fde <__fp_split3+0xe>
    2ffa:	46 95       	lsr	r20
    2ffc:	f1 df       	rcall	.-30     	; 0x2fe0 <__fp_splitA>
    2ffe:	08 c0       	rjmp	.+16     	; 0x3010 <__fp_splitA+0x30>
    3000:	16 16       	cp	r1, r22
    3002:	17 06       	cpc	r1, r23
    3004:	18 06       	cpc	r1, r24
    3006:	99 1f       	adc	r25, r25
    3008:	f1 cf       	rjmp	.-30     	; 0x2fec <__fp_splitA+0xc>
    300a:	86 95       	lsr	r24
    300c:	71 05       	cpc	r23, r1
    300e:	61 05       	cpc	r22, r1
    3010:	08 94       	sec
    3012:	08 95       	ret

00003014 <__fp_zero>:
    3014:	e8 94       	clt

00003016 <__fp_szero>:
    3016:	bb 27       	eor	r27, r27
    3018:	66 27       	eor	r22, r22
    301a:	77 27       	eor	r23, r23
    301c:	cb 01       	movw	r24, r22
    301e:	97 f9       	bld	r25, 7
    3020:	08 95       	ret

00003022 <__gesf2>:
    3022:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <__fp_cmp>
    3026:	08 f4       	brcc	.+2      	; 0x302a <__gesf2+0x8>
    3028:	8f ef       	ldi	r24, 0xFF	; 255
    302a:	08 95       	ret

0000302c <inverse>:
    302c:	9b 01       	movw	r18, r22
    302e:	ac 01       	movw	r20, r24
    3030:	60 e0       	ldi	r22, 0x00	; 0
    3032:	70 e0       	ldi	r23, 0x00	; 0
    3034:	80 e8       	ldi	r24, 0x80	; 128
    3036:	9f e3       	ldi	r25, 0x3F	; 63
    3038:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <__divsf3>

0000303c <__mulsf3>:
    303c:	0e 94 31 18 	call	0x3062	; 0x3062 <__mulsf3x>
    3040:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__fp_round>
    3044:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__fp_pscA>
    3048:	38 f0       	brcs	.+14     	; 0x3058 <__mulsf3+0x1c>
    304a:	0e 94 91 17 	call	0x2f22	; 0x2f22 <__fp_pscB>
    304e:	20 f0       	brcs	.+8      	; 0x3058 <__mulsf3+0x1c>
    3050:	95 23       	and	r25, r21
    3052:	11 f0       	breq	.+4      	; 0x3058 <__mulsf3+0x1c>
    3054:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__fp_inf>
    3058:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__fp_nan>
    305c:	11 24       	eor	r1, r1
    305e:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__fp_szero>

00003062 <__mulsf3x>:
    3062:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <__fp_split3>
    3066:	70 f3       	brcs	.-36     	; 0x3044 <__mulsf3+0x8>

00003068 <__mulsf3_pse>:
    3068:	95 9f       	mul	r25, r21
    306a:	c1 f3       	breq	.-16     	; 0x305c <__mulsf3+0x20>
    306c:	95 0f       	add	r25, r21
    306e:	50 e0       	ldi	r21, 0x00	; 0
    3070:	55 1f       	adc	r21, r21
    3072:	62 9f       	mul	r22, r18
    3074:	f0 01       	movw	r30, r0
    3076:	72 9f       	mul	r23, r18
    3078:	bb 27       	eor	r27, r27
    307a:	f0 0d       	add	r31, r0
    307c:	b1 1d       	adc	r27, r1
    307e:	63 9f       	mul	r22, r19
    3080:	aa 27       	eor	r26, r26
    3082:	f0 0d       	add	r31, r0
    3084:	b1 1d       	adc	r27, r1
    3086:	aa 1f       	adc	r26, r26
    3088:	64 9f       	mul	r22, r20
    308a:	66 27       	eor	r22, r22
    308c:	b0 0d       	add	r27, r0
    308e:	a1 1d       	adc	r26, r1
    3090:	66 1f       	adc	r22, r22
    3092:	82 9f       	mul	r24, r18
    3094:	22 27       	eor	r18, r18
    3096:	b0 0d       	add	r27, r0
    3098:	a1 1d       	adc	r26, r1
    309a:	62 1f       	adc	r22, r18
    309c:	73 9f       	mul	r23, r19
    309e:	b0 0d       	add	r27, r0
    30a0:	a1 1d       	adc	r26, r1
    30a2:	62 1f       	adc	r22, r18
    30a4:	83 9f       	mul	r24, r19
    30a6:	a0 0d       	add	r26, r0
    30a8:	61 1d       	adc	r22, r1
    30aa:	22 1f       	adc	r18, r18
    30ac:	74 9f       	mul	r23, r20
    30ae:	33 27       	eor	r19, r19
    30b0:	a0 0d       	add	r26, r0
    30b2:	61 1d       	adc	r22, r1
    30b4:	23 1f       	adc	r18, r19
    30b6:	84 9f       	mul	r24, r20
    30b8:	60 0d       	add	r22, r0
    30ba:	21 1d       	adc	r18, r1
    30bc:	82 2f       	mov	r24, r18
    30be:	76 2f       	mov	r23, r22
    30c0:	6a 2f       	mov	r22, r26
    30c2:	11 24       	eor	r1, r1
    30c4:	9f 57       	subi	r25, 0x7F	; 127
    30c6:	50 40       	sbci	r21, 0x00	; 0
    30c8:	9a f0       	brmi	.+38     	; 0x30f0 <__mulsf3_pse+0x88>
    30ca:	f1 f0       	breq	.+60     	; 0x3108 <__mulsf3_pse+0xa0>
    30cc:	88 23       	and	r24, r24
    30ce:	4a f0       	brmi	.+18     	; 0x30e2 <__mulsf3_pse+0x7a>
    30d0:	ee 0f       	add	r30, r30
    30d2:	ff 1f       	adc	r31, r31
    30d4:	bb 1f       	adc	r27, r27
    30d6:	66 1f       	adc	r22, r22
    30d8:	77 1f       	adc	r23, r23
    30da:	88 1f       	adc	r24, r24
    30dc:	91 50       	subi	r25, 0x01	; 1
    30de:	50 40       	sbci	r21, 0x00	; 0
    30e0:	a9 f7       	brne	.-22     	; 0x30cc <__mulsf3_pse+0x64>
    30e2:	9e 3f       	cpi	r25, 0xFE	; 254
    30e4:	51 05       	cpc	r21, r1
    30e6:	80 f0       	brcs	.+32     	; 0x3108 <__mulsf3_pse+0xa0>
    30e8:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__fp_inf>
    30ec:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__fp_szero>
    30f0:	5f 3f       	cpi	r21, 0xFF	; 255
    30f2:	e4 f3       	brlt	.-8      	; 0x30ec <__mulsf3_pse+0x84>
    30f4:	98 3e       	cpi	r25, 0xE8	; 232
    30f6:	d4 f3       	brlt	.-12     	; 0x30ec <__mulsf3_pse+0x84>
    30f8:	86 95       	lsr	r24
    30fa:	77 95       	ror	r23
    30fc:	67 95       	ror	r22
    30fe:	b7 95       	ror	r27
    3100:	f7 95       	ror	r31
    3102:	e7 95       	ror	r30
    3104:	9f 5f       	subi	r25, 0xFF	; 255
    3106:	c1 f7       	brne	.-16     	; 0x30f8 <__mulsf3_pse+0x90>
    3108:	fe 2b       	or	r31, r30
    310a:	88 0f       	add	r24, r24
    310c:	91 1d       	adc	r25, r1
    310e:	96 95       	lsr	r25
    3110:	87 95       	ror	r24
    3112:	97 f9       	bld	r25, 7
    3114:	08 95       	ret

00003116 <pow>:
    3116:	fa 01       	movw	r30, r20
    3118:	ee 0f       	add	r30, r30
    311a:	ff 1f       	adc	r31, r31
    311c:	30 96       	adiw	r30, 0x00	; 0
    311e:	21 05       	cpc	r18, r1
    3120:	31 05       	cpc	r19, r1
    3122:	a1 f1       	breq	.+104    	; 0x318c <pow+0x76>
    3124:	61 15       	cp	r22, r1
    3126:	71 05       	cpc	r23, r1
    3128:	61 f4       	brne	.+24     	; 0x3142 <pow+0x2c>
    312a:	80 38       	cpi	r24, 0x80	; 128
    312c:	bf e3       	ldi	r27, 0x3F	; 63
    312e:	9b 07       	cpc	r25, r27
    3130:	49 f1       	breq	.+82     	; 0x3184 <pow+0x6e>
    3132:	68 94       	set
    3134:	90 38       	cpi	r25, 0x80	; 128
    3136:	81 05       	cpc	r24, r1
    3138:	61 f0       	breq	.+24     	; 0x3152 <pow+0x3c>
    313a:	80 38       	cpi	r24, 0x80	; 128
    313c:	bf ef       	ldi	r27, 0xFF	; 255
    313e:	9b 07       	cpc	r25, r27
    3140:	41 f0       	breq	.+16     	; 0x3152 <pow+0x3c>
    3142:	99 23       	and	r25, r25
    3144:	4a f5       	brpl	.+82     	; 0x3198 <pow+0x82>
    3146:	ff 3f       	cpi	r31, 0xFF	; 255
    3148:	e1 05       	cpc	r30, r1
    314a:	31 05       	cpc	r19, r1
    314c:	21 05       	cpc	r18, r1
    314e:	19 f1       	breq	.+70     	; 0x3196 <pow+0x80>
    3150:	e8 94       	clt
    3152:	08 94       	sec
    3154:	e7 95       	ror	r30
    3156:	d9 01       	movw	r26, r18
    3158:	aa 23       	and	r26, r26
    315a:	29 f4       	brne	.+10     	; 0x3166 <pow+0x50>
    315c:	ab 2f       	mov	r26, r27
    315e:	be 2f       	mov	r27, r30
    3160:	f8 5f       	subi	r31, 0xF8	; 248
    3162:	d0 f3       	brcs	.-12     	; 0x3158 <pow+0x42>
    3164:	10 c0       	rjmp	.+32     	; 0x3186 <pow+0x70>
    3166:	ff 5f       	subi	r31, 0xFF	; 255
    3168:	70 f4       	brcc	.+28     	; 0x3186 <pow+0x70>
    316a:	a6 95       	lsr	r26
    316c:	e0 f7       	brcc	.-8      	; 0x3166 <pow+0x50>
    316e:	f7 39       	cpi	r31, 0x97	; 151
    3170:	50 f0       	brcs	.+20     	; 0x3186 <pow+0x70>
    3172:	19 f0       	breq	.+6      	; 0x317a <pow+0x64>
    3174:	ff 3a       	cpi	r31, 0xAF	; 175
    3176:	38 f4       	brcc	.+14     	; 0x3186 <pow+0x70>
    3178:	9f 77       	andi	r25, 0x7F	; 127
    317a:	9f 93       	push	r25
    317c:	0d d0       	rcall	.+26     	; 0x3198 <pow+0x82>
    317e:	0f 90       	pop	r0
    3180:	07 fc       	sbrc	r0, 7
    3182:	90 58       	subi	r25, 0x80	; 128
    3184:	08 95       	ret
    3186:	46 f0       	brts	.+16     	; 0x3198 <pow+0x82>
    3188:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__fp_nan>
    318c:	60 e0       	ldi	r22, 0x00	; 0
    318e:	70 e0       	ldi	r23, 0x00	; 0
    3190:	80 e8       	ldi	r24, 0x80	; 128
    3192:	9f e3       	ldi	r25, 0x3F	; 63
    3194:	08 95       	ret
    3196:	4f e7       	ldi	r20, 0x7F	; 127
    3198:	9f 77       	andi	r25, 0x7F	; 127
    319a:	5f 93       	push	r21
    319c:	4f 93       	push	r20
    319e:	3f 93       	push	r19
    31a0:	2f 93       	push	r18
    31a2:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <log>
    31a6:	2f 91       	pop	r18
    31a8:	3f 91       	pop	r19
    31aa:	4f 91       	pop	r20
    31ac:	5f 91       	pop	r21
    31ae:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    31b2:	0c 94 35 19 	jmp	0x326a	; 0x326a <exp>

000031b6 <sin>:
    31b6:	9f 93       	push	r25
    31b8:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <__fp_rempio2>
    31bc:	0f 90       	pop	r0
    31be:	07 fc       	sbrc	r0, 7
    31c0:	ee 5f       	subi	r30, 0xFE	; 254
    31c2:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <__fp_sinus>
    31c6:	19 f4       	brne	.+6      	; 0x31ce <sin+0x18>
    31c8:	16 f4       	brtc	.+4      	; 0x31ce <sin+0x18>
    31ca:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__fp_nan>
    31ce:	0c 94 67 19 	jmp	0x32ce	; 0x32ce <__fp_mpack>

000031d2 <sqrt>:
    31d2:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <__fp_splitA>
    31d6:	b8 f3       	brcs	.-18     	; 0x31c6 <sin+0x10>
    31d8:	99 23       	and	r25, r25
    31da:	c9 f3       	breq	.-14     	; 0x31ce <sin+0x18>
    31dc:	b6 f3       	brts	.-20     	; 0x31ca <sin+0x14>
    31de:	9f 57       	subi	r25, 0x7F	; 127
    31e0:	55 0b       	sbc	r21, r21
    31e2:	87 ff       	sbrs	r24, 7
    31e4:	0e 94 75 19 	call	0x32ea	; 0x32ea <__fp_norm2>
    31e8:	00 24       	eor	r0, r0
    31ea:	a0 e6       	ldi	r26, 0x60	; 96
    31ec:	40 ea       	ldi	r20, 0xA0	; 160
    31ee:	90 01       	movw	r18, r0
    31f0:	80 58       	subi	r24, 0x80	; 128
    31f2:	56 95       	lsr	r21
    31f4:	97 95       	ror	r25
    31f6:	28 f4       	brcc	.+10     	; 0x3202 <sqrt+0x30>
    31f8:	80 5c       	subi	r24, 0xC0	; 192
    31fa:	66 0f       	add	r22, r22
    31fc:	77 1f       	adc	r23, r23
    31fe:	88 1f       	adc	r24, r24
    3200:	20 f0       	brcs	.+8      	; 0x320a <sqrt+0x38>
    3202:	26 17       	cp	r18, r22
    3204:	37 07       	cpc	r19, r23
    3206:	48 07       	cpc	r20, r24
    3208:	30 f4       	brcc	.+12     	; 0x3216 <sqrt+0x44>
    320a:	62 1b       	sub	r22, r18
    320c:	73 0b       	sbc	r23, r19
    320e:	84 0b       	sbc	r24, r20
    3210:	20 29       	or	r18, r0
    3212:	31 29       	or	r19, r1
    3214:	4a 2b       	or	r20, r26
    3216:	a6 95       	lsr	r26
    3218:	17 94       	ror	r1
    321a:	07 94       	ror	r0
    321c:	20 25       	eor	r18, r0
    321e:	31 25       	eor	r19, r1
    3220:	4a 27       	eor	r20, r26
    3222:	58 f7       	brcc	.-42     	; 0x31fa <sqrt+0x28>
    3224:	66 0f       	add	r22, r22
    3226:	77 1f       	adc	r23, r23
    3228:	88 1f       	adc	r24, r24
    322a:	20 f0       	brcs	.+8      	; 0x3234 <sqrt+0x62>
    322c:	26 17       	cp	r18, r22
    322e:	37 07       	cpc	r19, r23
    3230:	48 07       	cpc	r20, r24
    3232:	30 f4       	brcc	.+12     	; 0x3240 <sqrt+0x6e>
    3234:	62 0b       	sbc	r22, r18
    3236:	73 0b       	sbc	r23, r19
    3238:	84 0b       	sbc	r24, r20
    323a:	20 0d       	add	r18, r0
    323c:	31 1d       	adc	r19, r1
    323e:	41 1d       	adc	r20, r1
    3240:	a0 95       	com	r26
    3242:	81 f7       	brne	.-32     	; 0x3224 <sqrt+0x52>
    3244:	b9 01       	movw	r22, r18
    3246:	84 2f       	mov	r24, r20
    3248:	91 58       	subi	r25, 0x81	; 129
    324a:	88 0f       	add	r24, r24
    324c:	96 95       	lsr	r25
    324e:	87 95       	ror	r24
    3250:	08 95       	ret

00003252 <square>:
    3252:	9b 01       	movw	r18, r22
    3254:	ac 01       	movw	r20, r24
    3256:	0c 94 1e 18 	jmp	0x303c	; 0x303c <__mulsf3>
    325a:	29 f4       	brne	.+10     	; 0x3266 <square+0x14>
    325c:	16 f0       	brts	.+4      	; 0x3262 <square+0x10>
    325e:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__fp_inf>
    3262:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__fp_zero>
    3266:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__fp_nan>

0000326a <exp>:
    326a:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <__fp_splitA>
    326e:	a8 f3       	brcs	.-22     	; 0x325a <square+0x8>
    3270:	96 38       	cpi	r25, 0x86	; 134
    3272:	a0 f7       	brcc	.-24     	; 0x325c <square+0xa>
    3274:	07 f8       	bld	r0, 7
    3276:	0f 92       	push	r0
    3278:	e8 94       	clt
    327a:	2b e3       	ldi	r18, 0x3B	; 59
    327c:	3a ea       	ldi	r19, 0xAA	; 170
    327e:	48 eb       	ldi	r20, 0xB8	; 184
    3280:	5f e7       	ldi	r21, 0x7F	; 127
    3282:	0e 94 34 18 	call	0x3068	; 0x3068 <__mulsf3_pse>
    3286:	0f 92       	push	r0
    3288:	0f 92       	push	r0
    328a:	0f 92       	push	r0
    328c:	4d b7       	in	r20, 0x3d	; 61
    328e:	5e b7       	in	r21, 0x3e	; 62
    3290:	0f 92       	push	r0
    3292:	0e 94 1a 1a 	call	0x3434	; 0x3434 <modf>
    3296:	ef e1       	ldi	r30, 0x1F	; 31
    3298:	f1 e0       	ldi	r31, 0x01	; 1
    329a:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <__fp_powser>
    329e:	4f 91       	pop	r20
    32a0:	5f 91       	pop	r21
    32a2:	ef 91       	pop	r30
    32a4:	ff 91       	pop	r31
    32a6:	e5 95       	asr	r30
    32a8:	ee 1f       	adc	r30, r30
    32aa:	ff 1f       	adc	r31, r31
    32ac:	49 f0       	breq	.+18     	; 0x32c0 <exp+0x56>
    32ae:	fe 57       	subi	r31, 0x7E	; 126
    32b0:	e0 68       	ori	r30, 0x80	; 128
    32b2:	44 27       	eor	r20, r20
    32b4:	ee 0f       	add	r30, r30
    32b6:	44 1f       	adc	r20, r20
    32b8:	fa 95       	dec	r31
    32ba:	e1 f7       	brne	.-8      	; 0x32b4 <exp+0x4a>
    32bc:	41 95       	neg	r20
    32be:	55 0b       	sbc	r21, r21
    32c0:	0e 94 94 19 	call	0x3328	; 0x3328 <ldexp>
    32c4:	0f 90       	pop	r0
    32c6:	07 fe       	sbrs	r0, 7
    32c8:	0c 94 16 18 	jmp	0x302c	; 0x302c <inverse>
    32cc:	08 95       	ret

000032ce <__fp_mpack>:
    32ce:	9f 3f       	cpi	r25, 0xFF	; 255
    32d0:	31 f0       	breq	.+12     	; 0x32de <__fp_mpack_finite+0xc>

000032d2 <__fp_mpack_finite>:
    32d2:	91 50       	subi	r25, 0x01	; 1
    32d4:	20 f4       	brcc	.+8      	; 0x32de <__fp_mpack_finite+0xc>
    32d6:	87 95       	ror	r24
    32d8:	77 95       	ror	r23
    32da:	67 95       	ror	r22
    32dc:	b7 95       	ror	r27
    32de:	88 0f       	add	r24, r24
    32e0:	91 1d       	adc	r25, r1
    32e2:	96 95       	lsr	r25
    32e4:	87 95       	ror	r24
    32e6:	97 f9       	bld	r25, 7
    32e8:	08 95       	ret

000032ea <__fp_norm2>:
    32ea:	91 50       	subi	r25, 0x01	; 1
    32ec:	50 40       	sbci	r21, 0x00	; 0
    32ee:	66 0f       	add	r22, r22
    32f0:	77 1f       	adc	r23, r23
    32f2:	88 1f       	adc	r24, r24
    32f4:	d2 f7       	brpl	.-12     	; 0x32ea <__fp_norm2>
    32f6:	08 95       	ret

000032f8 <__fp_powsodd>:
    32f8:	9f 93       	push	r25
    32fa:	8f 93       	push	r24
    32fc:	7f 93       	push	r23
    32fe:	6f 93       	push	r22
    3300:	ff 93       	push	r31
    3302:	ef 93       	push	r30
    3304:	9b 01       	movw	r18, r22
    3306:	ac 01       	movw	r20, r24
    3308:	0e 94 1e 18 	call	0x303c	; 0x303c <__mulsf3>
    330c:	ef 91       	pop	r30
    330e:	ff 91       	pop	r31
    3310:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <__fp_powser>
    3314:	2f 91       	pop	r18
    3316:	3f 91       	pop	r19
    3318:	4f 91       	pop	r20
    331a:	5f 91       	pop	r21
    331c:	0c 94 1e 18 	jmp	0x303c	; 0x303c <__mulsf3>
    3320:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__fp_inf>
    3324:	0c 94 67 19 	jmp	0x32ce	; 0x32ce <__fp_mpack>

00003328 <ldexp>:
    3328:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <__fp_splitA>
    332c:	d8 f3       	brcs	.-10     	; 0x3324 <__fp_powsodd+0x2c>
    332e:	99 23       	and	r25, r25
    3330:	c9 f3       	breq	.-14     	; 0x3324 <__fp_powsodd+0x2c>
    3332:	94 0f       	add	r25, r20
    3334:	51 1d       	adc	r21, r1
    3336:	a3 f3       	brvs	.-24     	; 0x3320 <__fp_powsodd+0x28>
    3338:	91 50       	subi	r25, 0x01	; 1
    333a:	50 40       	sbci	r21, 0x00	; 0
    333c:	94 f0       	brlt	.+36     	; 0x3362 <ldexp+0x3a>
    333e:	59 f0       	breq	.+22     	; 0x3356 <ldexp+0x2e>
    3340:	88 23       	and	r24, r24
    3342:	32 f0       	brmi	.+12     	; 0x3350 <ldexp+0x28>
    3344:	66 0f       	add	r22, r22
    3346:	77 1f       	adc	r23, r23
    3348:	88 1f       	adc	r24, r24
    334a:	91 50       	subi	r25, 0x01	; 1
    334c:	50 40       	sbci	r21, 0x00	; 0
    334e:	c1 f7       	brne	.-16     	; 0x3340 <ldexp+0x18>
    3350:	9e 3f       	cpi	r25, 0xFE	; 254
    3352:	51 05       	cpc	r21, r1
    3354:	2c f7       	brge	.-54     	; 0x3320 <__fp_powsodd+0x28>
    3356:	88 0f       	add	r24, r24
    3358:	91 1d       	adc	r25, r1
    335a:	96 95       	lsr	r25
    335c:	87 95       	ror	r24
    335e:	97 f9       	bld	r25, 7
    3360:	08 95       	ret
    3362:	5f 3f       	cpi	r21, 0xFF	; 255
    3364:	ac f0       	brlt	.+42     	; 0x3390 <ldexp+0x68>
    3366:	98 3e       	cpi	r25, 0xE8	; 232
    3368:	9c f0       	brlt	.+38     	; 0x3390 <ldexp+0x68>
    336a:	bb 27       	eor	r27, r27
    336c:	86 95       	lsr	r24
    336e:	77 95       	ror	r23
    3370:	67 95       	ror	r22
    3372:	b7 95       	ror	r27
    3374:	08 f4       	brcc	.+2      	; 0x3378 <ldexp+0x50>
    3376:	b1 60       	ori	r27, 0x01	; 1
    3378:	93 95       	inc	r25
    337a:	c1 f7       	brne	.-16     	; 0x336c <ldexp+0x44>
    337c:	bb 0f       	add	r27, r27
    337e:	58 f7       	brcc	.-42     	; 0x3356 <ldexp+0x2e>
    3380:	11 f4       	brne	.+4      	; 0x3386 <ldexp+0x5e>
    3382:	60 ff       	sbrs	r22, 0
    3384:	e8 cf       	rjmp	.-48     	; 0x3356 <ldexp+0x2e>
    3386:	6f 5f       	subi	r22, 0xFF	; 255
    3388:	7f 4f       	sbci	r23, 0xFF	; 255
    338a:	8f 4f       	sbci	r24, 0xFF	; 255
    338c:	9f 4f       	sbci	r25, 0xFF	; 255
    338e:	e3 cf       	rjmp	.-58     	; 0x3356 <ldexp+0x2e>
    3390:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__fp_szero>
    3394:	16 f0       	brts	.+4      	; 0x339a <ldexp+0x72>
    3396:	0c 94 67 19 	jmp	0x32ce	; 0x32ce <__fp_mpack>
    339a:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__fp_nan>
    339e:	68 94       	set
    33a0:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__fp_inf>

000033a4 <log>:
    33a4:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <__fp_splitA>
    33a8:	a8 f3       	brcs	.-22     	; 0x3394 <ldexp+0x6c>
    33aa:	99 23       	and	r25, r25
    33ac:	c1 f3       	breq	.-16     	; 0x339e <ldexp+0x76>
    33ae:	ae f3       	brts	.-22     	; 0x339a <ldexp+0x72>
    33b0:	df 93       	push	r29
    33b2:	cf 93       	push	r28
    33b4:	1f 93       	push	r17
    33b6:	0f 93       	push	r16
    33b8:	ff 92       	push	r15
    33ba:	c9 2f       	mov	r28, r25
    33bc:	dd 27       	eor	r29, r29
    33be:	88 23       	and	r24, r24
    33c0:	2a f0       	brmi	.+10     	; 0x33cc <log+0x28>
    33c2:	21 97       	sbiw	r28, 0x01	; 1
    33c4:	66 0f       	add	r22, r22
    33c6:	77 1f       	adc	r23, r23
    33c8:	88 1f       	adc	r24, r24
    33ca:	da f7       	brpl	.-10     	; 0x33c2 <log+0x1e>
    33cc:	20 e0       	ldi	r18, 0x00	; 0
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	40 e8       	ldi	r20, 0x80	; 128
    33d2:	5f eb       	ldi	r21, 0xBF	; 191
    33d4:	9f e3       	ldi	r25, 0x3F	; 63
    33d6:	88 39       	cpi	r24, 0x98	; 152
    33d8:	20 f0       	brcs	.+8      	; 0x33e2 <log+0x3e>
    33da:	80 3e       	cpi	r24, 0xE0	; 224
    33dc:	38 f0       	brcs	.+14     	; 0x33ec <log+0x48>
    33de:	21 96       	adiw	r28, 0x01	; 1
    33e0:	8f 77       	andi	r24, 0x7F	; 127
    33e2:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__addsf3>
    33e6:	e7 e4       	ldi	r30, 0x47	; 71
    33e8:	f1 e0       	ldi	r31, 0x01	; 1
    33ea:	04 c0       	rjmp	.+8      	; 0x33f4 <log+0x50>
    33ec:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__addsf3>
    33f0:	e4 e7       	ldi	r30, 0x74	; 116
    33f2:	f1 e0       	ldi	r31, 0x01	; 1
    33f4:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <__fp_powser>
    33f8:	8b 01       	movw	r16, r22
    33fa:	be 01       	movw	r22, r28
    33fc:	ec 01       	movw	r28, r24
    33fe:	fb 2e       	mov	r15, r27
    3400:	6f 57       	subi	r22, 0x7F	; 127
    3402:	71 09       	sbc	r23, r1
    3404:	75 95       	asr	r23
    3406:	77 1f       	adc	r23, r23
    3408:	88 0b       	sbc	r24, r24
    340a:	99 0b       	sbc	r25, r25
    340c:	0e 94 db 16 	call	0x2db6	; 0x2db6 <__floatsisf>
    3410:	28 e1       	ldi	r18, 0x18	; 24
    3412:	32 e7       	ldi	r19, 0x72	; 114
    3414:	41 e3       	ldi	r20, 0x31	; 49
    3416:	5f e3       	ldi	r21, 0x3F	; 63
    3418:	0e 94 31 18 	call	0x3062	; 0x3062 <__mulsf3x>
    341c:	af 2d       	mov	r26, r15
    341e:	98 01       	movw	r18, r16
    3420:	ae 01       	movw	r20, r28
    3422:	ff 90       	pop	r15
    3424:	0f 91       	pop	r16
    3426:	1f 91       	pop	r17
    3428:	cf 91       	pop	r28
    342a:	df 91       	pop	r29
    342c:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__addsf3x>
    3430:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__fp_round>

00003434 <modf>:
    3434:	fa 01       	movw	r30, r20
    3436:	dc 01       	movw	r26, r24
    3438:	aa 0f       	add	r26, r26
    343a:	bb 1f       	adc	r27, r27
    343c:	9b 01       	movw	r18, r22
    343e:	ac 01       	movw	r20, r24
    3440:	bf 57       	subi	r27, 0x7F	; 127
    3442:	28 f4       	brcc	.+10     	; 0x344e <modf+0x1a>
    3444:	22 27       	eor	r18, r18
    3446:	33 27       	eor	r19, r19
    3448:	44 27       	eor	r20, r20
    344a:	50 78       	andi	r21, 0x80	; 128
    344c:	20 c0       	rjmp	.+64     	; 0x348e <modf+0x5a>
    344e:	b7 51       	subi	r27, 0x17	; 23
    3450:	90 f4       	brcc	.+36     	; 0x3476 <modf+0x42>
    3452:	ab 2f       	mov	r26, r27
    3454:	00 24       	eor	r0, r0
    3456:	46 95       	lsr	r20
    3458:	37 95       	ror	r19
    345a:	27 95       	ror	r18
    345c:	01 1c       	adc	r0, r1
    345e:	a3 95       	inc	r26
    3460:	d2 f3       	brmi	.-12     	; 0x3456 <modf+0x22>
    3462:	00 20       	and	r0, r0
    3464:	71 f0       	breq	.+28     	; 0x3482 <modf+0x4e>
    3466:	22 0f       	add	r18, r18
    3468:	33 1f       	adc	r19, r19
    346a:	44 1f       	adc	r20, r20
    346c:	b3 95       	inc	r27
    346e:	da f3       	brmi	.-10     	; 0x3466 <modf+0x32>
    3470:	0e d0       	rcall	.+28     	; 0x348e <modf+0x5a>
    3472:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__subsf3>
    3476:	61 30       	cpi	r22, 0x01	; 1
    3478:	71 05       	cpc	r23, r1
    347a:	a0 e8       	ldi	r26, 0x80	; 128
    347c:	8a 07       	cpc	r24, r26
    347e:	b9 46       	sbci	r27, 0x69	; 105
    3480:	30 f4       	brcc	.+12     	; 0x348e <modf+0x5a>
    3482:	9b 01       	movw	r18, r22
    3484:	ac 01       	movw	r20, r24
    3486:	66 27       	eor	r22, r22
    3488:	77 27       	eor	r23, r23
    348a:	88 27       	eor	r24, r24
    348c:	90 78       	andi	r25, 0x80	; 128
    348e:	30 96       	adiw	r30, 0x00	; 0
    3490:	21 f0       	breq	.+8      	; 0x349a <modf+0x66>
    3492:	20 83       	st	Z, r18
    3494:	31 83       	std	Z+1, r19	; 0x01
    3496:	42 83       	std	Z+2, r20	; 0x02
    3498:	53 83       	std	Z+3, r21	; 0x03
    349a:	08 95       	ret

0000349c <__divmodhi4>:
    349c:	97 fb       	bst	r25, 7
    349e:	07 2e       	mov	r0, r23
    34a0:	16 f4       	brtc	.+4      	; 0x34a6 <__divmodhi4+0xa>
    34a2:	00 94       	com	r0
    34a4:	07 d0       	rcall	.+14     	; 0x34b4 <__divmodhi4_neg1>
    34a6:	77 fd       	sbrc	r23, 7
    34a8:	09 d0       	rcall	.+18     	; 0x34bc <__divmodhi4_neg2>
    34aa:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__udivmodhi4>
    34ae:	07 fc       	sbrc	r0, 7
    34b0:	05 d0       	rcall	.+10     	; 0x34bc <__divmodhi4_neg2>
    34b2:	3e f4       	brtc	.+14     	; 0x34c2 <__divmodhi4_exit>

000034b4 <__divmodhi4_neg1>:
    34b4:	90 95       	com	r25
    34b6:	81 95       	neg	r24
    34b8:	9f 4f       	sbci	r25, 0xFF	; 255
    34ba:	08 95       	ret

000034bc <__divmodhi4_neg2>:
    34bc:	70 95       	com	r23
    34be:	61 95       	neg	r22
    34c0:	7f 4f       	sbci	r23, 0xFF	; 255

000034c2 <__divmodhi4_exit>:
    34c2:	08 95       	ret

000034c4 <__udivmodhi4>:
    34c4:	aa 1b       	sub	r26, r26
    34c6:	bb 1b       	sub	r27, r27
    34c8:	51 e1       	ldi	r21, 0x11	; 17
    34ca:	07 c0       	rjmp	.+14     	; 0x34da <__udivmodhi4_ep>

000034cc <__udivmodhi4_loop>:
    34cc:	aa 1f       	adc	r26, r26
    34ce:	bb 1f       	adc	r27, r27
    34d0:	a6 17       	cp	r26, r22
    34d2:	b7 07       	cpc	r27, r23
    34d4:	10 f0       	brcs	.+4      	; 0x34da <__udivmodhi4_ep>
    34d6:	a6 1b       	sub	r26, r22
    34d8:	b7 0b       	sbc	r27, r23

000034da <__udivmodhi4_ep>:
    34da:	88 1f       	adc	r24, r24
    34dc:	99 1f       	adc	r25, r25
    34de:	5a 95       	dec	r21
    34e0:	a9 f7       	brne	.-22     	; 0x34cc <__udivmodhi4_loop>
    34e2:	80 95       	com	r24
    34e4:	90 95       	com	r25
    34e6:	bc 01       	movw	r22, r24
    34e8:	cd 01       	movw	r24, r26
    34ea:	08 95       	ret

000034ec <__itoa_ncheck>:
    34ec:	bb 27       	eor	r27, r27
    34ee:	4a 30       	cpi	r20, 0x0A	; 10
    34f0:	31 f4       	brne	.+12     	; 0x34fe <__itoa_ncheck+0x12>
    34f2:	99 23       	and	r25, r25
    34f4:	22 f4       	brpl	.+8      	; 0x34fe <__itoa_ncheck+0x12>
    34f6:	bd e2       	ldi	r27, 0x2D	; 45
    34f8:	90 95       	com	r25
    34fa:	81 95       	neg	r24
    34fc:	9f 4f       	sbci	r25, 0xFF	; 255
    34fe:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__utoa_common>

00003502 <__utoa_ncheck>:
    3502:	bb 27       	eor	r27, r27

00003504 <__utoa_common>:
    3504:	fb 01       	movw	r30, r22
    3506:	55 27       	eor	r21, r21
    3508:	aa 27       	eor	r26, r26
    350a:	88 0f       	add	r24, r24
    350c:	99 1f       	adc	r25, r25
    350e:	aa 1f       	adc	r26, r26
    3510:	a4 17       	cp	r26, r20
    3512:	10 f0       	brcs	.+4      	; 0x3518 <__utoa_common+0x14>
    3514:	a4 1b       	sub	r26, r20
    3516:	83 95       	inc	r24
    3518:	50 51       	subi	r21, 0x10	; 16
    351a:	b9 f7       	brne	.-18     	; 0x350a <__utoa_common+0x6>
    351c:	a0 5d       	subi	r26, 0xD0	; 208
    351e:	aa 33       	cpi	r26, 0x3A	; 58
    3520:	08 f0       	brcs	.+2      	; 0x3524 <__utoa_common+0x20>
    3522:	a9 5d       	subi	r26, 0xD9	; 217
    3524:	a1 93       	st	Z+, r26
    3526:	00 97       	sbiw	r24, 0x00	; 0
    3528:	79 f7       	brne	.-34     	; 0x3508 <__utoa_common+0x4>
    352a:	b1 11       	cpse	r27, r1
    352c:	b1 93       	st	Z+, r27
    352e:	11 92       	st	Z+, r1
    3530:	cb 01       	movw	r24, r22
    3532:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <strrev>

00003536 <strrev>:
    3536:	dc 01       	movw	r26, r24
    3538:	fc 01       	movw	r30, r24
    353a:	67 2f       	mov	r22, r23
    353c:	71 91       	ld	r23, Z+
    353e:	77 23       	and	r23, r23
    3540:	e1 f7       	brne	.-8      	; 0x353a <strrev+0x4>
    3542:	32 97       	sbiw	r30, 0x02	; 2
    3544:	04 c0       	rjmp	.+8      	; 0x354e <strrev+0x18>
    3546:	7c 91       	ld	r23, X
    3548:	6d 93       	st	X+, r22
    354a:	70 83       	st	Z, r23
    354c:	62 91       	ld	r22, -Z
    354e:	ae 17       	cp	r26, r30
    3550:	bf 07       	cpc	r27, r31
    3552:	c8 f3       	brcs	.-14     	; 0x3546 <strrev+0x10>
    3554:	08 95       	ret

00003556 <_exit>:
    3556:	f8 94       	cli

00003558 <__stop_program>:
    3558:	ff cf       	rjmp	.-2      	; 0x3558 <__stop_program>
