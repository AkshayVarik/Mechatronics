
Acrobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00001422  000014b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001422  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000051  00800114  00800114  000014ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b7a  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069a  00000000  00000000  0000324e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d3  00000000  00000000  000038e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000534  00000000  00000000  000042bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000714  00000000  00000000  000047f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002138  00000000  00000000  00004f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 00 	jmp	0x186	; 0x186 <__ctors_end>
       4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
       8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
       c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      10:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      14:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      18:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      1c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      20:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      24:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      28:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__vector_10>
      2c:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__vector_11>
      30:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      34:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      38:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      3c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      40:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      44:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      48:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      4c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      50:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      54:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      58:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      5c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      60:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      64:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      68:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      6c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      70:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      74:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      78:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      7c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      80:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      84:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      88:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      8c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      90:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      94:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      98:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      9c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      a8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>

000000ac <__trampolines_end>:
      ac:	0a 00       	.word	0x000a	; ????

000000ae <__c.2033>:
      ae:	09 67 78 5f 66 69 6c 74 65 72 65 64 09 00           .gx_filtered..

000000bc <__c.2031>:
      bc:	09 6d 6f 76 65 09 00                                .move..

000000c3 <__c.2029>:
      c3:	09 6f 66 66 73 65 74 09 00                          .offset..

000000cc <__c.2027>:
      cc:	65 72 72 6f 72 09 00                                error..

000000d3 <descriptor_list>:
      d3:	00 01 00 00 6a 01 12 00 02 00 00 27 01 43 00 03     ....j......'.C..
      e3:	00 00 23 01 04 01 03 09 04 0f 01 12 02 03 09 04     ..#.............
      f3:	07 01 06 03 03 09 04 fd 00 08                       ..........

000000fd <string3>:
      fd:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000107 <string2>:
     107:	06 03 4d 00 32 00 00 00                             ..M.2...

0000010f <string1>:
     10f:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     11f:	65 00 00 00                                         e...

00000123 <string0>:
     123:	04 03 09 04                                         ....

00000127 <config1_descriptor>:
     127:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     137:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     147:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     157:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     167:	40 00 00                                            @..

0000016a <device_descriptor>:
     16a:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     17a:	03 01                                               ..

0000017c <endpoint_config_table>:
     17c:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	da e0       	ldi	r29, 0x0A	; 10
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61

00000192 <__do_copy_data>:
     192:	11 e0       	ldi	r17, 0x01	; 1
     194:	a0 e0       	ldi	r26, 0x00	; 0
     196:	b1 e0       	ldi	r27, 0x01	; 1
     198:	e2 e2       	ldi	r30, 0x22	; 34
     19a:	f4 e1       	ldi	r31, 0x14	; 20
     19c:	02 c0       	rjmp	.+4      	; 0x1a2 <__do_copy_data+0x10>
     19e:	05 90       	lpm	r0, Z+
     1a0:	0d 92       	st	X+, r0
     1a2:	a4 31       	cpi	r26, 0x14	; 20
     1a4:	b1 07       	cpc	r27, r17
     1a6:	d9 f7       	brne	.-10     	; 0x19e <__do_copy_data+0xc>

000001a8 <__do_clear_bss>:
     1a8:	21 e0       	ldi	r18, 0x01	; 1
     1aa:	a4 e1       	ldi	r26, 0x14	; 20
     1ac:	b1 e0       	ldi	r27, 0x01	; 1
     1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <.do_clear_bss_start>

000001b0 <.do_clear_bss_loop>:
     1b0:	1d 92       	st	X+, r1

000001b2 <.do_clear_bss_start>:
     1b2:	a5 36       	cpi	r26, 0x65	; 101
     1b4:	b2 07       	cpc	r27, r18
     1b6:	e1 f7       	brne	.-8      	; 0x1b0 <.do_clear_bss_loop>
     1b8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
     1bc:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <_exit>

000001c0 <__bad_interrupt>:
     1c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c4 <main>:
volatile float gx_filtered_latest = 0;
volatile float gx_filtered_old = 0;


int main(void)
{
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
     1cc:	60 97       	sbiw	r28, 0x10	; 16
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	f8 94       	cli
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	0f be       	out	0x3f, r0	; 63
     1d6:	cd bf       	out	0x3d, r28	; 61
m_clockdivide(3); //2MHz
     1d8:	e1 e6       	ldi	r30, 0x61	; 97
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	80 e8       	ldi	r24, 0x80	; 128
     1de:	80 83       	st	Z, r24
     1e0:	83 e0       	ldi	r24, 0x03	; 3
     1e2:	80 83       	st	Z, r24

//Timer
clear(TCCR1B,CS12);
     1e4:	e1 e8       	ldi	r30, 0x81	; 129
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	8b 7f       	andi	r24, 0xFB	; 251
     1ec:	80 83       	st	Z, r24
set(TCCR1B,CS11);
     1ee:	80 81       	ld	r24, Z
     1f0:	82 60       	ori	r24, 0x02	; 2
     1f2:	80 83       	st	Z, r24
clear(TCCR1B,CS10); //8 precale timer
     1f4:	80 81       	ld	r24, Z
     1f6:	8e 7f       	andi	r24, 0xFE	; 254
     1f8:	80 83       	st	Z, r24

set(TCCR1B,WGM13);
     1fa:	80 81       	ld	r24, Z
     1fc:	80 61       	ori	r24, 0x10	; 16
     1fe:	80 83       	st	Z, r24
set(TCCR1B,WGM12);
     200:	80 81       	ld	r24, Z
     202:	88 60       	ori	r24, 0x08	; 8
     204:	80 83       	st	Z, r24
set(TCCR1A,WGM11);
     206:	e0 e8       	ldi	r30, 0x80	; 128
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	80 81       	ld	r24, Z
     20c:	82 60       	ori	r24, 0x02	; 2
     20e:	80 83       	st	Z, r24
set(TCCR1A,WGM10);
     210:	80 81       	ld	r24, Z
     212:	81 60       	ori	r24, 0x01	; 1
     214:	80 83       	st	Z, r24

set(TCCR1A,COM1B1);
     216:	80 81       	ld	r24, Z
     218:	80 62       	ori	r24, 0x20	; 32
     21a:	80 83       	st	Z, r24
clear(TCCR1A,COM1B0);
     21c:	80 81       	ld	r24, Z
     21e:	8f 7e       	andi	r24, 0xEF	; 239
     220:	80 83       	st	Z, r24

m_usb_init();
     222:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <m_usb_init>

m_imu_init(0,0);
     226:	60 e0       	ldi	r22, 0x00	; 0
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	0e 94 35 04 	call	0x86a	; 0x86a <m_imu_init>

OCR1A = 250;
     22e:	8a ef       	ldi	r24, 0xFA	; 250
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	90 93 89 00 	sts	0x0089, r25
     236:	80 93 88 00 	sts	0x0088, r24

// ay_refined = (ay - ay_offset)*ay_scale;

error = target_angle-angle;
az = (kp * error) + (kd*(error-error_last)/dt) + (ki*sum_error*dt);
OCR1B = abs((kp * error) + (kd*(error-error_last)/dt) + (ki*sum_error*dt))*250/15000;
     23a:	1a ef       	ldi	r17, 0xFA	; 250
     23c:	0f 2e       	mov	r0, r31
     23e:	f8 e9       	ldi	r31, 0x98	; 152
     240:	2f 2e       	mov	r2, r31
     242:	fa e3       	ldi	r31, 0x3A	; 58
     244:	3f 2e       	mov	r3, r31
     246:	f0 2d       	mov	r31, r0

//read=1;

while(1){

read = m_imu_raw(data);
     248:	86 e3       	ldi	r24, 0x36	; 54
     24a:	91 e0       	ldi	r25, 0x01	; 1
     24c:	0e 94 a2 04 	call	0x944	; 0x944 <m_imu_raw>
     250:	80 93 54 01 	sts	0x0154, r24

ax = data[0];
     254:	e6 e3       	ldi	r30, 0x36	; 54
     256:	f1 e0       	ldi	r31, 0x01	; 1
     258:	80 81       	ld	r24, Z
     25a:	91 81       	ldd	r25, Z+1	; 0x01
     25c:	90 93 53 01 	sts	0x0153, r25
     260:	80 93 52 01 	sts	0x0152, r24
ay = data[1];
     264:	82 81       	ldd	r24, Z+2	; 0x02
     266:	93 81       	ldd	r25, Z+3	; 0x03
     268:	90 93 64 01 	sts	0x0164, r25
     26c:	80 93 63 01 	sts	0x0163, r24
az = data[2];
     270:	84 81       	ldd	r24, Z+4	; 0x04
     272:	95 81       	ldd	r25, Z+5	; 0x05
     274:	90 93 51 01 	sts	0x0151, r25
     278:	80 93 50 01 	sts	0x0150, r24
gx = data[3];
     27c:	86 81       	ldd	r24, Z+6	; 0x06
     27e:	97 81       	ldd	r25, Z+7	; 0x07
     280:	90 93 62 01 	sts	0x0162, r25
     284:	80 93 61 01 	sts	0x0161, r24
gy = data[4];
     288:	80 85       	ldd	r24, Z+8	; 0x08
     28a:	91 85       	ldd	r25, Z+9	; 0x09
     28c:	90 93 4f 01 	sts	0x014F, r25
     290:	80 93 4e 01 	sts	0x014E, r24
gz = data[5];
     294:	82 85       	ldd	r24, Z+10	; 0x0a
     296:	93 85       	ldd	r25, Z+11	; 0x0b
     298:	90 93 5a 01 	sts	0x015A, r25
     29c:	80 93 59 01 	sts	0x0159, r24

gx_filtered=gx_filtered_prev+gx*dt;
     2a0:	60 91 61 01 	lds	r22, 0x0161
     2a4:	70 91 62 01 	lds	r23, 0x0162
     2a8:	c0 90 1c 01 	lds	r12, 0x011C
     2ac:	d0 90 1d 01 	lds	r13, 0x011D
     2b0:	e0 90 1e 01 	lds	r14, 0x011E
     2b4:	f0 90 1f 01 	lds	r15, 0x011F
     2b8:	07 2e       	mov	r0, r23
     2ba:	00 0c       	add	r0, r0
     2bc:	88 0b       	sbc	r24, r24
     2be:	99 0b       	sbc	r25, r25
     2c0:	0e 94 90 08 	call	0x1120	; 0x1120 <__floatsisf>
     2c4:	2f e6       	ldi	r18, 0x6F	; 111
     2c6:	32 e1       	ldi	r19, 0x12	; 18
     2c8:	43 e8       	ldi	r20, 0x83	; 131
     2ca:	5a e3       	ldi	r21, 0x3A	; 58
     2cc:	0e 94 21 09 	call	0x1242	; 0x1242 <__mulsf3>
     2d0:	a7 01       	movw	r20, r14
     2d2:	96 01       	movw	r18, r12
     2d4:	0e 94 7a 07 	call	0xef4	; 0xef4 <__addsf3>
     2d8:	60 93 20 01 	sts	0x0120, r22
     2dc:	70 93 21 01 	sts	0x0121, r23
     2e0:	80 93 22 01 	sts	0x0122, r24
     2e4:	90 93 23 01 	sts	0x0123, r25
gx_filtered_latest = 0.99*(gx_filtered_old + (gx_filtered-gx_filtered_prev));
     2e8:	60 91 20 01 	lds	r22, 0x0120
     2ec:	70 91 21 01 	lds	r23, 0x0121
     2f0:	80 91 22 01 	lds	r24, 0x0122
     2f4:	90 91 23 01 	lds	r25, 0x0123
     2f8:	20 91 1c 01 	lds	r18, 0x011C
     2fc:	30 91 1d 01 	lds	r19, 0x011D
     300:	40 91 1e 01 	lds	r20, 0x011E
     304:	50 91 1f 01 	lds	r21, 0x011F
     308:	c0 90 14 01 	lds	r12, 0x0114
     30c:	d0 90 15 01 	lds	r13, 0x0115
     310:	e0 90 16 01 	lds	r14, 0x0116
     314:	f0 90 17 01 	lds	r15, 0x0117
     318:	0e 94 79 07 	call	0xef2	; 0xef2 <__subsf3>
     31c:	a7 01       	movw	r20, r14
     31e:	96 01       	movw	r18, r12
     320:	0e 94 7a 07 	call	0xef4	; 0xef4 <__addsf3>
     324:	24 ea       	ldi	r18, 0xA4	; 164
     326:	30 e7       	ldi	r19, 0x70	; 112
     328:	4d e7       	ldi	r20, 0x7D	; 125
     32a:	5f e3       	ldi	r21, 0x3F	; 63
     32c:	0e 94 21 09 	call	0x1242	; 0x1242 <__mulsf3>
     330:	60 93 18 01 	sts	0x0118, r22
     334:	70 93 19 01 	sts	0x0119, r23
     338:	80 93 1a 01 	sts	0x011A, r24
     33c:	90 93 1b 01 	sts	0x011B, r25
//ay_filtered = 0.99*ay_filtered + 0.01*ay;

//a = pow((pow(ax,2) + pow(ay,2) + pow(az,2)),0.5);
//g = pow((pow(gx,2) + pow(gy,2) + pow(gz,2)),0.5);

angle = 0.98*(angle+(gx_filtered*dt))+0.02*ay;
     340:	60 91 20 01 	lds	r22, 0x0120
     344:	70 91 21 01 	lds	r23, 0x0121
     348:	80 91 22 01 	lds	r24, 0x0122
     34c:	90 91 23 01 	lds	r25, 0x0123
     350:	80 90 30 01 	lds	r8, 0x0130
     354:	90 90 31 01 	lds	r9, 0x0131
     358:	a0 90 32 01 	lds	r10, 0x0132
     35c:	b0 90 33 01 	lds	r11, 0x0133
     360:	e0 90 63 01 	lds	r14, 0x0163
     364:	f0 90 64 01 	lds	r15, 0x0164
     368:	2f e6       	ldi	r18, 0x6F	; 111
     36a:	32 e1       	ldi	r19, 0x12	; 18
     36c:	43 e8       	ldi	r20, 0x83	; 131
     36e:	5a e3       	ldi	r21, 0x3A	; 58
     370:	0e 94 21 09 	call	0x1242	; 0x1242 <__mulsf3>
     374:	a5 01       	movw	r20, r10
     376:	94 01       	movw	r18, r8
     378:	0e 94 7a 07 	call	0xef4	; 0xef4 <__addsf3>
     37c:	28 e4       	ldi	r18, 0x48	; 72
     37e:	31 ee       	ldi	r19, 0xE1	; 225
     380:	4a e7       	ldi	r20, 0x7A	; 122
     382:	5f e3       	ldi	r21, 0x3F	; 63
     384:	0e 94 21 09 	call	0x1242	; 0x1242 <__mulsf3>
     388:	4b 01       	movw	r8, r22
     38a:	5c 01       	movw	r10, r24
     38c:	b7 01       	movw	r22, r14
     38e:	ff 0c       	add	r15, r15
     390:	88 0b       	sbc	r24, r24
     392:	99 0b       	sbc	r25, r25
     394:	0e 94 90 08 	call	0x1120	; 0x1120 <__floatsisf>
     398:	2a e0       	ldi	r18, 0x0A	; 10
     39a:	37 ed       	ldi	r19, 0xD7	; 215
     39c:	43 ea       	ldi	r20, 0xA3	; 163
     39e:	5c e3       	ldi	r21, 0x3C	; 60
     3a0:	0e 94 21 09 	call	0x1242	; 0x1242 <__mulsf3>
     3a4:	9b 01       	movw	r18, r22
     3a6:	ac 01       	movw	r20, r24
     3a8:	c5 01       	movw	r24, r10
     3aa:	b4 01       	movw	r22, r8
     3ac:	0e 94 7a 07 	call	0xef4	; 0xef4 <__addsf3>
     3b0:	60 93 30 01 	sts	0x0130, r22
     3b4:	70 93 31 01 	sts	0x0131, r23
     3b8:	80 93 32 01 	sts	0x0132, r24
     3bc:	90 93 33 01 	sts	0x0133, r25


// ay_refined = (ay - ay_offset)*ay_scale;

error = target_angle-angle;
     3c0:	60 91 24 01 	lds	r22, 0x0124
     3c4:	70 91 25 01 	lds	r23, 0x0125
     3c8:	80 91 26 01 	lds	r24, 0x0126
     3cc:	90 91 27 01 	lds	r25, 0x0127
     3d0:	20 91 30 01 	lds	r18, 0x0130
     3d4:	30 91 31 01 	lds	r19, 0x0131
     3d8:	40 91 32 01 	lds	r20, 0x0132
     3dc:	50 91 33 01 	lds	r21, 0x0133
     3e0:	0e 94 79 07 	call	0xef2	; 0xef2 <__subsf3>
     3e4:	60 93 5b 01 	sts	0x015B, r22
     3e8:	70 93 5c 01 	sts	0x015C, r23
     3ec:	80 93 5d 01 	sts	0x015D, r24
     3f0:	90 93 5e 01 	sts	0x015E, r25
az = (kp * error) + (kd*(error-error_last)/dt) + (ki*sum_error*dt);
     3f4:	60 91 08 01 	lds	r22, 0x0108
     3f8:	70 91 09 01 	lds	r23, 0x0109
     3fc:	80 91 0a 01 	lds	r24, 0x010A
     400:	90 91 0b 01 	lds	r25, 0x010B
     404:	20 91 5b 01 	lds	r18, 0x015B
     408:	30 91 5c 01 	lds	r19, 0x015C
     40c:	40 91 5d 01 	lds	r20, 0x015D
     410:	50 91 5e 01 	lds	r21, 0x015E
     414:	80 90 5b 01 	lds	r8, 0x015B
     418:	90 90 5c 01 	lds	r9, 0x015C
     41c:	a0 90 5d 01 	lds	r10, 0x015D
     420:	b0 90 5e 01 	lds	r11, 0x015E
     424:	40 90 28 01 	lds	r4, 0x0128
     428:	50 90 29 01 	lds	r5, 0x0129
     42c:	60 90 2a 01 	lds	r6, 0x012A
     430:	70 90 2b 01 	lds	r7, 0x012B
     434:	c0 90 04 01 	lds	r12, 0x0104
     438:	d0 90 05 01 	lds	r13, 0x0105
     43c:	e0 90 06 01 	lds	r14, 0x0106
     440:	f0 90 07 01 	lds	r15, 0x0107
     444:	c9 82       	std	Y+1, r12	; 0x01
     446:	da 82       	std	Y+2, r13	; 0x02
     448:	eb 82       	std	Y+3, r14	; 0x03
     44a:	fc 82       	std	Y+4, r15	; 0x04
     44c:	c0 90 00 01 	lds	r12, 0x0100
     450:	d0 90 01 01 	lds	r13, 0x0101
     454:	e0 90 02 01 	lds	r14, 0x0102
     458:	f0 90 03 01 	lds	r15, 0x0103
     45c:	cd 86       	std	Y+13, r12	; 0x0d
     45e:	de 86       	std	Y+14, r13	; 0x0e
     460:	ef 86       	std	Y+15, r14	; 0x0f
     462:	f8 8a       	std	Y+16, r15	; 0x10
     464:	c0 90 2c 01 	lds	r12, 0x012C
     468:	d0 90 2d 01 	lds	r13, 0x012D
     46c:	e0 90 2e 01 	lds	r14, 0x012E
     470:	f0 90 2f 01 	lds	r15, 0x012F
     474:	cd 82       	std	Y+5, r12	; 0x05
     476:	de 82       	std	Y+6, r13	; 0x06
     478:	ef 82       	std	Y+7, r14	; 0x07
     47a:	f8 86       	std	Y+8, r15	; 0x08
     47c:	0e 94 21 09 	call	0x1242	; 0x1242 <__mulsf3>
     480:	6b 01       	movw	r12, r22
     482:	7c 01       	movw	r14, r24
     484:	a3 01       	movw	r20, r6
     486:	92 01       	movw	r18, r4
     488:	c5 01       	movw	r24, r10
     48a:	b4 01       	movw	r22, r8
     48c:	0e 94 79 07 	call	0xef2	; 0xef2 <__subsf3>
     490:	29 81       	ldd	r18, Y+1	; 0x01
     492:	3a 81       	ldd	r19, Y+2	; 0x02
     494:	4b 81       	ldd	r20, Y+3	; 0x03
     496:	5c 81       	ldd	r21, Y+4	; 0x04
     498:	0e 94 21 09 	call	0x1242	; 0x1242 <__mulsf3>
     49c:	2f e6       	ldi	r18, 0x6F	; 111
     49e:	32 e1       	ldi	r19, 0x12	; 18
     4a0:	43 e8       	ldi	r20, 0x83	; 131
     4a2:	5a e3       	ldi	r21, 0x3A	; 58
     4a4:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__divsf3>
     4a8:	9b 01       	movw	r18, r22
     4aa:	ac 01       	movw	r20, r24
     4ac:	c7 01       	movw	r24, r14
     4ae:	b6 01       	movw	r22, r12
     4b0:	0e 94 7a 07 	call	0xef4	; 0xef4 <__addsf3>
     4b4:	4b 01       	movw	r8, r22
     4b6:	5c 01       	movw	r10, r24
     4b8:	2d 81       	ldd	r18, Y+5	; 0x05
     4ba:	3e 81       	ldd	r19, Y+6	; 0x06
     4bc:	4f 81       	ldd	r20, Y+7	; 0x07
     4be:	58 85       	ldd	r21, Y+8	; 0x08
     4c0:	6d 85       	ldd	r22, Y+13	; 0x0d
     4c2:	7e 85       	ldd	r23, Y+14	; 0x0e
     4c4:	8f 85       	ldd	r24, Y+15	; 0x0f
     4c6:	98 89       	ldd	r25, Y+16	; 0x10
     4c8:	0e 94 21 09 	call	0x1242	; 0x1242 <__mulsf3>
     4cc:	2f e6       	ldi	r18, 0x6F	; 111
     4ce:	32 e1       	ldi	r19, 0x12	; 18
     4d0:	43 e8       	ldi	r20, 0x83	; 131
     4d2:	5a e3       	ldi	r21, 0x3A	; 58
     4d4:	0e 94 21 09 	call	0x1242	; 0x1242 <__mulsf3>
     4d8:	9b 01       	movw	r18, r22
     4da:	ac 01       	movw	r20, r24
     4dc:	c5 01       	movw	r24, r10
     4de:	b4 01       	movw	r22, r8
     4e0:	0e 94 7a 07 	call	0xef4	; 0xef4 <__addsf3>
     4e4:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__fixsfsi>
     4e8:	70 93 51 01 	sts	0x0151, r23
     4ec:	60 93 50 01 	sts	0x0150, r22
OCR1B = abs((kp * error) + (kd*(error-error_last)/dt) + (ki*sum_error*dt))*250/15000;
     4f0:	60 91 08 01 	lds	r22, 0x0108
     4f4:	70 91 09 01 	lds	r23, 0x0109
     4f8:	80 91 0a 01 	lds	r24, 0x010A
     4fc:	90 91 0b 01 	lds	r25, 0x010B
     500:	20 91 5b 01 	lds	r18, 0x015B
     504:	30 91 5c 01 	lds	r19, 0x015C
     508:	40 91 5d 01 	lds	r20, 0x015D
     50c:	50 91 5e 01 	lds	r21, 0x015E
     510:	80 90 5b 01 	lds	r8, 0x015B
     514:	90 90 5c 01 	lds	r9, 0x015C
     518:	a0 90 5d 01 	lds	r10, 0x015D
     51c:	b0 90 5e 01 	lds	r11, 0x015E
     520:	40 90 28 01 	lds	r4, 0x0128
     524:	50 90 29 01 	lds	r5, 0x0129
     528:	60 90 2a 01 	lds	r6, 0x012A
     52c:	70 90 2b 01 	lds	r7, 0x012B
     530:	c0 90 04 01 	lds	r12, 0x0104
     534:	d0 90 05 01 	lds	r13, 0x0105
     538:	e0 90 06 01 	lds	r14, 0x0106
     53c:	f0 90 07 01 	lds	r15, 0x0107
     540:	c9 82       	std	Y+1, r12	; 0x01
     542:	da 82       	std	Y+2, r13	; 0x02
     544:	eb 82       	std	Y+3, r14	; 0x03
     546:	fc 82       	std	Y+4, r15	; 0x04
     548:	c0 90 00 01 	lds	r12, 0x0100
     54c:	d0 90 01 01 	lds	r13, 0x0101
     550:	e0 90 02 01 	lds	r14, 0x0102
     554:	f0 90 03 01 	lds	r15, 0x0103
     558:	cd 86       	std	Y+13, r12	; 0x0d
     55a:	de 86       	std	Y+14, r13	; 0x0e
     55c:	ef 86       	std	Y+15, r14	; 0x0f
     55e:	f8 8a       	std	Y+16, r15	; 0x10
     560:	c0 90 2c 01 	lds	r12, 0x012C
     564:	d0 90 2d 01 	lds	r13, 0x012D
     568:	e0 90 2e 01 	lds	r14, 0x012E
     56c:	f0 90 2f 01 	lds	r15, 0x012F
     570:	cd 82       	std	Y+5, r12	; 0x05
     572:	de 82       	std	Y+6, r13	; 0x06
     574:	ef 82       	std	Y+7, r14	; 0x07
     576:	f8 86       	std	Y+8, r15	; 0x08
     578:	0e 94 21 09 	call	0x1242	; 0x1242 <__mulsf3>
     57c:	6b 01       	movw	r12, r22
     57e:	7c 01       	movw	r14, r24
     580:	a3 01       	movw	r20, r6
     582:	92 01       	movw	r18, r4
     584:	c5 01       	movw	r24, r10
     586:	b4 01       	movw	r22, r8
     588:	0e 94 79 07 	call	0xef2	; 0xef2 <__subsf3>
     58c:	29 81       	ldd	r18, Y+1	; 0x01
     58e:	3a 81       	ldd	r19, Y+2	; 0x02
     590:	4b 81       	ldd	r20, Y+3	; 0x03
     592:	5c 81       	ldd	r21, Y+4	; 0x04
     594:	0e 94 21 09 	call	0x1242	; 0x1242 <__mulsf3>
     598:	2f e6       	ldi	r18, 0x6F	; 111
     59a:	32 e1       	ldi	r19, 0x12	; 18
     59c:	43 e8       	ldi	r20, 0x83	; 131
     59e:	5a e3       	ldi	r21, 0x3A	; 58
     5a0:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__divsf3>
     5a4:	9b 01       	movw	r18, r22
     5a6:	ac 01       	movw	r20, r24
     5a8:	c7 01       	movw	r24, r14
     5aa:	b6 01       	movw	r22, r12
     5ac:	0e 94 7a 07 	call	0xef4	; 0xef4 <__addsf3>
     5b0:	4b 01       	movw	r8, r22
     5b2:	5c 01       	movw	r10, r24
     5b4:	2d 81       	ldd	r18, Y+5	; 0x05
     5b6:	3e 81       	ldd	r19, Y+6	; 0x06
     5b8:	4f 81       	ldd	r20, Y+7	; 0x07
     5ba:	58 85       	ldd	r21, Y+8	; 0x08
     5bc:	6d 85       	ldd	r22, Y+13	; 0x0d
     5be:	7e 85       	ldd	r23, Y+14	; 0x0e
     5c0:	8f 85       	ldd	r24, Y+15	; 0x0f
     5c2:	98 89       	ldd	r25, Y+16	; 0x10
     5c4:	0e 94 21 09 	call	0x1242	; 0x1242 <__mulsf3>
     5c8:	2f e6       	ldi	r18, 0x6F	; 111
     5ca:	32 e1       	ldi	r19, 0x12	; 18
     5cc:	43 e8       	ldi	r20, 0x83	; 131
     5ce:	5a e3       	ldi	r21, 0x3A	; 58
     5d0:	0e 94 21 09 	call	0x1242	; 0x1242 <__mulsf3>
     5d4:	9b 01       	movw	r18, r22
     5d6:	ac 01       	movw	r20, r24
     5d8:	c5 01       	movw	r24, r10
     5da:	b4 01       	movw	r22, r8
     5dc:	0e 94 7a 07 	call	0xef4	; 0xef4 <__addsf3>
     5e0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__fixsfsi>
     5e4:	9b 01       	movw	r18, r22
     5e6:	77 23       	and	r23, r23
     5e8:	24 f4       	brge	.+8      	; 0x5f2 <main+0x42e>
     5ea:	22 27       	eor	r18, r18
     5ec:	33 27       	eor	r19, r19
     5ee:	26 1b       	sub	r18, r22
     5f0:	37 0b       	sbc	r19, r23
     5f2:	12 9f       	mul	r17, r18
     5f4:	c0 01       	movw	r24, r0
     5f6:	13 9f       	mul	r17, r19
     5f8:	90 0d       	add	r25, r0
     5fa:	11 24       	eor	r1, r1
     5fc:	b1 01       	movw	r22, r2
     5fe:	0e 94 b2 09 	call	0x1364	; 0x1364 <__divmodhi4>
     602:	ea e8       	ldi	r30, 0x8A	; 138
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	71 83       	std	Z+1, r23	; 0x01
     608:	60 83       	st	Z, r22
error_last = error;
     60a:	80 91 5b 01 	lds	r24, 0x015B
     60e:	90 91 5c 01 	lds	r25, 0x015C
     612:	a0 91 5d 01 	lds	r26, 0x015D
     616:	b0 91 5e 01 	lds	r27, 0x015E
     61a:	80 93 28 01 	sts	0x0128, r24
     61e:	90 93 29 01 	sts	0x0129, r25
     622:	a0 93 2a 01 	sts	0x012A, r26
     626:	b0 93 2b 01 	sts	0x012B, r27
sum_error = sum_error + error;
     62a:	60 91 2c 01 	lds	r22, 0x012C
     62e:	70 91 2d 01 	lds	r23, 0x012D
     632:	80 91 2e 01 	lds	r24, 0x012E
     636:	90 91 2f 01 	lds	r25, 0x012F
     63a:	20 91 5b 01 	lds	r18, 0x015B
     63e:	30 91 5c 01 	lds	r19, 0x015C
     642:	40 91 5d 01 	lds	r20, 0x015D
     646:	50 91 5e 01 	lds	r21, 0x015E
     64a:	0e 94 7a 07 	call	0xef4	; 0xef4 <__addsf3>
     64e:	60 93 2c 01 	sts	0x012C, r22
     652:	70 93 2d 01 	sts	0x012D, r23
     656:	80 93 2e 01 	sts	0x012E, r24
     65a:	90 93 2f 01 	sts	0x012F, r25
move = OCR1B;
     65e:	ea e8       	ldi	r30, 0x8A	; 138
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	91 81       	ldd	r25, Z+1	; 0x01
     666:	90 93 35 01 	sts	0x0135, r25
     66a:	80 93 34 01 	sts	0x0134, r24


if (angle>0) {
     66e:	60 91 30 01 	lds	r22, 0x0130
     672:	70 91 31 01 	lds	r23, 0x0131
     676:	80 91 32 01 	lds	r24, 0x0132
     67a:	90 91 33 01 	lds	r25, 0x0133
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	a9 01       	movw	r20, r18
     684:	0e 94 1c 09 	call	0x1238	; 0x1238 <__gesf2>
     688:	18 16       	cp	r1, r24
     68a:	5c f4       	brge	.+22     	; 0x6a2 <main+0x4de>
m_red(OFF);
     68c:	6e 9a       	sbi	0x0d, 6	; 13
     68e:	76 9a       	sbi	0x0e, 6	; 14
//OCR1B = 65535 - (65535/12500)*abs(move);

clear(DDRB,1);
     690:	21 98       	cbi	0x04, 1	; 4
clear(PORTB,1);
     692:	29 98       	cbi	0x05, 1	; 5

set(DDRB,2);
     694:	22 9a       	sbi	0x04, 2	; 4
set(PORTB,2);
     696:	2a 9a       	sbi	0x05, 2	; 5

set(DDRD,4);
     698:	54 9a       	sbi	0x0a, 4	; 10
set(PORTD,4);
     69a:	5c 9a       	sbi	0x0b, 4	; 11

clear(DDRD,6);
     69c:	56 98       	cbi	0x0a, 6	; 10
clear(PORTD,6);
     69e:	5e 98       	cbi	0x0b, 6	; 11
     6a0:	0a c0       	rjmp	.+20     	; 0x6b6 <main+0x4f2>
} else {
m_red(ON);
     6a2:	6e 9a       	sbi	0x0d, 6	; 13
     6a4:	76 98       	cbi	0x0e, 6	; 14
//OCR1B = 65535 - (65535/12500)*abs(move);


set(DDRB,1);
     6a6:	21 9a       	sbi	0x04, 1	; 4
set(PORTB,1);
     6a8:	29 9a       	sbi	0x05, 1	; 5

clear(DDRB,2);
     6aa:	22 98       	cbi	0x04, 2	; 4
clear(PORTB,2);
     6ac:	2a 98       	cbi	0x05, 2	; 5


set(DDRD,6);
     6ae:	56 9a       	sbi	0x0a, 6	; 10
set(PORTD,6);
     6b0:	5e 9a       	sbi	0x0b, 6	; 11

clear(DDRD,4);
     6b2:	54 98       	cbi	0x0a, 4	; 10
clear(PORTD,4);
     6b4:	5c 98       	cbi	0x0b, 4	; 11
}

m_usb_tx_string("error\t");
     6b6:	8c ec       	ldi	r24, 0xCC	; 204
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 29 07 	call	0xe52	; 0xe52 <print_P>
m_usb_tx_int(error);
     6be:	60 91 5b 01 	lds	r22, 0x015B
     6c2:	70 91 5c 01 	lds	r23, 0x015C
     6c6:	80 91 5d 01 	lds	r24, 0x015D
     6ca:	90 91 5e 01 	lds	r25, 0x015E
     6ce:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__fixsfsi>
     6d2:	cb 01       	movw	r24, r22
     6d4:	0e 94 45 07 	call	0xe8a	; 0xe8a <m_usb_tx_int>
//        m_usb_tx_int(data[2]);
//        m_usb_tx_string("\tgx\t");
//        m_usb_tx_int(data[3]);
//        m_usb_tx_string("\tgy\t");
//        m_usb_tx_int(data[4]);
m_usb_tx_string("\toffset\t");
     6d8:	83 ec       	ldi	r24, 0xC3	; 195
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 29 07 	call	0xe52	; 0xe52 <print_P>
m_usb_tx_int(gz);
     6e0:	80 91 59 01 	lds	r24, 0x0159
     6e4:	90 91 5a 01 	lds	r25, 0x015A
     6e8:	0e 94 45 07 	call	0xe8a	; 0xe8a <m_usb_tx_int>
//        m_usb_tx_string("\ta\t");
//        m_usb_tx_int(a);
//        m_usb_tx_string("\tg\t");
//        m_usb_tx_int(g);
m_usb_tx_string("\tmove\t");
     6ec:	8c eb       	ldi	r24, 0xBC	; 188
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 29 07 	call	0xe52	; 0xe52 <print_P>
m_usb_tx_int(move);
     6f4:	80 91 34 01 	lds	r24, 0x0134
     6f8:	90 91 35 01 	lds	r25, 0x0135
     6fc:	0e 94 45 07 	call	0xe8a	; 0xe8a <m_usb_tx_int>
m_usb_tx_string("\tgx_filtered\t");
     700:	8e ea       	ldi	r24, 0xAE	; 174
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 29 07 	call	0xe52	; 0xe52 <print_P>
m_usb_tx_int(gx_filtered);
     708:	60 91 20 01 	lds	r22, 0x0120
     70c:	70 91 21 01 	lds	r23, 0x0121
     710:	80 91 22 01 	lds	r24, 0x0122
     714:	90 91 23 01 	lds	r25, 0x0123
     718:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__fixsfsi>
     71c:	cb 01       	movw	r24, r22
     71e:	0e 94 45 07 	call	0xe8a	; 0xe8a <m_usb_tx_int>
m_usb_tx_string("\n");
     722:	8c ea       	ldi	r24, 0xAC	; 172
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 29 07 	call	0xe52	; 0xe52 <print_P>


}
     72a:	8e cd       	rjmp	.-1252   	; 0x248 <main+0x84>

0000072c <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     72c:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     72e:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     730:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     732:	8c e0       	ldi	r24, 0x0C	; 12
     734:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     738:	e9 e6       	ldi	r30, 0x69	; 105
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	80 81       	ld	r24, Z
     73e:	80 62       	ori	r24, 0x20	; 32
     740:	80 83       	st	Z, r24
     742:	80 81       	ld	r24, Z
     744:	8f 7e       	andi	r24, 0xEF	; 239
     746:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     748:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     74a:	78 94       	sei
     74c:	08 95       	ret

0000074e <twi_read_byte>:
}

// TWI: read BYTE, NACK, STOP
unsigned char twi_read_byte(void)
{
    TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, NACK, and wait for another byte
     74e:	84 e8       	ldi	r24, 0x84	; 132
     750:	80 93 bc 00 	sts	0x00BC, r24
    while(!(TWCR & (1<<TWINT))){};  // wait for an interrupt to signal that a new byte is available
     754:	ec eb       	ldi	r30, 0xBC	; 188
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	80 81       	ld	r24, Z
     75a:	88 23       	and	r24, r24
     75c:	ec f7       	brge	.-6      	; 0x758 <twi_read_byte+0xa>
    return TWDR;
     75e:	80 91 bb 00 	lds	r24, 0x00BB
    twi_stop();
}
     762:	08 95       	ret

00000764 <twi_wait_for_ack>:
}

// TWI:  wait for ACK packet (0=fail, 1=success)
unsigned char twi_wait_for_ack(void)
{
	unsigned int wait=0;
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<MAX_WAIT)){};	// wait for acknowledgement that the byte was sent
     768:	ec eb       	ldi	r30, 0xBC	; 188
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	80 81       	ld	r24, Z
     76e:	88 23       	and	r24, r24
     770:	34 f0       	brlt	.+12     	; 0x77e <twi_wait_for_ack+0x1a>
     772:	2f 5f       	subi	r18, 0xFF	; 255
     774:	3f 4f       	sbci	r19, 0xFF	; 255
     776:	29 3e       	cpi	r18, 0xE9	; 233
     778:	83 e0       	ldi	r24, 0x03	; 3
     77a:	38 07       	cpc	r19, r24
     77c:	b9 f7       	brne	.-18     	; 0x76c <twi_wait_for_ack+0x8>
    return (wait==MAX_WAIT? 0 : 1);
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	28 3e       	cpi	r18, 0xE8	; 232
     782:	33 40       	sbci	r19, 0x03	; 3
     784:	09 f4       	brne	.+2      	; 0x788 <twi_wait_for_ack+0x24>
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	08 95       	ret

0000078a <twi_send_byte>:
}

// TWI: send BYTE, wait for ACK
unsigned char twi_send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
     78a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
     78e:	84 e8       	ldi	r24, 0x84	; 132
     790:	80 93 bc 00 	sts	0x00BC, r24
	return (twi_wait_for_ack()) ? (TWSR & 0xF8) : 0 ;
     794:	0e 94 b2 03 	call	0x764	; 0x764 <twi_wait_for_ack>
     798:	88 23       	and	r24, r24
     79a:	19 f0       	breq	.+6      	; 0x7a2 <twi_send_byte+0x18>
     79c:	80 91 b9 00 	lds	r24, 0x00B9
     7a0:	88 7f       	andi	r24, 0xF8	; 248
}
     7a2:	08 95       	ret

000007a4 <twi_start>:
// PRIVATE FUNCTIONS:

// TWI: send START condition, wait for ACK, send ADDRESS with R/W flag
// readwrite = 1 for read, 0 for write
unsigned char twi_start(unsigned char address, unsigned char readwrite)
{
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	c8 2f       	mov	r28, r24
     7aa:	d6 2f       	mov	r29, r22
    unsigned char status;
    
    // START packet:
    TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     7ac:	84 ea       	ldi	r24, 0xA4	; 164
     7ae:	80 93 bc 00 	sts	0x00BC, r24
    if(!twi_wait_for_ack()){
     7b2:	0e 94 b2 03 	call	0x764	; 0x764 <twi_wait_for_ack>
     7b6:	81 11       	cpse	r24, r1
     7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <twi_start+0x1e>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     7ba:	94 e9       	ldi	r25, 0x94	; 148
     7bc:	90 93 bc 00 	sts	0x00BC, r25
     7c0:	1c c0       	rjmp	.+56     	; 0x7fa <twi_start+0x56>
        twi_stop();
        return 0; // COMM failure
    }
    
    // ADDRESS packet:
    if(readwrite)
     7c2:	dd 23       	and	r29, r29
     7c4:	61 f0       	breq	.+24     	; 0x7de <twi_start+0x3a>
    { // READ
        status = twi_send_byte(((address<<1) + 1));
     7c6:	8c 2f       	mov	r24, r28
     7c8:	88 0f       	add	r24, r24
     7ca:	8f 5f       	subi	r24, 0xFF	; 255
     7cc:	0e 94 c5 03 	call	0x78a	; 0x78a <twi_send_byte>
        if(status== 0x48){ // ACK was not received - may not be connected/listening
     7d0:	88 34       	cpi	r24, 0x48	; 72
     7d2:	81 f4       	brne	.+32     	; 0x7f4 <twi_start+0x50>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     7d4:	84 e9       	ldi	r24, 0x94	; 148
     7d6:	80 93 bc 00 	sts	0x00BC, r24
    if(readwrite)
    { // READ
        status = twi_send_byte(((address<<1) + 1));
        if(status== 0x48){ // ACK was not received - may not be connected/listening
            twi_stop();    
            return 0;	// failure
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	0e c0       	rjmp	.+28     	; 0x7fa <twi_start+0x56>
        }	
    } else { // WRITE
        status = twi_send_byte(address<<1);
     7de:	8c 2f       	mov	r24, r28
     7e0:	88 0f       	add	r24, r24
     7e2:	0e 94 c5 03 	call	0x78a	; 0x78a <twi_send_byte>
        if(status== 0x20){ // ACK was not received - may not be connected/listening
     7e6:	80 32       	cpi	r24, 0x20	; 32
     7e8:	39 f4       	brne	.+14     	; 0x7f8 <twi_start+0x54>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     7ea:	84 e9       	ldi	r24, 0x94	; 148
     7ec:	80 93 bc 00 	sts	0x00BC, r24
        }	
    } else { // WRITE
        status = twi_send_byte(address<<1);
        if(status== 0x20){ // ACK was not received - may not be connected/listening
            twi_stop();
            return 0;	// failure
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	03 c0       	rjmp	.+6      	; 0x7fa <twi_start+0x56>
        }	        
    }
    return 1;	// success
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	01 c0       	rjmp	.+2      	; 0x7fa <twi_start+0x56>
     7f8:	81 e0       	ldi	r24, 0x01	; 1
    
}
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <m_read_register>:
	set(EIMSK,INT2); // demask the interrupt
	sei(); // enable global interrupts
}

unsigned char m_read_register(unsigned char addr, unsigned char reg)
{
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	c8 2f       	mov	r28, r24
     806:	d6 2f       	mov	r29, r22
    if(!twi_start(addr,WRITE)) return 0; // START + W
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <twi_start>
     80e:	88 23       	and	r24, r24
     810:	79 f0       	breq	.+30     	; 0x830 <m_read_register+0x30>
	if(!twi_send_byte(reg)) return 0;    // register to read
     812:	8d 2f       	mov	r24, r29
     814:	0e 94 c5 03 	call	0x78a	; 0x78a <twi_send_byte>
     818:	88 23       	and	r24, r24
     81a:	51 f0       	breq	.+20     	; 0x830 <m_read_register+0x30>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     81c:	84 e9       	ldi	r24, 0x94	; 148
     81e:	80 93 bc 00 	sts	0x00BC, r24
unsigned char m_read_register(unsigned char addr, unsigned char reg)
{
    if(!twi_start(addr,WRITE)) return 0; // START + W
	if(!twi_send_byte(reg)) return 0;    // register to read
    twi_stop();                          // STOP
    if(!twi_start(addr,READ)) return 0;  // START + R
     822:	61 e0       	ldi	r22, 0x01	; 1
     824:	8c 2f       	mov	r24, r28
     826:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <twi_start>
     82a:	81 11       	cpse	r24, r1
	return(twi_read_byte());             // return register value
     82c:	0e 94 a7 03 	call	0x74e	; 0x74e <twi_read_byte>
}
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	08 95       	ret

00000836 <m_write_register>:

unsigned char m_write_register(unsigned char addr, unsigned char reg, unsigned char value)
{
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	c6 2f       	mov	r28, r22
     83c:	d4 2f       	mov	r29, r20
    if(!twi_start(addr,WRITE)) return 0; // START + W
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <twi_start>
     844:	88 23       	and	r24, r24
     846:	71 f0       	breq	.+28     	; 0x864 <m_write_register+0x2e>
	if(!twi_send_byte(reg)) return 0;    // register to write to
     848:	8c 2f       	mov	r24, r28
     84a:	0e 94 c5 03 	call	0x78a	; 0x78a <twi_send_byte>
     84e:	88 23       	and	r24, r24
     850:	49 f0       	breq	.+18     	; 0x864 <m_write_register+0x2e>
    if(!twi_send_byte(value)) return 0;  // value
     852:	8d 2f       	mov	r24, r29
     854:	0e 94 c5 03 	call	0x78a	; 0x78a <twi_send_byte>
     858:	88 23       	and	r24, r24
     85a:	21 f0       	breq	.+8      	; 0x864 <m_write_register+0x2e>
}

// TWI: send STOP condition
void twi_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     85c:	84 e9       	ldi	r24, 0x94	; 148
     85e:	80 93 bc 00 	sts	0x00BC, r24
{
    if(!twi_start(addr,WRITE)) return 0; // START + W
	if(!twi_send_byte(reg)) return 0;    // register to write to
    if(!twi_send_byte(value)) return 0;  // value
    twi_stop();                          // STOP
    return(1);
     862:	81 e0       	ldi	r24, 0x01	; 1
}
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <m_imu_init>:
#define MIMU            0x69

// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
     86e:	84 30       	cpi	r24, 0x04	; 4
     870:	08 f0       	brcs	.+2      	; 0x874 <m_imu_init+0xa>
     872:	60 c0       	rjmp	.+192    	; 0x934 <m_imu_init+0xca>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
     874:	64 30       	cpi	r22, 0x04	; 4
     876:	08 f0       	brcs	.+2      	; 0x87a <m_imu_init+0x10>
     878:	5f c0       	rjmp	.+190    	; 0x938 <m_imu_init+0xce>
     87a:	d6 2f       	mov	r29, r22
     87c:	c8 2f       	mov	r28, r24

	m_bus_init();
     87e:	0e 94 96 03 	call	0x72c	; 0x72c <m_bus_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     882:	2f e5       	ldi	r18, 0x5F	; 95
     884:	8a ee       	ldi	r24, 0xEA	; 234
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	21 50       	subi	r18, 0x01	; 1
     88a:	80 40       	sbci	r24, 0x00	; 0
     88c:	90 40       	sbci	r25, 0x00	; 0
     88e:	e1 f7       	brne	.-8      	; 0x888 <m_imu_init+0x1e>
     890:	00 c0       	rjmp	.+0      	; 0x892 <m_imu_init+0x28>
     892:	00 00       	nop
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
     894:	65 e7       	ldi	r22, 0x75	; 117
     896:	89 e6       	ldi	r24, 0x69	; 105
     898:	0e 94 00 04 	call	0x800	; 0x800 <m_read_register>
     89c:	88 36       	cpi	r24, 0x68	; 104
     89e:	09 f0       	breq	.+2      	; 0x8a2 <m_imu_init+0x38>
     8a0:	4d c0       	rjmp	.+154    	; 0x93c <m_imu_init+0xd2>
    
    // SET THE CLOCK SOURCE TO X-AXIS GYRO
    // reg: 0x68 (PWR_MGMT_1)
    // bits 0-2 control clock source
    // value: 0x01 (clock to PLL on X-axis gyro reference)
    m_write_register(MIMU,0x6B,0x01);
     8a2:	41 e0       	ldi	r20, 0x01	; 1
     8a4:	6b e6       	ldi	r22, 0x6B	; 107
     8a6:	89 e6       	ldi	r24, 0x69	; 105
     8a8:	0e 94 1b 04 	call	0x836	; 0x836 <m_write_register>

    // SET THE ACCEL FULL-SCALE +/- RANGE (0=2G, 1=4G, 2=8G, 3=16G)
    // reg: 0x1C (ACCEL_CONFIG)
    // bits: 3-4 set +/- full-scale range
    m_write_register(MIMU,0x1C,accel_scale<<3);
     8ac:	4c 2f       	mov	r20, r28
     8ae:	44 0f       	add	r20, r20
     8b0:	44 0f       	add	r20, r20
     8b2:	44 0f       	add	r20, r20
     8b4:	6c e1       	ldi	r22, 0x1C	; 28
     8b6:	89 e6       	ldi	r24, 0x69	; 105
     8b8:	0e 94 1b 04 	call	0x836	; 0x836 <m_write_register>

    // SET THE GYRO FULL-SCALE +/- RANGE (0=250, 1=500, 2=1000, 3=2000 DEG/SEC)
    // reg: 0x1B (GYRO_CONFIG)
    // bits: 3-4 set +/- full-scale range
    // value: 0x00
    m_write_register(MIMU,0x1B,gyro_scale<<3); // this shouldn't be doing anything
     8bc:	4d 2f       	mov	r20, r29
     8be:	44 0f       	add	r20, r20
     8c0:	44 0f       	add	r20, r20
     8c2:	44 0f       	add	r20, r20
     8c4:	6b e1       	ldi	r22, 0x1B	; 27
     8c6:	89 e6       	ldi	r24, 0x69	; 105
     8c8:	0e 94 1b 04 	call	0x836	; 0x836 <m_write_register>
      
    // SET THE MPU INTO I2C BYPASS MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 1 (1=bypass, 0=normal op)
    m_write_register(MIMU,0x37,0x02); // switch the MPU into bypass mode
     8cc:	42 e0       	ldi	r20, 0x02	; 2
     8ce:	67 e3       	ldi	r22, 0x37	; 55
     8d0:	89 e6       	ldi	r24, 0x69	; 105
     8d2:	0e 94 1b 04 	call	0x836	; 0x836 <m_write_register>
    
    // CONFIGURE THE MAGNETOMETER
    // address: 0x1E (for the magnetometer)
    // reg: 2 (mode register)
    // val: 0 (continuous output)
    m_write_register(0x1E,2,0); // set the mag. to continuous output mode
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	62 e0       	ldi	r22, 0x02	; 2
     8da:	8e e1       	ldi	r24, 0x1E	; 30
     8dc:	0e 94 1b 04 	call	0x836	; 0x836 <m_write_register>
    
    // SET THE MPU TO NORMAL I2C MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 5 (1=master, 0=passthrough)
    m_write_register(MIMU,0x37,0);    // switch the MPU out of bypass mode
     8e0:	40 e0       	ldi	r20, 0x00	; 0
     8e2:	67 e3       	ldi	r22, 0x37	; 55
     8e4:	89 e6       	ldi	r24, 0x69	; 105
     8e6:	0e 94 1b 04 	call	0x836	; 0x836 <m_write_register>
    // SET THE AUXILLIARY I2C SAMPLE RATE
    // reg: 0x34 (I2C_SLC4_CTRL) 
    // value: 0x1E (30 > 8000/30 = 266.6Hz)
    // reg: 0x67 (MST_DELAY_CTRL)
    // bit: 0 (1=slowed down, 0=full speed)
    m_write_register(MIMU,0x34,0x1E);
     8ea:	4e e1       	ldi	r20, 0x1E	; 30
     8ec:	64 e3       	ldi	r22, 0x34	; 52
     8ee:	89 e6       	ldi	r24, 0x69	; 105
     8f0:	0e 94 1b 04 	call	0x836	; 0x836 <m_write_register>
    m_write_register(MIMU,0x67,0x01);
     8f4:	41 e0       	ldi	r20, 0x01	; 1
     8f6:	67 e6       	ldi	r22, 0x67	; 103
     8f8:	89 e6       	ldi	r24, 0x69	; 105
     8fa:	0e 94 1b 04 	call	0x836	; 0x836 <m_write_register>
    // ADJUST the auxilliary I2C port clock speed, etc.
    // reg: 0x24 (MST_CTRL)
    // bit: 4 = 1 (stop then start), 2 (restart)
    // bit: 0-3 = clock prescaler (0x0D = 400kHz)
    // not necessary, perhaps.  We shall see?
    m_write_register(MIMU,0x24,0x1D);
     8fe:	4d e1       	ldi	r20, 0x1D	; 29
     900:	64 e2       	ldi	r22, 0x24	; 36
     902:	89 e6       	ldi	r24, 0x69	; 105
     904:	0e 94 1b 04 	call	0x836	; 0x836 <m_write_register>

    // SET THE MAGNETOMETER ADDRESS
    // reg: 0x25 (I2C_SLC0_ADDR)
    // value: 0x1E (from the magnetometer datasheet)
    // notes: for read from slave, set bit 7 to 1; to write, set bit 7 to 0
    m_write_register(MIMU,0x25,0x9E);
     908:	4e e9       	ldi	r20, 0x9E	; 158
     90a:	65 e2       	ldi	r22, 0x25	; 37
     90c:	89 e6       	ldi	r24, 0x69	; 105
     90e:	0e 94 1b 04 	call	0x836	; 0x836 <m_write_register>

    // SET THE MAGNETOMETER DATA START ADDRESS
    // reg: 0x26 (I2C_SLV0_REG)
    // val: 3 (X high byte)
    m_write_register(MIMU,0x26,3);
     912:	43 e0       	ldi	r20, 0x03	; 3
     914:	66 e2       	ldi	r22, 0x26	; 38
     916:	89 e6       	ldi	r24, 0x69	; 105
     918:	0e 94 1b 04 	call	0x836	; 0x836 <m_write_register>
    // reg: 0x27 (I2C_SLV0_CTRL
    // bit: 0-3 (# of bytes to ingest) = 6
    //      4: byte/word grouping control
    //      6: swap bytes
    //      7: enable slave (1=on, 0=off)
    m_write_register(MIMU,0x27,0x96);
     91c:	46 e9       	ldi	r20, 0x96	; 150
     91e:	67 e2       	ldi	r22, 0x27	; 39
     920:	89 e6       	ldi	r24, 0x69	; 105
     922:	0e 94 1b 04 	call	0x836	; 0x836 <m_write_register>
    
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
     926:	40 e2       	ldi	r20, 0x20	; 32
     928:	6a e6       	ldi	r22, 0x6A	; 106
     92a:	89 e6       	ldi	r24, 0x69	; 105
     92c:	0e 94 1b 04 	call	0x836	; 0x836 <m_write_register>
    
    return 1;   // SUCCESS!
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	05 c0       	rjmp	.+10     	; 0x93e <m_imu_init+0xd4>
// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	03 c0       	rjmp	.+6      	; 0x93e <m_imu_init+0xd4>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	01 c0       	rjmp	.+2      	; 0x93e <m_imu_init+0xd4>

	m_bus_init();
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
     93c:	80 e0       	ldi	r24, 0x00	; 0
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
    
    return 1;   // SUCCESS!
}
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <m_imu_raw>:
// (41:42) TH:TL
// (43:44) GXH:GXL, (45:46) GYH:GYL, (47:48) GZH:GZL
// (49:4A) MXH:MXL, (4B:4C) MYH:MYL, (4D:4E) MZH:MZL

unsigned char m_imu_raw(int* raw_data)
{
     944:	cf 92       	push	r12
     946:	df 92       	push	r13
     948:	ef 92       	push	r14
     94a:	ff 92       	push	r15
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
     956:	64 97       	sbiw	r28, 0x14	; 20
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	de bf       	out	0x3e, r29	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	cd bf       	out	0x3d, r28	; 61
     962:	6c 01       	movw	r12, r24
     964:	ce 01       	movw	r24, r28
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	7c 01       	movw	r14, r24
     96a:	1e e4       	ldi	r17, 0x4E	; 78
    unsigned char buffer[20]; 
    int i;
    
    for(i=0;i<20;i++) // read 20 bytes (6 accel + 2 temp + 6 gyro + 6 mag)
    {
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
     96c:	61 2f       	mov	r22, r17
     96e:	89 e6       	ldi	r24, 0x69	; 105
     970:	0e 94 00 04 	call	0x800	; 0x800 <m_read_register>
     974:	f7 01       	movw	r30, r14
     976:	81 93       	st	Z+, r24
     978:	7f 01       	movw	r14, r30
     97a:	11 50       	subi	r17, 0x01	; 1
unsigned char m_imu_raw(int* raw_data)
{
    unsigned char buffer[20]; 
    int i;
    
    for(i=0;i<20;i++) // read 20 bytes (6 accel + 2 temp + 6 gyro + 6 mag)
     97c:	1a 33       	cpi	r17, 0x3A	; 58
     97e:	b1 f7       	brne	.-20     	; 0x96c <m_imu_raw+0x28>
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH, GZL, GZH, GYL, GYH, GXL, GXH, TL, TH, AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[14+2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
     980:	8f 85       	ldd	r24, Y+15	; 0x0f
     982:	98 89       	ldd	r25, Y+16	; 0x10
     984:	f6 01       	movw	r30, r12
     986:	95 83       	std	Z+5, r25	; 0x05
     988:	84 83       	std	Z+4, r24	; 0x04
        raw_data[5-i] = *(int*)&buffer[6+2*i];  // [5] = [GZL:GZH], [4] = [GYL:GYH], [3] = [GXL:GXH]
     98a:	8f 81       	ldd	r24, Y+7	; 0x07
     98c:	98 85       	ldd	r25, Y+8	; 0x08
     98e:	93 87       	std	Z+11, r25	; 0x0b
     990:	82 87       	std	Z+10, r24	; 0x0a
        raw_data[8-i] = *(int*)&buffer[2*i];    // [8] = [MZL:MZH], [7] = [MYL:MYH], [6] = [MXL:MXH]
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	9a 81       	ldd	r25, Y+2	; 0x02
     996:	91 8b       	std	Z+17, r25	; 0x11
     998:	80 8b       	std	Z+16, r24	; 0x10
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH, GZL, GZH, GYL, GYH, GXL, GXH, TL, TH, AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[14+2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
     99a:	89 89       	ldd	r24, Y+17	; 0x11
     99c:	9a 89       	ldd	r25, Y+18	; 0x12
     99e:	93 83       	std	Z+3, r25	; 0x03
     9a0:	82 83       	std	Z+2, r24	; 0x02
        raw_data[5-i] = *(int*)&buffer[6+2*i];  // [5] = [GZL:GZH], [4] = [GYL:GYH], [3] = [GXL:GXH]
     9a2:	89 85       	ldd	r24, Y+9	; 0x09
     9a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     9a6:	91 87       	std	Z+9, r25	; 0x09
     9a8:	80 87       	std	Z+8, r24	; 0x08
        raw_data[8-i] = *(int*)&buffer[2*i];    // [8] = [MZL:MZH], [7] = [MYL:MYH], [6] = [MXL:MXH]
     9aa:	8b 81       	ldd	r24, Y+3	; 0x03
     9ac:	9c 81       	ldd	r25, Y+4	; 0x04
     9ae:	97 87       	std	Z+15, r25	; 0x0f
     9b0:	86 87       	std	Z+14, r24	; 0x0e
        buffer[i] = m_read_register(MIMU, (0x4E - i) ); // go in reverse to get L:H order
    }
    // buffer: [MZL, MZH, MYL, MYH, MXL, MXH, GZL, GZH, GYL, GYH, GXL, GXH, TL, TH, AZL, AZH, AYL, AYH, AXL, AXH]
    for(i=0;i<3;i++)
    {
        raw_data[2-i] = *(int*)&buffer[14+2*i]; // [2] = [AZL:AZH], [1] = [AYL:AYH], [0] = [AXL:AXH]
     9b2:	8b 89       	ldd	r24, Y+19	; 0x13
     9b4:	9c 89       	ldd	r25, Y+20	; 0x14
     9b6:	91 83       	std	Z+1, r25	; 0x01
     9b8:	80 83       	st	Z, r24
        raw_data[5-i] = *(int*)&buffer[6+2*i];  // [5] = [GZL:GZH], [4] = [GYL:GYH], [3] = [GXL:GXH]
     9ba:	8b 85       	ldd	r24, Y+11	; 0x0b
     9bc:	9c 85       	ldd	r25, Y+12	; 0x0c
     9be:	97 83       	std	Z+7, r25	; 0x07
     9c0:	86 83       	std	Z+6, r24	; 0x06
        raw_data[8-i] = *(int*)&buffer[2*i];    // [8] = [MZL:MZH], [7] = [MYL:MYH], [6] = [MXL:MXH]
     9c2:	8d 81       	ldd	r24, Y+5	; 0x05
     9c4:	9e 81       	ldd	r25, Y+6	; 0x06
     9c6:	95 87       	std	Z+13, r25	; 0x0d
     9c8:	84 87       	std	Z+12, r24	; 0x0c
    }
    return 1;
}
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	64 96       	adiw	r28, 0x14	; 20
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	de bf       	out	0x3e, r29	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	cd bf       	out	0x3d, r28	; 61
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	ff 90       	pop	r15
     9e0:	ef 90       	pop	r14
     9e2:	df 90       	pop	r13
     9e4:	cf 90       	pop	r12
     9e6:	08 95       	ret

000009e8 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
     9ee:	80 ea       	ldi	r24, 0xA0	; 160
     9f0:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     9f4:	82 e1       	ldi	r24, 0x12	; 18
     9f6:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     9f8:	09 b4       	in	r0, 0x29	; 41
     9fa:	00 fe       	sbrs	r0, 0
     9fc:	fd cf       	rjmp	.-6      	; 0x9f8 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
     9fe:	80 e9       	ldi	r24, 0x90	; 144
     a00:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     a04:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     a08:	10 92 4b 01 	sts	0x014B, r1
	cdc_line_rtsdtr = 0;
     a0c:	10 92 48 01 	sts	0x0148, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     a10:	8c e0       	ldi	r24, 0x0C	; 12
     a12:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     a16:	78 94       	sei
     a18:	08 95       	ret

00000a1a <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     a1e:	90 91 4b 01 	lds	r25, 0x014B
     a22:	99 23       	and	r25, r25
     a24:	09 f4       	brne	.+2      	; 0xa28 <m_usb_tx_char+0xe>
     a26:	4c c0       	rjmp	.+152    	; 0xac0 <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     a28:	9f b7       	in	r25, 0x3f	; 63
	cli();
     a2a:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     a2c:	24 e0       	ldi	r18, 0x04	; 4
     a2e:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     a32:	20 91 49 01 	lds	r18, 0x0149
     a36:	22 23       	and	r18, r18
     a38:	49 f0       	breq	.+18     	; 0xa4c <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
     a3a:	20 91 e8 00 	lds	r18, 0x00E8
     a3e:	25 fd       	sbrc	r18, 5
     a40:	03 c0       	rjmp	.+6      	; 0xa48 <m_usb_tx_char+0x2e>
			SREG = intr_state;
     a42:	9f bf       	out	0x3f, r25	; 63
			return -1;
     a44:	8f ef       	ldi	r24, 0xFF	; 255
     a46:	41 c0       	rjmp	.+130    	; 0xaca <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
     a48:	10 92 49 01 	sts	0x0149, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     a4c:	30 91 e4 00 	lds	r19, 0x00E4
     a50:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     a52:	20 91 e8 00 	lds	r18, 0x00E8
     a56:	25 fd       	sbrc	r18, 5
     a58:	24 c0       	rjmp	.+72     	; 0xaa2 <m_usb_tx_char+0x88>
		SREG = intr_state;
     a5a:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     a5c:	90 91 e4 00 	lds	r25, 0x00E4
     a60:	93 17       	cp	r25, r19
     a62:	81 f0       	breq	.+32     	; 0xa84 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     a64:	90 91 4b 01 	lds	r25, 0x014B
     a68:	99 23       	and	r25, r25
     a6a:	61 f1       	breq	.+88     	; 0xac4 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
     a6c:	a9 ee       	ldi	r26, 0xE9	; 233
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     a72:	e8 ee       	ldi	r30, 0xE8	; 232
     a74:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     a76:	c4 ee       	ldi	r28, 0xE4	; 228
     a78:	d0 e0       	ldi	r29, 0x00	; 0
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
     a7c:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     a7e:	98 81       	ld	r25, Y
     a80:	93 13       	cpse	r25, r19
     a82:	05 c0       	rjmp	.+10     	; 0xa8e <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	80 93 49 01 	sts	0x0149, r24
			return -1;
     a8a:	8f ef       	ldi	r24, 0xFF	; 255
     a8c:	1e c0       	rjmp	.+60     	; 0xaca <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     a8e:	90 91 4b 01 	lds	r25, 0x014B
     a92:	99 23       	and	r25, r25
     a94:	c9 f0       	breq	.+50     	; 0xac8 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
     a96:	9f b7       	in	r25, 0x3f	; 63
		cli();
     a98:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     a9a:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     a9c:	20 81       	ld	r18, Z
     a9e:	25 ff       	sbrs	r18, 5
     aa0:	ed cf       	rjmp	.-38     	; 0xa7c <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
     aa2:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     aa6:	80 91 e8 00 	lds	r24, 0x00E8
     aaa:	85 fd       	sbrc	r24, 5
     aac:	03 c0       	rjmp	.+6      	; 0xab4 <m_usb_tx_char+0x9a>
     aae:	8a e3       	ldi	r24, 0x3A	; 58
     ab0:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     ab4:	85 e0       	ldi	r24, 0x05	; 5
     ab6:	80 93 4a 01 	sts	0x014A, r24
	SREG = intr_state;
     aba:	9f bf       	out	0x3f, r25	; 63
	return 0;
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	05 c0       	rjmp	.+10     	; 0xaca <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     ac0:	8f ef       	ldi	r24, 0xFF	; 255
     ac2:	03 c0       	rjmp	.+6      	; 0xaca <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     ac4:	8f ef       	ldi	r24, 0xFF	; 255
     ac6:	01 c0       	rjmp	.+2      	; 0xaca <m_usb_tx_char+0xb0>
     ac8:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	08 95       	ret

00000ad0 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
     ad0:	1f 92       	push	r1
     ad2:	0f 92       	push	r0
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	0f 92       	push	r0
     ad8:	11 24       	eor	r1, r1
     ada:	8f 93       	push	r24
     adc:	9f 93       	push	r25
     ade:	ef 93       	push	r30
     ae0:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
     ae2:	e1 ee       	ldi	r30, 0xE1	; 225
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
        UDINT = 0;
     ae8:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
     aea:	83 ff       	sbrs	r24, 3
     aec:	11 c0       	rjmp	.+34     	; 0xb10 <__stack+0x11>
		UENUM = 0;
     aee:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
     af8:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
     afc:	92 e1       	ldi	r25, 0x12	; 18
     afe:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
     b02:	98 e0       	ldi	r25, 0x08	; 8
     b04:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
     b08:	10 92 4b 01 	sts	0x014B, r1
		cdc_line_rtsdtr = 0;
     b0c:	10 92 48 01 	sts	0x0148, r1
        }
	if (intbits & (1<<SOFI)) {
     b10:	82 ff       	sbrs	r24, 2
     b12:	13 c0       	rjmp	.+38     	; 0xb3a <__stack+0x3b>
		if (usb_configuration) {
     b14:	80 91 4b 01 	lds	r24, 0x014B
     b18:	88 23       	and	r24, r24
     b1a:	79 f0       	breq	.+30     	; 0xb3a <__stack+0x3b>
			t = transmit_flush_timer;
     b1c:	80 91 4a 01 	lds	r24, 0x014A
			if (t) {
     b20:	88 23       	and	r24, r24
     b22:	59 f0       	breq	.+22     	; 0xb3a <__stack+0x3b>
				transmit_flush_timer = --t;
     b24:	81 50       	subi	r24, 0x01	; 1
     b26:	80 93 4a 01 	sts	0x014A, r24
				if (!t) {
     b2a:	81 11       	cpse	r24, r1
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <__stack+0x3b>
					UENUM = CDC_TX_ENDPOINT;
     b2e:	84 e0       	ldi	r24, 0x04	; 4
     b30:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
     b34:	8a e3       	ldi	r24, 0x3A	; 58
     b36:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
     b3a:	ff 91       	pop	r31
     b3c:	ef 91       	pop	r30
     b3e:	9f 91       	pop	r25
     b40:	8f 91       	pop	r24
     b42:	0f 90       	pop	r0
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	0f 90       	pop	r0
     b48:	1f 90       	pop	r1
     b4a:	18 95       	reti

00000b4c <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
     b4c:	1f 92       	push	r1
     b4e:	0f 92       	push	r0
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	0f 92       	push	r0
     b54:	11 24       	eor	r1, r1
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	2f 93       	push	r18
     b5c:	3f 93       	push	r19
     b5e:	4f 93       	push	r20
     b60:	5f 93       	push	r21
     b62:	6f 93       	push	r22
     b64:	7f 93       	push	r23
     b66:	8f 93       	push	r24
     b68:	9f 93       	push	r25
     b6a:	af 93       	push	r26
     b6c:	bf 93       	push	r27
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	ef 93       	push	r30
     b74:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
     b76:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
     b7a:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
     b7e:	83 ff       	sbrs	r24, 3
     b80:	4c c1       	rjmp	.+664    	; 0xe1a <__vector_11+0x2ce>
                bmRequestType = UEDATX;
     b82:	e1 ef       	ldi	r30, 0xF1	; 241
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	60 81       	ld	r22, Z
                bRequest = UEDATX;
     b88:	80 81       	ld	r24, Z
                wValue = UEDATX;
     b8a:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
     b8c:	90 81       	ld	r25, Z
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	39 2b       	or	r19, r25
                wIndex = UEDATX;
     b92:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
     b94:	90 81       	ld	r25, Z
     b96:	50 e0       	ldi	r21, 0x00	; 0
     b98:	59 2b       	or	r21, r25
                wLength = UEDATX;
     b9a:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
     b9c:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
     b9e:	92 ef       	ldi	r25, 0xF2	; 242
     ba0:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
     ba4:	86 30       	cpi	r24, 0x06	; 6
     ba6:	09 f0       	breq	.+2      	; 0xbaa <__vector_11+0x5e>
     ba8:	58 c0       	rjmp	.+176    	; 0xc5a <__vector_11+0x10e>
     baa:	04 c0       	rjmp	.+8      	; 0xbb4 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
     bac:	81 e2       	ldi	r24, 0x21	; 33
     bae:	80 93 eb 00 	sts	0x00EB, r24
					return;
     bb2:	3a c1       	rjmp	.+628    	; 0xe28 <__vector_11+0x2dc>
     bb4:	66 e0       	ldi	r22, 0x06	; 6
     bb6:	83 ed       	ldi	r24, 0xD3	; 211
     bb8:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
     bba:	fc 01       	movw	r30, r24
     bbc:	a5 91       	lpm	r26, Z+
     bbe:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
     bc0:	2a 17       	cp	r18, r26
     bc2:	3b 07       	cpc	r19, r27
     bc4:	11 f0       	breq	.+4      	; 0xbca <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
     bc6:	07 96       	adiw	r24, 0x07	; 7
					continue;
     bc8:	23 c0       	rjmp	.+70     	; 0xc10 <__vector_11+0xc4>
				}
				list += 2;
     bca:	fc 01       	movw	r30, r24
     bcc:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
     bce:	a5 91       	lpm	r26, Z+
     bd0:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
     bd2:	4a 17       	cp	r20, r26
     bd4:	5b 07       	cpc	r21, r27
     bd6:	11 f0       	breq	.+4      	; 0xbdc <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
     bd8:	07 96       	adiw	r24, 0x07	; 7
					continue;
     bda:	1a c0       	rjmp	.+52     	; 0xc10 <__vector_11+0xc4>
				}
				list += 2;
     bdc:	fc 01       	movw	r30, r24
     bde:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
     be0:	45 91       	lpm	r20, Z+
     be2:	54 91       	lpm	r21, Z
				list += 2;
     be4:	fc 01       	movw	r30, r24
     be6:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
     be8:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
     bea:	87 2f       	mov	r24, r23
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
     bf0:	8f 3f       	cpi	r24, 0xFF	; 255
     bf2:	91 05       	cpc	r25, r1
     bf4:	19 f0       	breq	.+6      	; 0xbfc <__vector_11+0xb0>
     bf6:	10 f0       	brcs	.+4      	; 0xbfc <__vector_11+0xb0>
     bf8:	8f ef       	ldi	r24, 0xFF	; 255
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	82 17       	cp	r24, r18
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__vector_11+0xb6>
     c00:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     c02:	a8 ee       	ldi	r26, 0xE8	; 232
     c04:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     c06:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     c08:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
     c0a:	c1 ef       	ldi	r28, 0xF1	; 241
     c0c:	d0 e0       	ldi	r29, 0x00	; 0
     c0e:	03 c0       	rjmp	.+6      	; 0xc16 <__vector_11+0xca>
     c10:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
     c12:	99 f6       	brne	.-90     	; 0xbba <__vector_11+0x6e>
     c14:	cb cf       	rjmp	.-106    	; 0xbac <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     c16:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
     c18:	98 2f       	mov	r25, r24
     c1a:	95 70       	andi	r25, 0x05	; 5
     c1c:	e1 f3       	breq	.-8      	; 0xc16 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
     c1e:	82 fd       	sbrc	r24, 2
     c20:	03 c1       	rjmp	.+518    	; 0xe28 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     c22:	32 2f       	mov	r19, r18
     c24:	21 31       	cpi	r18, 0x11	; 17
     c26:	08 f0       	brcs	.+2      	; 0xc2a <__vector_11+0xde>
     c28:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
     c2a:	33 23       	and	r19, r19
     c2c:	09 f4       	brne	.+2      	; 0xc30 <__vector_11+0xe4>
     c2e:	f9 c0       	rjmp	.+498    	; 0xe22 <__vector_11+0x2d6>
     c30:	fa 01       	movw	r30, r20
     c32:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
     c34:	94 91       	lpm	r25, Z
     c36:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
     c38:	81 50       	subi	r24, 0x01	; 1
     c3a:	31 96       	adiw	r30, 0x01	; 1
     c3c:	81 11       	cpse	r24, r1
     c3e:	fa cf       	rjmp	.-12     	; 0xc34 <__vector_11+0xe8>
     c40:	8f ef       	ldi	r24, 0xFF	; 255
     c42:	83 0f       	add	r24, r19
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	48 0f       	add	r20, r24
     c4a:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
     c4c:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     c4e:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     c50:	21 11       	cpse	r18, r1
     c52:	e1 cf       	rjmp	.-62     	; 0xc16 <__vector_11+0xca>
     c54:	30 31       	cpi	r19, 0x10	; 16
     c56:	f9 f2       	breq	.-66     	; 0xc16 <__vector_11+0xca>
     c58:	e7 c0       	rjmp	.+462    	; 0xe28 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
     c5a:	85 30       	cpi	r24, 0x05	; 5
     c5c:	61 f4       	brne	.+24     	; 0xc76 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     c5e:	8e ef       	ldi	r24, 0xFE	; 254
     c60:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     c64:	e8 ee       	ldi	r30, 0xE8	; 232
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	80 ff       	sbrs	r24, 0
     c6c:	fd cf       	rjmp	.-6      	; 0xc68 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
     c6e:	20 68       	ori	r18, 0x80	; 128
     c70:	20 93 e3 00 	sts	0x00E3, r18
			return;
     c74:	d9 c0       	rjmp	.+434    	; 0xe28 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
     c76:	89 30       	cpi	r24, 0x09	; 9
     c78:	09 f0       	breq	.+2      	; 0xc7c <__vector_11+0x130>
     c7a:	35 c0       	rjmp	.+106    	; 0xce6 <__vector_11+0x19a>
     c7c:	61 11       	cpse	r22, r1
     c7e:	cd c0       	rjmp	.+410    	; 0xe1a <__vector_11+0x2ce>
			usb_configuration = wValue;
     c80:	20 93 4b 01 	sts	0x014B, r18
			cdc_line_rtsdtr = 0;
     c84:	10 92 48 01 	sts	0x0148, r1
			transmit_flush_timer = 0;
     c88:	10 92 4a 01 	sts	0x014A, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     c8c:	8e ef       	ldi	r24, 0xFE	; 254
     c8e:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     c92:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
     c94:	2c e7       	ldi	r18, 0x7C	; 124
     c96:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
     c98:	c9 ee       	ldi	r28, 0xE9	; 233
     c9a:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
     c9c:	ab ee       	ldi	r26, 0xEB	; 235
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
     ca0:	0c ee       	ldi	r16, 0xEC	; 236
     ca2:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
     ca4:	6d ee       	ldi	r22, 0xED	; 237
     ca6:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
     ca8:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
     caa:	a9 01       	movw	r20, r18
     cac:	4f 5f       	subi	r20, 0xFF	; 255
     cae:	5f 4f       	sbci	r21, 0xFF	; 255
     cb0:	f9 01       	movw	r30, r18
     cb2:	94 91       	lpm	r25, Z
				UECONX = en;
     cb4:	9c 93       	st	X, r25
				if (en) {
     cb6:	99 23       	and	r25, r25
     cb8:	61 f0       	breq	.+24     	; 0xcd2 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
     cba:	fa 01       	movw	r30, r20
     cbc:	44 91       	lpm	r20, Z
     cbe:	f8 01       	movw	r30, r16
     cc0:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
     cc2:	f9 01       	movw	r30, r18
     cc4:	32 96       	adiw	r30, 0x02	; 2
     cc6:	94 91       	lpm	r25, Z
     cc8:	2d 5f       	subi	r18, 0xFD	; 253
     cca:	3f 4f       	sbci	r19, 0xFF	; 255
     ccc:	fb 01       	movw	r30, r22
     cce:	90 83       	st	Z, r25
     cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
     cd2:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     cd4:	8f 5f       	subi	r24, 0xFF	; 255
     cd6:	85 30       	cpi	r24, 0x05	; 5
     cd8:	39 f7       	brne	.-50     	; 0xca8 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
     cda:	ea ee       	ldi	r30, 0xEA	; 234
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	8e e1       	ldi	r24, 0x1E	; 30
     ce0:	80 83       	st	Z, r24
        		UERST = 0;
     ce2:	10 82       	st	Z, r1
			return;
     ce4:	a1 c0       	rjmp	.+322    	; 0xe28 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
     ce6:	88 30       	cpi	r24, 0x08	; 8
     ce8:	81 f4       	brne	.+32     	; 0xd0a <__vector_11+0x1be>
     cea:	60 38       	cpi	r22, 0x80	; 128
     cec:	09 f0       	breq	.+2      	; 0xcf0 <__vector_11+0x1a4>
     cee:	95 c0       	rjmp	.+298    	; 0xe1a <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     cf0:	e8 ee       	ldi	r30, 0xE8	; 232
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	80 ff       	sbrs	r24, 0
     cf8:	fd cf       	rjmp	.-6      	; 0xcf4 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
     cfa:	80 91 4b 01 	lds	r24, 0x014B
     cfe:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     d02:	8e ef       	ldi	r24, 0xFE	; 254
     d04:	80 93 e8 00 	sts	0x00E8, r24
     d08:	8f c0       	rjmp	.+286    	; 0xe28 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
     d0a:	81 32       	cpi	r24, 0x21	; 33
     d0c:	b9 f4       	brne	.+46     	; 0xd3c <__vector_11+0x1f0>
     d0e:	61 3a       	cpi	r22, 0xA1	; 161
     d10:	09 f0       	breq	.+2      	; 0xd14 <__vector_11+0x1c8>
     d12:	83 c0       	rjmp	.+262    	; 0xe1a <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     d14:	e8 ee       	ldi	r30, 0xE8	; 232
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	80 ff       	sbrs	r24, 0
     d1c:	fd cf       	rjmp	.-6      	; 0xd18 <__vector_11+0x1cc>
     d1e:	ec e0       	ldi	r30, 0x0C	; 12
     d20:	f1 e0       	ldi	r31, 0x01	; 1
     d22:	23 e1       	ldi	r18, 0x13	; 19
     d24:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
     d26:	a1 ef       	ldi	r26, 0xF1	; 241
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	81 91       	ld	r24, Z+
     d2c:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     d2e:	e2 17       	cp	r30, r18
     d30:	f3 07       	cpc	r31, r19
     d32:	d9 f7       	brne	.-10     	; 0xd2a <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     d34:	8e ef       	ldi	r24, 0xFE	; 254
     d36:	80 93 e8 00 	sts	0x00E8, r24
     d3a:	76 c0       	rjmp	.+236    	; 0xe28 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
     d3c:	80 32       	cpi	r24, 0x20	; 32
     d3e:	d1 f4       	brne	.+52     	; 0xd74 <__vector_11+0x228>
     d40:	61 32       	cpi	r22, 0x21	; 33
     d42:	09 f0       	breq	.+2      	; 0xd46 <__vector_11+0x1fa>
     d44:	6a c0       	rjmp	.+212    	; 0xe1a <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
     d46:	e8 ee       	ldi	r30, 0xE8	; 232
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	82 ff       	sbrs	r24, 2
     d4e:	fd cf       	rjmp	.-6      	; 0xd4a <__vector_11+0x1fe>
     d50:	ec e0       	ldi	r30, 0x0C	; 12
     d52:	f1 e0       	ldi	r31, 0x01	; 1
     d54:	23 e1       	ldi	r18, 0x13	; 19
     d56:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
     d58:	a1 ef       	ldi	r26, 0xF1	; 241
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	8c 91       	ld	r24, X
     d5e:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     d60:	e2 17       	cp	r30, r18
     d62:	f3 07       	cpc	r31, r19
     d64:	d9 f7       	brne	.-10     	; 0xd5c <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
     d66:	e8 ee       	ldi	r30, 0xE8	; 232
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	8b ef       	ldi	r24, 0xFB	; 251
     d6c:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     d6e:	8e ef       	ldi	r24, 0xFE	; 254
     d70:	80 83       	st	Z, r24
     d72:	5a c0       	rjmp	.+180    	; 0xe28 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
     d74:	82 32       	cpi	r24, 0x22	; 34
     d76:	71 f4       	brne	.+28     	; 0xd94 <__vector_11+0x248>
     d78:	61 32       	cpi	r22, 0x21	; 33
     d7a:	09 f0       	breq	.+2      	; 0xd7e <__vector_11+0x232>
     d7c:	4e c0       	rjmp	.+156    	; 0xe1a <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
     d7e:	20 93 48 01 	sts	0x0148, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     d82:	e8 ee       	ldi	r30, 0xE8	; 232
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	80 ff       	sbrs	r24, 0
     d8a:	fd cf       	rjmp	.-6      	; 0xd86 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     d8c:	8e ef       	ldi	r24, 0xFE	; 254
     d8e:	80 93 e8 00 	sts	0x00E8, r24
     d92:	4a c0       	rjmp	.+148    	; 0xe28 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
     d94:	81 11       	cpse	r24, r1
     d96:	1a c0       	rjmp	.+52     	; 0xdcc <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     d98:	e8 ee       	ldi	r30, 0xE8	; 232
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	80 ff       	sbrs	r24, 0
     da0:	fd cf       	rjmp	.-6      	; 0xd9c <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
     da2:	62 38       	cpi	r22, 0x82	; 130
     da4:	51 f4       	brne	.+20     	; 0xdba <__vector_11+0x26e>
				UENUM = wIndex;
     da6:	e9 ee       	ldi	r30, 0xE9	; 233
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
     dac:	80 91 eb 00 	lds	r24, 0x00EB
     db0:	85 fb       	bst	r24, 5
     db2:	88 27       	eor	r24, r24
     db4:	80 f9       	bld	r24, 0
				UENUM = 0;
     db6:	10 82       	st	Z, r1
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
     dba:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
     dbc:	e1 ef       	ldi	r30, 0xF1	; 241
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 83       	st	Z, r24
			UEDATX = 0;
     dc2:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     dc4:	8e ef       	ldi	r24, 0xFE	; 254
     dc6:	80 93 e8 00 	sts	0x00E8, r24
     dca:	2e c0       	rjmp	.+92     	; 0xe28 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
     dcc:	98 2f       	mov	r25, r24
     dce:	9d 7f       	andi	r25, 0xFD	; 253
     dd0:	91 30       	cpi	r25, 0x01	; 1
     dd2:	19 f5       	brne	.+70     	; 0xe1a <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
     dd4:	62 30       	cpi	r22, 0x02	; 2
     dd6:	09 f5       	brne	.+66     	; 0xe1a <__vector_11+0x2ce>
     dd8:	23 2b       	or	r18, r19
     dda:	f9 f4       	brne	.+62     	; 0xe1a <__vector_11+0x2ce>
			i = wIndex & 0x7F;
     ddc:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
     dde:	9f ef       	ldi	r25, 0xFF	; 255
     de0:	94 0f       	add	r25, r20
     de2:	94 30       	cpi	r25, 0x04	; 4
     de4:	d0 f4       	brcc	.+52     	; 0xe1a <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     de6:	9e ef       	ldi	r25, 0xFE	; 254
     de8:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
     dec:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
     df0:	83 30       	cpi	r24, 0x03	; 3
     df2:	21 f4       	brne	.+8      	; 0xdfc <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
     df4:	81 e2       	ldi	r24, 0x21	; 33
     df6:	80 93 eb 00 	sts	0x00EB, r24
     dfa:	16 c0       	rjmp	.+44     	; 0xe28 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
     dfc:	89 e1       	ldi	r24, 0x19	; 25
     dfe:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <__vector_11+0x2c0>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	4a 95       	dec	r20
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <__vector_11+0x2bc>
     e10:	ea ee       	ldi	r30, 0xEA	; 234
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 83       	st	Z, r24
					UERST = 0;
     e16:	10 82       	st	Z, r1
     e18:	07 c0       	rjmp	.+14     	; 0xe28 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
     e1a:	81 e2       	ldi	r24, 0x21	; 33
     e1c:	80 93 eb 00 	sts	0x00EB, r24
     e20:	03 c0       	rjmp	.+6      	; 0xe28 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     e22:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     e24:	21 11       	cpse	r18, r1
     e26:	f7 ce       	rjmp	.-530    	; 0xc16 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
     e28:	ff 91       	pop	r31
     e2a:	ef 91       	pop	r30
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	bf 91       	pop	r27
     e32:	af 91       	pop	r26
     e34:	9f 91       	pop	r25
     e36:	8f 91       	pop	r24
     e38:	7f 91       	pop	r23
     e3a:	6f 91       	pop	r22
     e3c:	5f 91       	pop	r21
     e3e:	4f 91       	pop	r20
     e40:	3f 91       	pop	r19
     e42:	2f 91       	pop	r18
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	0f 90       	pop	r0
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	0f 90       	pop	r0
     e4e:	1f 90       	pop	r1
     e50:	18 95       	reti

00000e52 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
     e58:	8c 01       	movw	r16, r24
     e5a:	0f 5f       	subi	r16, 0xFF	; 255
     e5c:	1f 4f       	sbci	r17, 0xFF	; 255
     e5e:	fc 01       	movw	r30, r24
     e60:	c4 91       	lpm	r28, Z
		if (!c) break;
     e62:	cc 23       	and	r28, r28
     e64:	71 f0       	breq	.+28     	; 0xe82 <print_P+0x30>
		if (c == '\n') usb_tx_char('\r');
     e66:	ca 30       	cpi	r28, 0x0A	; 10
     e68:	19 f4       	brne	.+6      	; 0xe70 <print_P+0x1e>
     e6a:	8d e0       	ldi	r24, 0x0D	; 13
     e6c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <m_usb_tx_char>
		usb_tx_char(c);
     e70:	8c 2f       	mov	r24, r28
     e72:	0e 94 0d 05 	call	0xa1a	; 0xa1a <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
     e76:	f8 01       	movw	r30, r16
     e78:	c4 91       	lpm	r28, Z
     e7a:	0f 5f       	subi	r16, 0xFF	; 255
     e7c:	1f 4f       	sbci	r17, 0xFF	; 255
		if (!c) break;
     e7e:	c1 11       	cpse	r28, r1
     e80:	f2 cf       	rjmp	.-28     	; 0xe66 <print_P+0x14>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
     e82:	cf 91       	pop	r28
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	08 95       	ret

00000e8a <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
     e8a:	ef 92       	push	r14
     e8c:	ff 92       	push	r15
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	27 97       	sbiw	r28, 0x07	; 7
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
     ea6:	8e 01       	movw	r16, r28
     ea8:	0f 5f       	subi	r16, 0xFF	; 255
     eaa:	1f 4f       	sbci	r17, 0xFF	; 255
     eac:	27 e0       	ldi	r18, 0x07	; 7
     eae:	f8 01       	movw	r30, r16
     eb0:	11 92       	st	Z+, r1
     eb2:	2a 95       	dec	r18
     eb4:	e9 f7       	brne	.-6      	; 0xeb0 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     eb6:	4a e0       	ldi	r20, 0x0A	; 10
     eb8:	b8 01       	movw	r22, r16
     eba:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__itoa_ncheck>
     ebe:	7e 01       	movw	r14, r28
     ec0:	f8 e0       	ldi	r31, 0x08	; 8
     ec2:	ef 0e       	add	r14, r31
     ec4:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
     ec6:	f8 01       	movw	r30, r16
     ec8:	81 91       	ld	r24, Z+
     eca:	8f 01       	movw	r16, r30
     ecc:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
     ece:	0e 94 0d 05 	call	0xa1a	; 0xa1a <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
     ed2:	0e 15       	cp	r16, r14
     ed4:	1f 05       	cpc	r17, r15
     ed6:	b9 f7       	brne	.-18     	; 0xec6 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
     ed8:	27 96       	adiw	r28, 0x07	; 7
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	de bf       	out	0x3e, r29	; 62
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	cd bf       	out	0x3d, r28	; 61
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	ff 90       	pop	r15
     eee:	ef 90       	pop	r14
     ef0:	08 95       	ret

00000ef2 <__subsf3>:
     ef2:	50 58       	subi	r21, 0x80	; 128

00000ef4 <__addsf3>:
     ef4:	bb 27       	eor	r27, r27
     ef6:	aa 27       	eor	r26, r26
     ef8:	0e 94 91 07 	call	0xf22	; 0xf22 <__addsf3x>
     efc:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__fp_round>
     f00:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__fp_pscA>
     f04:	38 f0       	brcs	.+14     	; 0xf14 <__addsf3+0x20>
     f06:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__fp_pscB>
     f0a:	20 f0       	brcs	.+8      	; 0xf14 <__addsf3+0x20>
     f0c:	39 f4       	brne	.+14     	; 0xf1c <__addsf3+0x28>
     f0e:	9f 3f       	cpi	r25, 0xFF	; 255
     f10:	19 f4       	brne	.+6      	; 0xf18 <__addsf3+0x24>
     f12:	26 f4       	brtc	.+8      	; 0xf1c <__addsf3+0x28>
     f14:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__fp_nan>
     f18:	0e f4       	brtc	.+2      	; 0xf1c <__addsf3+0x28>
     f1a:	e0 95       	com	r30
     f1c:	e7 fb       	bst	r30, 7
     f1e:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__fp_inf>

00000f22 <__addsf3x>:
     f22:	e9 2f       	mov	r30, r25
     f24:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__fp_split3>
     f28:	58 f3       	brcs	.-42     	; 0xf00 <__addsf3+0xc>
     f2a:	ba 17       	cp	r27, r26
     f2c:	62 07       	cpc	r22, r18
     f2e:	73 07       	cpc	r23, r19
     f30:	84 07       	cpc	r24, r20
     f32:	95 07       	cpc	r25, r21
     f34:	20 f0       	brcs	.+8      	; 0xf3e <__addsf3x+0x1c>
     f36:	79 f4       	brne	.+30     	; 0xf56 <__addsf3x+0x34>
     f38:	a6 f5       	brtc	.+104    	; 0xfa2 <__addsf3x+0x80>
     f3a:	0c 94 15 09 	jmp	0x122a	; 0x122a <__fp_zero>
     f3e:	0e f4       	brtc	.+2      	; 0xf42 <__addsf3x+0x20>
     f40:	e0 95       	com	r30
     f42:	0b 2e       	mov	r0, r27
     f44:	ba 2f       	mov	r27, r26
     f46:	a0 2d       	mov	r26, r0
     f48:	0b 01       	movw	r0, r22
     f4a:	b9 01       	movw	r22, r18
     f4c:	90 01       	movw	r18, r0
     f4e:	0c 01       	movw	r0, r24
     f50:	ca 01       	movw	r24, r20
     f52:	a0 01       	movw	r20, r0
     f54:	11 24       	eor	r1, r1
     f56:	ff 27       	eor	r31, r31
     f58:	59 1b       	sub	r21, r25
     f5a:	99 f0       	breq	.+38     	; 0xf82 <__addsf3x+0x60>
     f5c:	59 3f       	cpi	r21, 0xF9	; 249
     f5e:	50 f4       	brcc	.+20     	; 0xf74 <__addsf3x+0x52>
     f60:	50 3e       	cpi	r21, 0xE0	; 224
     f62:	68 f1       	brcs	.+90     	; 0xfbe <__addsf3x+0x9c>
     f64:	1a 16       	cp	r1, r26
     f66:	f0 40       	sbci	r31, 0x00	; 0
     f68:	a2 2f       	mov	r26, r18
     f6a:	23 2f       	mov	r18, r19
     f6c:	34 2f       	mov	r19, r20
     f6e:	44 27       	eor	r20, r20
     f70:	58 5f       	subi	r21, 0xF8	; 248
     f72:	f3 cf       	rjmp	.-26     	; 0xf5a <__addsf3x+0x38>
     f74:	46 95       	lsr	r20
     f76:	37 95       	ror	r19
     f78:	27 95       	ror	r18
     f7a:	a7 95       	ror	r26
     f7c:	f0 40       	sbci	r31, 0x00	; 0
     f7e:	53 95       	inc	r21
     f80:	c9 f7       	brne	.-14     	; 0xf74 <__addsf3x+0x52>
     f82:	7e f4       	brtc	.+30     	; 0xfa2 <__addsf3x+0x80>
     f84:	1f 16       	cp	r1, r31
     f86:	ba 0b       	sbc	r27, r26
     f88:	62 0b       	sbc	r22, r18
     f8a:	73 0b       	sbc	r23, r19
     f8c:	84 0b       	sbc	r24, r20
     f8e:	ba f0       	brmi	.+46     	; 0xfbe <__addsf3x+0x9c>
     f90:	91 50       	subi	r25, 0x01	; 1
     f92:	a1 f0       	breq	.+40     	; 0xfbc <__addsf3x+0x9a>
     f94:	ff 0f       	add	r31, r31
     f96:	bb 1f       	adc	r27, r27
     f98:	66 1f       	adc	r22, r22
     f9a:	77 1f       	adc	r23, r23
     f9c:	88 1f       	adc	r24, r24
     f9e:	c2 f7       	brpl	.-16     	; 0xf90 <__addsf3x+0x6e>
     fa0:	0e c0       	rjmp	.+28     	; 0xfbe <__addsf3x+0x9c>
     fa2:	ba 0f       	add	r27, r26
     fa4:	62 1f       	adc	r22, r18
     fa6:	73 1f       	adc	r23, r19
     fa8:	84 1f       	adc	r24, r20
     faa:	48 f4       	brcc	.+18     	; 0xfbe <__addsf3x+0x9c>
     fac:	87 95       	ror	r24
     fae:	77 95       	ror	r23
     fb0:	67 95       	ror	r22
     fb2:	b7 95       	ror	r27
     fb4:	f7 95       	ror	r31
     fb6:	9e 3f       	cpi	r25, 0xFE	; 254
     fb8:	08 f0       	brcs	.+2      	; 0xfbc <__addsf3x+0x9a>
     fba:	b0 cf       	rjmp	.-160    	; 0xf1c <__addsf3+0x28>
     fbc:	93 95       	inc	r25
     fbe:	88 0f       	add	r24, r24
     fc0:	08 f0       	brcs	.+2      	; 0xfc4 <__addsf3x+0xa2>
     fc2:	99 27       	eor	r25, r25
     fc4:	ee 0f       	add	r30, r30
     fc6:	97 95       	ror	r25
     fc8:	87 95       	ror	r24
     fca:	08 95       	ret

00000fcc <__divsf3>:
     fcc:	0e 94 fa 07 	call	0xff4	; 0xff4 <__divsf3x>
     fd0:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__fp_round>
     fd4:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__fp_pscB>
     fd8:	58 f0       	brcs	.+22     	; 0xff0 <__divsf3+0x24>
     fda:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__fp_pscA>
     fde:	40 f0       	brcs	.+16     	; 0xff0 <__divsf3+0x24>
     fe0:	29 f4       	brne	.+10     	; 0xfec <__divsf3+0x20>
     fe2:	5f 3f       	cpi	r21, 0xFF	; 255
     fe4:	29 f0       	breq	.+10     	; 0xff0 <__divsf3+0x24>
     fe6:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__fp_inf>
     fea:	51 11       	cpse	r21, r1
     fec:	0c 94 16 09 	jmp	0x122c	; 0x122c <__fp_szero>
     ff0:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__fp_nan>

00000ff4 <__divsf3x>:
     ff4:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__fp_split3>
     ff8:	68 f3       	brcs	.-38     	; 0xfd4 <__divsf3+0x8>

00000ffa <__divsf3_pse>:
     ffa:	99 23       	and	r25, r25
     ffc:	b1 f3       	breq	.-20     	; 0xfea <__divsf3+0x1e>
     ffe:	55 23       	and	r21, r21
    1000:	91 f3       	breq	.-28     	; 0xfe6 <__divsf3+0x1a>
    1002:	95 1b       	sub	r25, r21
    1004:	55 0b       	sbc	r21, r21
    1006:	bb 27       	eor	r27, r27
    1008:	aa 27       	eor	r26, r26
    100a:	62 17       	cp	r22, r18
    100c:	73 07       	cpc	r23, r19
    100e:	84 07       	cpc	r24, r20
    1010:	38 f0       	brcs	.+14     	; 0x1020 <__divsf3_pse+0x26>
    1012:	9f 5f       	subi	r25, 0xFF	; 255
    1014:	5f 4f       	sbci	r21, 0xFF	; 255
    1016:	22 0f       	add	r18, r18
    1018:	33 1f       	adc	r19, r19
    101a:	44 1f       	adc	r20, r20
    101c:	aa 1f       	adc	r26, r26
    101e:	a9 f3       	breq	.-22     	; 0x100a <__divsf3_pse+0x10>
    1020:	35 d0       	rcall	.+106    	; 0x108c <__divsf3_pse+0x92>
    1022:	0e 2e       	mov	r0, r30
    1024:	3a f0       	brmi	.+14     	; 0x1034 <__divsf3_pse+0x3a>
    1026:	e0 e8       	ldi	r30, 0x80	; 128
    1028:	32 d0       	rcall	.+100    	; 0x108e <__divsf3_pse+0x94>
    102a:	91 50       	subi	r25, 0x01	; 1
    102c:	50 40       	sbci	r21, 0x00	; 0
    102e:	e6 95       	lsr	r30
    1030:	00 1c       	adc	r0, r0
    1032:	ca f7       	brpl	.-14     	; 0x1026 <__divsf3_pse+0x2c>
    1034:	2b d0       	rcall	.+86     	; 0x108c <__divsf3_pse+0x92>
    1036:	fe 2f       	mov	r31, r30
    1038:	29 d0       	rcall	.+82     	; 0x108c <__divsf3_pse+0x92>
    103a:	66 0f       	add	r22, r22
    103c:	77 1f       	adc	r23, r23
    103e:	88 1f       	adc	r24, r24
    1040:	bb 1f       	adc	r27, r27
    1042:	26 17       	cp	r18, r22
    1044:	37 07       	cpc	r19, r23
    1046:	48 07       	cpc	r20, r24
    1048:	ab 07       	cpc	r26, r27
    104a:	b0 e8       	ldi	r27, 0x80	; 128
    104c:	09 f0       	breq	.+2      	; 0x1050 <__divsf3_pse+0x56>
    104e:	bb 0b       	sbc	r27, r27
    1050:	80 2d       	mov	r24, r0
    1052:	bf 01       	movw	r22, r30
    1054:	ff 27       	eor	r31, r31
    1056:	93 58       	subi	r25, 0x83	; 131
    1058:	5f 4f       	sbci	r21, 0xFF	; 255
    105a:	3a f0       	brmi	.+14     	; 0x106a <__divsf3_pse+0x70>
    105c:	9e 3f       	cpi	r25, 0xFE	; 254
    105e:	51 05       	cpc	r21, r1
    1060:	78 f0       	brcs	.+30     	; 0x1080 <__divsf3_pse+0x86>
    1062:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__fp_inf>
    1066:	0c 94 16 09 	jmp	0x122c	; 0x122c <__fp_szero>
    106a:	5f 3f       	cpi	r21, 0xFF	; 255
    106c:	e4 f3       	brlt	.-8      	; 0x1066 <__divsf3_pse+0x6c>
    106e:	98 3e       	cpi	r25, 0xE8	; 232
    1070:	d4 f3       	brlt	.-12     	; 0x1066 <__divsf3_pse+0x6c>
    1072:	86 95       	lsr	r24
    1074:	77 95       	ror	r23
    1076:	67 95       	ror	r22
    1078:	b7 95       	ror	r27
    107a:	f7 95       	ror	r31
    107c:	9f 5f       	subi	r25, 0xFF	; 255
    107e:	c9 f7       	brne	.-14     	; 0x1072 <__divsf3_pse+0x78>
    1080:	88 0f       	add	r24, r24
    1082:	91 1d       	adc	r25, r1
    1084:	96 95       	lsr	r25
    1086:	87 95       	ror	r24
    1088:	97 f9       	bld	r25, 7
    108a:	08 95       	ret
    108c:	e1 e0       	ldi	r30, 0x01	; 1
    108e:	66 0f       	add	r22, r22
    1090:	77 1f       	adc	r23, r23
    1092:	88 1f       	adc	r24, r24
    1094:	bb 1f       	adc	r27, r27
    1096:	62 17       	cp	r22, r18
    1098:	73 07       	cpc	r23, r19
    109a:	84 07       	cpc	r24, r20
    109c:	ba 07       	cpc	r27, r26
    109e:	20 f0       	brcs	.+8      	; 0x10a8 <__divsf3_pse+0xae>
    10a0:	62 1b       	sub	r22, r18
    10a2:	73 0b       	sbc	r23, r19
    10a4:	84 0b       	sbc	r24, r20
    10a6:	ba 0b       	sbc	r27, r26
    10a8:	ee 1f       	adc	r30, r30
    10aa:	88 f7       	brcc	.-30     	; 0x108e <__divsf3_pse+0x94>
    10ac:	e0 95       	com	r30
    10ae:	08 95       	ret

000010b0 <__fixsfsi>:
    10b0:	0e 94 5f 08 	call	0x10be	; 0x10be <__fixunssfsi>
    10b4:	68 94       	set
    10b6:	b1 11       	cpse	r27, r1
    10b8:	0c 94 16 09 	jmp	0x122c	; 0x122c <__fp_szero>
    10bc:	08 95       	ret

000010be <__fixunssfsi>:
    10be:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__fp_splitA>
    10c2:	88 f0       	brcs	.+34     	; 0x10e6 <__fixunssfsi+0x28>
    10c4:	9f 57       	subi	r25, 0x7F	; 127
    10c6:	98 f0       	brcs	.+38     	; 0x10ee <__fixunssfsi+0x30>
    10c8:	b9 2f       	mov	r27, r25
    10ca:	99 27       	eor	r25, r25
    10cc:	b7 51       	subi	r27, 0x17	; 23
    10ce:	b0 f0       	brcs	.+44     	; 0x10fc <__fixunssfsi+0x3e>
    10d0:	e1 f0       	breq	.+56     	; 0x110a <__fixunssfsi+0x4c>
    10d2:	66 0f       	add	r22, r22
    10d4:	77 1f       	adc	r23, r23
    10d6:	88 1f       	adc	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	1a f0       	brmi	.+6      	; 0x10e2 <__fixunssfsi+0x24>
    10dc:	ba 95       	dec	r27
    10de:	c9 f7       	brne	.-14     	; 0x10d2 <__fixunssfsi+0x14>
    10e0:	14 c0       	rjmp	.+40     	; 0x110a <__fixunssfsi+0x4c>
    10e2:	b1 30       	cpi	r27, 0x01	; 1
    10e4:	91 f0       	breq	.+36     	; 0x110a <__fixunssfsi+0x4c>
    10e6:	0e 94 15 09 	call	0x122a	; 0x122a <__fp_zero>
    10ea:	b1 e0       	ldi	r27, 0x01	; 1
    10ec:	08 95       	ret
    10ee:	0c 94 15 09 	jmp	0x122a	; 0x122a <__fp_zero>
    10f2:	67 2f       	mov	r22, r23
    10f4:	78 2f       	mov	r23, r24
    10f6:	88 27       	eor	r24, r24
    10f8:	b8 5f       	subi	r27, 0xF8	; 248
    10fa:	39 f0       	breq	.+14     	; 0x110a <__fixunssfsi+0x4c>
    10fc:	b9 3f       	cpi	r27, 0xF9	; 249
    10fe:	cc f3       	brlt	.-14     	; 0x10f2 <__fixunssfsi+0x34>
    1100:	86 95       	lsr	r24
    1102:	77 95       	ror	r23
    1104:	67 95       	ror	r22
    1106:	b3 95       	inc	r27
    1108:	d9 f7       	brne	.-10     	; 0x1100 <__fixunssfsi+0x42>
    110a:	3e f4       	brtc	.+14     	; 0x111a <__fixunssfsi+0x5c>
    110c:	90 95       	com	r25
    110e:	80 95       	com	r24
    1110:	70 95       	com	r23
    1112:	61 95       	neg	r22
    1114:	7f 4f       	sbci	r23, 0xFF	; 255
    1116:	8f 4f       	sbci	r24, 0xFF	; 255
    1118:	9f 4f       	sbci	r25, 0xFF	; 255
    111a:	08 95       	ret

0000111c <__floatunsisf>:
    111c:	e8 94       	clt
    111e:	09 c0       	rjmp	.+18     	; 0x1132 <__floatsisf+0x12>

00001120 <__floatsisf>:
    1120:	97 fb       	bst	r25, 7
    1122:	3e f4       	brtc	.+14     	; 0x1132 <__floatsisf+0x12>
    1124:	90 95       	com	r25
    1126:	80 95       	com	r24
    1128:	70 95       	com	r23
    112a:	61 95       	neg	r22
    112c:	7f 4f       	sbci	r23, 0xFF	; 255
    112e:	8f 4f       	sbci	r24, 0xFF	; 255
    1130:	9f 4f       	sbci	r25, 0xFF	; 255
    1132:	99 23       	and	r25, r25
    1134:	a9 f0       	breq	.+42     	; 0x1160 <__floatsisf+0x40>
    1136:	f9 2f       	mov	r31, r25
    1138:	96 e9       	ldi	r25, 0x96	; 150
    113a:	bb 27       	eor	r27, r27
    113c:	93 95       	inc	r25
    113e:	f6 95       	lsr	r31
    1140:	87 95       	ror	r24
    1142:	77 95       	ror	r23
    1144:	67 95       	ror	r22
    1146:	b7 95       	ror	r27
    1148:	f1 11       	cpse	r31, r1
    114a:	f8 cf       	rjmp	.-16     	; 0x113c <__floatsisf+0x1c>
    114c:	fa f4       	brpl	.+62     	; 0x118c <__floatsisf+0x6c>
    114e:	bb 0f       	add	r27, r27
    1150:	11 f4       	brne	.+4      	; 0x1156 <__floatsisf+0x36>
    1152:	60 ff       	sbrs	r22, 0
    1154:	1b c0       	rjmp	.+54     	; 0x118c <__floatsisf+0x6c>
    1156:	6f 5f       	subi	r22, 0xFF	; 255
    1158:	7f 4f       	sbci	r23, 0xFF	; 255
    115a:	8f 4f       	sbci	r24, 0xFF	; 255
    115c:	9f 4f       	sbci	r25, 0xFF	; 255
    115e:	16 c0       	rjmp	.+44     	; 0x118c <__floatsisf+0x6c>
    1160:	88 23       	and	r24, r24
    1162:	11 f0       	breq	.+4      	; 0x1168 <__floatsisf+0x48>
    1164:	96 e9       	ldi	r25, 0x96	; 150
    1166:	11 c0       	rjmp	.+34     	; 0x118a <__floatsisf+0x6a>
    1168:	77 23       	and	r23, r23
    116a:	21 f0       	breq	.+8      	; 0x1174 <__floatsisf+0x54>
    116c:	9e e8       	ldi	r25, 0x8E	; 142
    116e:	87 2f       	mov	r24, r23
    1170:	76 2f       	mov	r23, r22
    1172:	05 c0       	rjmp	.+10     	; 0x117e <__floatsisf+0x5e>
    1174:	66 23       	and	r22, r22
    1176:	71 f0       	breq	.+28     	; 0x1194 <__floatsisf+0x74>
    1178:	96 e8       	ldi	r25, 0x86	; 134
    117a:	86 2f       	mov	r24, r22
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	2a f0       	brmi	.+10     	; 0x118c <__floatsisf+0x6c>
    1182:	9a 95       	dec	r25
    1184:	66 0f       	add	r22, r22
    1186:	77 1f       	adc	r23, r23
    1188:	88 1f       	adc	r24, r24
    118a:	da f7       	brpl	.-10     	; 0x1182 <__floatsisf+0x62>
    118c:	88 0f       	add	r24, r24
    118e:	96 95       	lsr	r25
    1190:	87 95       	ror	r24
    1192:	97 f9       	bld	r25, 7
    1194:	08 95       	ret

00001196 <__fp_inf>:
    1196:	97 f9       	bld	r25, 7
    1198:	9f 67       	ori	r25, 0x7F	; 127
    119a:	80 e8       	ldi	r24, 0x80	; 128
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	08 95       	ret

000011a2 <__fp_nan>:
    11a2:	9f ef       	ldi	r25, 0xFF	; 255
    11a4:	80 ec       	ldi	r24, 0xC0	; 192
    11a6:	08 95       	ret

000011a8 <__fp_pscA>:
    11a8:	00 24       	eor	r0, r0
    11aa:	0a 94       	dec	r0
    11ac:	16 16       	cp	r1, r22
    11ae:	17 06       	cpc	r1, r23
    11b0:	18 06       	cpc	r1, r24
    11b2:	09 06       	cpc	r0, r25
    11b4:	08 95       	ret

000011b6 <__fp_pscB>:
    11b6:	00 24       	eor	r0, r0
    11b8:	0a 94       	dec	r0
    11ba:	12 16       	cp	r1, r18
    11bc:	13 06       	cpc	r1, r19
    11be:	14 06       	cpc	r1, r20
    11c0:	05 06       	cpc	r0, r21
    11c2:	08 95       	ret

000011c4 <__fp_round>:
    11c4:	09 2e       	mov	r0, r25
    11c6:	03 94       	inc	r0
    11c8:	00 0c       	add	r0, r0
    11ca:	11 f4       	brne	.+4      	; 0x11d0 <__fp_round+0xc>
    11cc:	88 23       	and	r24, r24
    11ce:	52 f0       	brmi	.+20     	; 0x11e4 <__fp_round+0x20>
    11d0:	bb 0f       	add	r27, r27
    11d2:	40 f4       	brcc	.+16     	; 0x11e4 <__fp_round+0x20>
    11d4:	bf 2b       	or	r27, r31
    11d6:	11 f4       	brne	.+4      	; 0x11dc <__fp_round+0x18>
    11d8:	60 ff       	sbrs	r22, 0
    11da:	04 c0       	rjmp	.+8      	; 0x11e4 <__fp_round+0x20>
    11dc:	6f 5f       	subi	r22, 0xFF	; 255
    11de:	7f 4f       	sbci	r23, 0xFF	; 255
    11e0:	8f 4f       	sbci	r24, 0xFF	; 255
    11e2:	9f 4f       	sbci	r25, 0xFF	; 255
    11e4:	08 95       	ret

000011e6 <__fp_split3>:
    11e6:	57 fd       	sbrc	r21, 7
    11e8:	90 58       	subi	r25, 0x80	; 128
    11ea:	44 0f       	add	r20, r20
    11ec:	55 1f       	adc	r21, r21
    11ee:	59 f0       	breq	.+22     	; 0x1206 <__fp_splitA+0x10>
    11f0:	5f 3f       	cpi	r21, 0xFF	; 255
    11f2:	71 f0       	breq	.+28     	; 0x1210 <__fp_splitA+0x1a>
    11f4:	47 95       	ror	r20

000011f6 <__fp_splitA>:
    11f6:	88 0f       	add	r24, r24
    11f8:	97 fb       	bst	r25, 7
    11fa:	99 1f       	adc	r25, r25
    11fc:	61 f0       	breq	.+24     	; 0x1216 <__fp_splitA+0x20>
    11fe:	9f 3f       	cpi	r25, 0xFF	; 255
    1200:	79 f0       	breq	.+30     	; 0x1220 <__fp_splitA+0x2a>
    1202:	87 95       	ror	r24
    1204:	08 95       	ret
    1206:	12 16       	cp	r1, r18
    1208:	13 06       	cpc	r1, r19
    120a:	14 06       	cpc	r1, r20
    120c:	55 1f       	adc	r21, r21
    120e:	f2 cf       	rjmp	.-28     	; 0x11f4 <__fp_split3+0xe>
    1210:	46 95       	lsr	r20
    1212:	f1 df       	rcall	.-30     	; 0x11f6 <__fp_splitA>
    1214:	08 c0       	rjmp	.+16     	; 0x1226 <__fp_splitA+0x30>
    1216:	16 16       	cp	r1, r22
    1218:	17 06       	cpc	r1, r23
    121a:	18 06       	cpc	r1, r24
    121c:	99 1f       	adc	r25, r25
    121e:	f1 cf       	rjmp	.-30     	; 0x1202 <__fp_splitA+0xc>
    1220:	86 95       	lsr	r24
    1222:	71 05       	cpc	r23, r1
    1224:	61 05       	cpc	r22, r1
    1226:	08 94       	sec
    1228:	08 95       	ret

0000122a <__fp_zero>:
    122a:	e8 94       	clt

0000122c <__fp_szero>:
    122c:	bb 27       	eor	r27, r27
    122e:	66 27       	eor	r22, r22
    1230:	77 27       	eor	r23, r23
    1232:	cb 01       	movw	r24, r22
    1234:	97 f9       	bld	r25, 7
    1236:	08 95       	ret

00001238 <__gesf2>:
    1238:	0e 94 8e 09 	call	0x131c	; 0x131c <__fp_cmp>
    123c:	08 f4       	brcc	.+2      	; 0x1240 <__gesf2+0x8>
    123e:	8f ef       	ldi	r24, 0xFF	; 255
    1240:	08 95       	ret

00001242 <__mulsf3>:
    1242:	0e 94 34 09 	call	0x1268	; 0x1268 <__mulsf3x>
    1246:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__fp_round>
    124a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__fp_pscA>
    124e:	38 f0       	brcs	.+14     	; 0x125e <__mulsf3+0x1c>
    1250:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__fp_pscB>
    1254:	20 f0       	brcs	.+8      	; 0x125e <__mulsf3+0x1c>
    1256:	95 23       	and	r25, r21
    1258:	11 f0       	breq	.+4      	; 0x125e <__mulsf3+0x1c>
    125a:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__fp_inf>
    125e:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__fp_nan>
    1262:	11 24       	eor	r1, r1
    1264:	0c 94 16 09 	jmp	0x122c	; 0x122c <__fp_szero>

00001268 <__mulsf3x>:
    1268:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__fp_split3>
    126c:	70 f3       	brcs	.-36     	; 0x124a <__mulsf3+0x8>

0000126e <__mulsf3_pse>:
    126e:	95 9f       	mul	r25, r21
    1270:	c1 f3       	breq	.-16     	; 0x1262 <__mulsf3+0x20>
    1272:	95 0f       	add	r25, r21
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	55 1f       	adc	r21, r21
    1278:	62 9f       	mul	r22, r18
    127a:	f0 01       	movw	r30, r0
    127c:	72 9f       	mul	r23, r18
    127e:	bb 27       	eor	r27, r27
    1280:	f0 0d       	add	r31, r0
    1282:	b1 1d       	adc	r27, r1
    1284:	63 9f       	mul	r22, r19
    1286:	aa 27       	eor	r26, r26
    1288:	f0 0d       	add	r31, r0
    128a:	b1 1d       	adc	r27, r1
    128c:	aa 1f       	adc	r26, r26
    128e:	64 9f       	mul	r22, r20
    1290:	66 27       	eor	r22, r22
    1292:	b0 0d       	add	r27, r0
    1294:	a1 1d       	adc	r26, r1
    1296:	66 1f       	adc	r22, r22
    1298:	82 9f       	mul	r24, r18
    129a:	22 27       	eor	r18, r18
    129c:	b0 0d       	add	r27, r0
    129e:	a1 1d       	adc	r26, r1
    12a0:	62 1f       	adc	r22, r18
    12a2:	73 9f       	mul	r23, r19
    12a4:	b0 0d       	add	r27, r0
    12a6:	a1 1d       	adc	r26, r1
    12a8:	62 1f       	adc	r22, r18
    12aa:	83 9f       	mul	r24, r19
    12ac:	a0 0d       	add	r26, r0
    12ae:	61 1d       	adc	r22, r1
    12b0:	22 1f       	adc	r18, r18
    12b2:	74 9f       	mul	r23, r20
    12b4:	33 27       	eor	r19, r19
    12b6:	a0 0d       	add	r26, r0
    12b8:	61 1d       	adc	r22, r1
    12ba:	23 1f       	adc	r18, r19
    12bc:	84 9f       	mul	r24, r20
    12be:	60 0d       	add	r22, r0
    12c0:	21 1d       	adc	r18, r1
    12c2:	82 2f       	mov	r24, r18
    12c4:	76 2f       	mov	r23, r22
    12c6:	6a 2f       	mov	r22, r26
    12c8:	11 24       	eor	r1, r1
    12ca:	9f 57       	subi	r25, 0x7F	; 127
    12cc:	50 40       	sbci	r21, 0x00	; 0
    12ce:	9a f0       	brmi	.+38     	; 0x12f6 <__mulsf3_pse+0x88>
    12d0:	f1 f0       	breq	.+60     	; 0x130e <__mulsf3_pse+0xa0>
    12d2:	88 23       	and	r24, r24
    12d4:	4a f0       	brmi	.+18     	; 0x12e8 <__mulsf3_pse+0x7a>
    12d6:	ee 0f       	add	r30, r30
    12d8:	ff 1f       	adc	r31, r31
    12da:	bb 1f       	adc	r27, r27
    12dc:	66 1f       	adc	r22, r22
    12de:	77 1f       	adc	r23, r23
    12e0:	88 1f       	adc	r24, r24
    12e2:	91 50       	subi	r25, 0x01	; 1
    12e4:	50 40       	sbci	r21, 0x00	; 0
    12e6:	a9 f7       	brne	.-22     	; 0x12d2 <__mulsf3_pse+0x64>
    12e8:	9e 3f       	cpi	r25, 0xFE	; 254
    12ea:	51 05       	cpc	r21, r1
    12ec:	80 f0       	brcs	.+32     	; 0x130e <__mulsf3_pse+0xa0>
    12ee:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__fp_inf>
    12f2:	0c 94 16 09 	jmp	0x122c	; 0x122c <__fp_szero>
    12f6:	5f 3f       	cpi	r21, 0xFF	; 255
    12f8:	e4 f3       	brlt	.-8      	; 0x12f2 <__mulsf3_pse+0x84>
    12fa:	98 3e       	cpi	r25, 0xE8	; 232
    12fc:	d4 f3       	brlt	.-12     	; 0x12f2 <__mulsf3_pse+0x84>
    12fe:	86 95       	lsr	r24
    1300:	77 95       	ror	r23
    1302:	67 95       	ror	r22
    1304:	b7 95       	ror	r27
    1306:	f7 95       	ror	r31
    1308:	e7 95       	ror	r30
    130a:	9f 5f       	subi	r25, 0xFF	; 255
    130c:	c1 f7       	brne	.-16     	; 0x12fe <__mulsf3_pse+0x90>
    130e:	fe 2b       	or	r31, r30
    1310:	88 0f       	add	r24, r24
    1312:	91 1d       	adc	r25, r1
    1314:	96 95       	lsr	r25
    1316:	87 95       	ror	r24
    1318:	97 f9       	bld	r25, 7
    131a:	08 95       	ret

0000131c <__fp_cmp>:
    131c:	99 0f       	add	r25, r25
    131e:	00 08       	sbc	r0, r0
    1320:	55 0f       	add	r21, r21
    1322:	aa 0b       	sbc	r26, r26
    1324:	e0 e8       	ldi	r30, 0x80	; 128
    1326:	fe ef       	ldi	r31, 0xFE	; 254
    1328:	16 16       	cp	r1, r22
    132a:	17 06       	cpc	r1, r23
    132c:	e8 07       	cpc	r30, r24
    132e:	f9 07       	cpc	r31, r25
    1330:	c0 f0       	brcs	.+48     	; 0x1362 <__fp_cmp+0x46>
    1332:	12 16       	cp	r1, r18
    1334:	13 06       	cpc	r1, r19
    1336:	e4 07       	cpc	r30, r20
    1338:	f5 07       	cpc	r31, r21
    133a:	98 f0       	brcs	.+38     	; 0x1362 <__fp_cmp+0x46>
    133c:	62 1b       	sub	r22, r18
    133e:	73 0b       	sbc	r23, r19
    1340:	84 0b       	sbc	r24, r20
    1342:	95 0b       	sbc	r25, r21
    1344:	39 f4       	brne	.+14     	; 0x1354 <__fp_cmp+0x38>
    1346:	0a 26       	eor	r0, r26
    1348:	61 f0       	breq	.+24     	; 0x1362 <__fp_cmp+0x46>
    134a:	23 2b       	or	r18, r19
    134c:	24 2b       	or	r18, r20
    134e:	25 2b       	or	r18, r21
    1350:	21 f4       	brne	.+8      	; 0x135a <__fp_cmp+0x3e>
    1352:	08 95       	ret
    1354:	0a 26       	eor	r0, r26
    1356:	09 f4       	brne	.+2      	; 0x135a <__fp_cmp+0x3e>
    1358:	a1 40       	sbci	r26, 0x01	; 1
    135a:	a6 95       	lsr	r26
    135c:	8f ef       	ldi	r24, 0xFF	; 255
    135e:	81 1d       	adc	r24, r1
    1360:	81 1d       	adc	r24, r1
    1362:	08 95       	ret

00001364 <__divmodhi4>:
    1364:	97 fb       	bst	r25, 7
    1366:	07 2e       	mov	r0, r23
    1368:	16 f4       	brtc	.+4      	; 0x136e <__divmodhi4+0xa>
    136a:	00 94       	com	r0
    136c:	07 d0       	rcall	.+14     	; 0x137c <__divmodhi4_neg1>
    136e:	77 fd       	sbrc	r23, 7
    1370:	09 d0       	rcall	.+18     	; 0x1384 <__divmodhi4_neg2>
    1372:	0e 94 c6 09 	call	0x138c	; 0x138c <__udivmodhi4>
    1376:	07 fc       	sbrc	r0, 7
    1378:	05 d0       	rcall	.+10     	; 0x1384 <__divmodhi4_neg2>
    137a:	3e f4       	brtc	.+14     	; 0x138a <__divmodhi4_exit>

0000137c <__divmodhi4_neg1>:
    137c:	90 95       	com	r25
    137e:	81 95       	neg	r24
    1380:	9f 4f       	sbci	r25, 0xFF	; 255
    1382:	08 95       	ret

00001384 <__divmodhi4_neg2>:
    1384:	70 95       	com	r23
    1386:	61 95       	neg	r22
    1388:	7f 4f       	sbci	r23, 0xFF	; 255

0000138a <__divmodhi4_exit>:
    138a:	08 95       	ret

0000138c <__udivmodhi4>:
    138c:	aa 1b       	sub	r26, r26
    138e:	bb 1b       	sub	r27, r27
    1390:	51 e1       	ldi	r21, 0x11	; 17
    1392:	07 c0       	rjmp	.+14     	; 0x13a2 <__udivmodhi4_ep>

00001394 <__udivmodhi4_loop>:
    1394:	aa 1f       	adc	r26, r26
    1396:	bb 1f       	adc	r27, r27
    1398:	a6 17       	cp	r26, r22
    139a:	b7 07       	cpc	r27, r23
    139c:	10 f0       	brcs	.+4      	; 0x13a2 <__udivmodhi4_ep>
    139e:	a6 1b       	sub	r26, r22
    13a0:	b7 0b       	sbc	r27, r23

000013a2 <__udivmodhi4_ep>:
    13a2:	88 1f       	adc	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	5a 95       	dec	r21
    13a8:	a9 f7       	brne	.-22     	; 0x1394 <__udivmodhi4_loop>
    13aa:	80 95       	com	r24
    13ac:	90 95       	com	r25
    13ae:	bc 01       	movw	r22, r24
    13b0:	cd 01       	movw	r24, r26
    13b2:	08 95       	ret

000013b4 <__itoa_ncheck>:
    13b4:	bb 27       	eor	r27, r27
    13b6:	4a 30       	cpi	r20, 0x0A	; 10
    13b8:	31 f4       	brne	.+12     	; 0x13c6 <__itoa_ncheck+0x12>
    13ba:	99 23       	and	r25, r25
    13bc:	22 f4       	brpl	.+8      	; 0x13c6 <__itoa_ncheck+0x12>
    13be:	bd e2       	ldi	r27, 0x2D	; 45
    13c0:	90 95       	com	r25
    13c2:	81 95       	neg	r24
    13c4:	9f 4f       	sbci	r25, 0xFF	; 255
    13c6:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__utoa_common>

000013ca <__utoa_ncheck>:
    13ca:	bb 27       	eor	r27, r27

000013cc <__utoa_common>:
    13cc:	fb 01       	movw	r30, r22
    13ce:	55 27       	eor	r21, r21
    13d0:	aa 27       	eor	r26, r26
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	aa 1f       	adc	r26, r26
    13d8:	a4 17       	cp	r26, r20
    13da:	10 f0       	brcs	.+4      	; 0x13e0 <__utoa_common+0x14>
    13dc:	a4 1b       	sub	r26, r20
    13de:	83 95       	inc	r24
    13e0:	50 51       	subi	r21, 0x10	; 16
    13e2:	b9 f7       	brne	.-18     	; 0x13d2 <__utoa_common+0x6>
    13e4:	a0 5d       	subi	r26, 0xD0	; 208
    13e6:	aa 33       	cpi	r26, 0x3A	; 58
    13e8:	08 f0       	brcs	.+2      	; 0x13ec <__utoa_common+0x20>
    13ea:	a9 5d       	subi	r26, 0xD9	; 217
    13ec:	a1 93       	st	Z+, r26
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	79 f7       	brne	.-34     	; 0x13d0 <__utoa_common+0x4>
    13f2:	b1 11       	cpse	r27, r1
    13f4:	b1 93       	st	Z+, r27
    13f6:	11 92       	st	Z+, r1
    13f8:	cb 01       	movw	r24, r22
    13fa:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <strrev>

000013fe <strrev>:
    13fe:	dc 01       	movw	r26, r24
    1400:	fc 01       	movw	r30, r24
    1402:	67 2f       	mov	r22, r23
    1404:	71 91       	ld	r23, Z+
    1406:	77 23       	and	r23, r23
    1408:	e1 f7       	brne	.-8      	; 0x1402 <strrev+0x4>
    140a:	32 97       	sbiw	r30, 0x02	; 2
    140c:	04 c0       	rjmp	.+8      	; 0x1416 <strrev+0x18>
    140e:	7c 91       	ld	r23, X
    1410:	6d 93       	st	X+, r22
    1412:	70 83       	st	Z, r23
    1414:	62 91       	ld	r22, -Z
    1416:	ae 17       	cp	r26, r30
    1418:	bf 07       	cpc	r27, r31
    141a:	c8 f3       	brcs	.-14     	; 0x140e <strrev+0x10>
    141c:	08 95       	ret

0000141e <_exit>:
    141e:	f8 94       	cli

00001420 <__stop_program>:
    1420:	ff cf       	rjmp	.-2      	; 0x1420 <__stop_program>
