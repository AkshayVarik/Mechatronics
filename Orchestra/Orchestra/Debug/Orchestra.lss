
Orchestra.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  00000d18  00000dac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800170  00800170  00000e1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001698  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000063e  00000000  00000000  000026bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a26  00000000  00000000  00002cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000528  00000000  00000000  00003720  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b2  00000000  00000000  00003c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fc3  00000000  00000000  000042fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  000062bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   c:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__vector_3>
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  28:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__vector_10>
  2c:	0c 94 1a 03 	jmp	0x634	; 0x634 <__vector_11>
  30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  44:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__vector_17>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  68:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  6c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  70:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  74:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  7c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  80:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  84:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  88:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  90:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  94:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  98:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  9c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>

000000ac <__trampolines_end>:
  ac:	00 01       	movw	r0, r0
  ae:	00 00       	nop
  b0:	43 01       	movw	r8, r6
  b2:	12 00       	.word	0x0012	; ????
  b4:	02 00       	.word	0x0002	; ????
  b6:	00 00       	nop
  b8:	01 43       	sbci	r16, 0x31	; 49
  ba:	00 03       	mulsu	r16, r16
  bc:	00 00       	nop
  be:	fc 00       	.word	0x00fc	; ????
  c0:	04 01       	movw	r0, r8
  c2:	03 09       	sbc	r16, r3
  c4:	04 e8       	ldi	r16, 0x84	; 132
  c6:	00 12       	cpse	r0, r16
  c8:	02 03       	mulsu	r16, r18
  ca:	09 04       	cpc	r0, r9
  cc:	e0 00       	.word	0x00e0	; ????
  ce:	06 03       	mulsu	r16, r22
  d0:	03 09       	sbc	r16, r3
  d2:	04 d6       	rcall	.+3080   	; 0xcdc <__divmodhi4_neg1>
  d4:	00 08       	sbc	r0, r0

000000d6 <string3>:
  d6:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000000e0 <string2>:
  e0:	06 03 4d 00 32 00 00 00                             ..M.2...

000000e8 <string1>:
  e8:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
  f8:	65 00 00 00                                         e...

000000fc <string0>:
  fc:	04 03 09 04                                         ....

00000100 <config1_descriptor>:
 100:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 110:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 120:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 130:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 140:	40 00 00                                            @..

00000143 <device_descriptor>:
 143:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 153:	03 01                                               ..

00000155 <endpoint_config_table>:
 155:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000160 <__ctors_end>:
 160:	11 24       	eor	r1, r1
 162:	1f be       	out	0x3f, r1	; 63
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	da e0       	ldi	r29, 0x0A	; 10
 168:	de bf       	out	0x3e, r29	; 62
 16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
 16c:	11 e0       	ldi	r17, 0x01	; 1
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	e8 e1       	ldi	r30, 0x18	; 24
 174:	fd e0       	ldi	r31, 0x0D	; 13
 176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
 178:	05 90       	lpm	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	a0 37       	cpi	r26, 0x70	; 112
 17e:	b1 07       	cpc	r27, r17
 180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	a0 e7       	ldi	r26, 0x70	; 112
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
 18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
 18c:	a2 38       	cpi	r26, 0x82	; 130
 18e:	b2 07       	cpc	r27, r18
 190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
 192:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
 196:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <_exit>

0000019a <__bad_interrupt>:
 19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <main>:
 };


int main(void)
{
    m_clockdivide(0); // System clock 16 MHz
 19e:	e1 e6       	ldi	r30, 0x61	; 97
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 e8       	ldi	r24, 0x80	; 128
 1a4:	80 83       	st	Z, r24
 1a6:	10 82       	st	Z, r1
    
    m_bus_init();
 1a8:	0e 94 11 02 	call	0x422	; 0x422 <m_bus_init>
    m_rf_open(CHANNEL,RXADDRESS,PACKET_LENGTH);
 1ac:	43 e0       	ldi	r20, 0x03	; 3
 1ae:	6f e4       	ldi	r22, 0x4F	; 79
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 22 02 	call	0x444	; 0x444 <m_rf_open>
    
    clear(TCCR1B,CS12); // Prescaler /1
 1b6:	e1 e8       	ldi	r30, 0x81	; 129
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	8b 7f       	andi	r24, 0xFB	; 251
 1be:	80 83       	st	Z, r24
    clear(TCCR1B,CS11);	// ^
 1c0:	80 81       	ld	r24, Z
 1c2:	8d 7f       	andi	r24, 0xFD	; 253
 1c4:	80 83       	st	Z, r24
    set(TCCR1B,CS10); // ^
 1c6:	80 81       	ld	r24, Z
 1c8:	81 60       	ori	r24, 0x01	; 1
 1ca:	80 83       	st	Z, r24
    
    set(TCCR1B,WGM13); // Time mode (15) UP to OCR1A, PWM Mode, Single Slope, reset to Ox0000
 1cc:	80 81       	ld	r24, Z
 1ce:	80 61       	ori	r24, 0x10	; 16
 1d0:	80 83       	st	Z, r24
    set(TCCR1B,WGM12); // ^
 1d2:	80 81       	ld	r24, Z
 1d4:	88 60       	ori	r24, 0x08	; 8
 1d6:	80 83       	st	Z, r24
    set(TCCR1A,WGM11); // ^
 1d8:	e0 e8       	ldi	r30, 0x80	; 128
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	82 60       	ori	r24, 0x02	; 2
 1e0:	80 83       	st	Z, r24
    set(TCCR1A,WGM10); // ^
 1e2:	80 81       	ld	r24, Z
 1e4:	81 60       	ori	r24, 0x01	; 1
 1e6:	80 83       	st	Z, r24
    
    set(TCCR1A,COM1B1); // Clear at OCR1B, set at rollover
 1e8:	80 81       	ld	r24, Z
 1ea:	80 62       	ori	r24, 0x20	; 32
 1ec:	80 83       	st	Z, r24
    clear(TCCR1A,COM1B0); // ^
 1ee:	80 81       	ld	r24, Z
 1f0:	8f 7e       	andi	r24, 0xEF	; 239
 1f2:	80 83       	st	Z, r24
    
    set(TIMSK1, OCIE1A); // Sets an interrupt when Timer 1 overflows
 1f4:	ef e6       	ldi	r30, 0x6F	; 111
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	80 83       	st	Z, r24
    
    OCR1A = 1000; // Initializing the value
 1fe:	88 ee       	ldi	r24, 0xE8	; 232
 200:	93 e0       	ldi	r25, 0x03	; 3
 202:	90 93 89 00 	sts	0x0089, r25
 206:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 0; // Initializing the value
 20a:	10 92 8b 00 	sts	0x008B, r1
 20e:	10 92 8a 00 	sts	0x008A, r1
    
    sei(); // Enables global interrupt
 212:	78 94       	sei
			{
                m_wait(10); // Wait for 10 centisecond/millisecond?
                deci_secs++; // Increment the count
            }
            m_green(OFF);
            OCR1A = 0; // Reset the OCR1A to 0. It will take a value next time there is a signal
 214:	c8 e8       	ldi	r28, 0x88	; 136
 216:	d0 e0       	ldi	r29, 0x00	; 0
    
    sei(); // Enables global interrupt
    
    while(1)
	{
        if (j == 1) // If signal is received
 218:	80 91 73 01 	lds	r24, 0x0173
 21c:	90 91 74 01 	lds	r25, 0x0174
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	d1 f7       	brne	.-12     	; 0x218 <main+0x7a>
		{
            m_green(ON);
 224:	6a 9a       	sbi	0x0d, 2	; 13
 226:	72 98       	cbi	0x0e, 2	; 14
            
            while (deci_secs < sound_time) // The count is less than the time for which the music has to be played
 228:	60 91 77 01 	lds	r22, 0x0177
 22c:	70 91 78 01 	lds	r23, 0x0178
 230:	07 2e       	mov	r0, r23
 232:	00 0c       	add	r0, r0
 234:	88 0b       	sbc	r24, r24
 236:	99 0b       	sbc	r25, r25
 238:	0e 94 45 05 	call	0xa8a	; 0xa8a <__floatsisf>
 23c:	20 91 79 01 	lds	r18, 0x0179
 240:	30 91 7a 01 	lds	r19, 0x017A
 244:	40 91 7b 01 	lds	r20, 0x017B
 248:	50 91 7c 01 	lds	r21, 0x017C
 24c:	0e 94 9d 04 	call	0x93a	; 0x93a <__cmpsf2>
 250:	88 23       	and	r24, r24
 252:	14 f5       	brge	.+68     	; 0x298 <main+0xfa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	83 ec       	ldi	r24, 0xC3	; 195
 256:	99 e0       	ldi	r25, 0x09	; 9
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <main+0xba>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0xc0>
 25e:	00 00       	nop
			{
                m_wait(10); // Wait for 10 centisecond/millisecond?
                deci_secs++; // Increment the count
 260:	60 91 77 01 	lds	r22, 0x0177
 264:	70 91 78 01 	lds	r23, 0x0178
 268:	6f 5f       	subi	r22, 0xFF	; 255
 26a:	7f 4f       	sbci	r23, 0xFF	; 255
 26c:	70 93 78 01 	sts	0x0178, r23
 270:	60 93 77 01 	sts	0x0177, r22
	{
        if (j == 1) // If signal is received
		{
            m_green(ON);
            
            while (deci_secs < sound_time) // The count is less than the time for which the music has to be played
 274:	07 2e       	mov	r0, r23
 276:	00 0c       	add	r0, r0
 278:	88 0b       	sbc	r24, r24
 27a:	99 0b       	sbc	r25, r25
 27c:	0e 94 45 05 	call	0xa8a	; 0xa8a <__floatsisf>
 280:	20 91 79 01 	lds	r18, 0x0179
 284:	30 91 7a 01 	lds	r19, 0x017A
 288:	40 91 7b 01 	lds	r20, 0x017B
 28c:	50 91 7c 01 	lds	r21, 0x017C
 290:	0e 94 9d 04 	call	0x93a	; 0x93a <__cmpsf2>
 294:	88 23       	and	r24, r24
 296:	f4 f2       	brlt	.-68     	; 0x254 <main+0xb6>
			{
                m_wait(10); // Wait for 10 centisecond/millisecond?
                deci_secs++; // Increment the count
            }
            m_green(OFF);
 298:	6a 9a       	sbi	0x0d, 2	; 13
 29a:	72 9a       	sbi	0x0e, 2	; 14
            OCR1A = 0; // Reset the OCR1A to 0. It will take a value next time there is a signal
 29c:	19 82       	std	Y+1, r1	; 0x01
 29e:	18 82       	st	Y, r1
            deci_secs = 0; // Reset the count to 0. It will take a value next time there is a signal
 2a0:	10 92 78 01 	sts	0x0178, r1
 2a4:	10 92 77 01 	sts	0x0177, r1
            j = 0; // ^
 2a8:	10 92 74 01 	sts	0x0174, r1
 2ac:	10 92 73 01 	sts	0x0173, r1
 2b0:	b3 cf       	rjmp	.-154    	; 0x218 <main+0x7a>

000002b2 <__vector_17>:
        }
    }
}

ISR(TIMER1_COMPA_vect)
{
 2b2:	1f 92       	push	r1
 2b4:	0f 92       	push	r0
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	0f 92       	push	r0
 2ba:	11 24       	eor	r1, r1
 2bc:	2f 93       	push	r18
 2be:	3f 93       	push	r19
 2c0:	4f 93       	push	r20
 2c2:	5f 93       	push	r21
 2c4:	6f 93       	push	r22
 2c6:	7f 93       	push	r23
 2c8:	8f 93       	push	r24
 2ca:	9f 93       	push	r25
 2cc:	af 93       	push	r26
 2ce:	bf 93       	push	r27
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	ef 93       	push	r30
 2d6:	ff 93       	push	r31
	m_red(ON);
 2d8:	6e 9a       	sbi	0x0d, 6	; 13
 2da:	76 98       	cbi	0x0e, 6	; 14
    OCR1B = ((sinetable[i]*OCR1A) / 50); // Generates the sine wave. OCR1B takes values between 0 and OCR1A as generated from the SineTable
 2dc:	60 91 88 00 	lds	r22, 0x0088
 2e0:	70 91 89 00 	lds	r23, 0x0089
 2e4:	c0 91 7d 01 	lds	r28, 0x017D
 2e8:	d0 91 7e 01 	lds	r29, 0x017E
 2ec:	cc 0f       	add	r28, r28
 2ee:	dd 1f       	adc	r29, r29
 2f0:	cc 0f       	add	r28, r28
 2f2:	dd 1f       	adc	r29, r29
 2f4:	c0 50       	subi	r28, 0x00	; 0
 2f6:	df 4f       	sbci	r29, 0xFF	; 255
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 43 05 	call	0xa86	; 0xa86 <__floatunsisf>
 300:	28 81       	ld	r18, Y
 302:	39 81       	ldd	r19, Y+1	; 0x01
 304:	4a 81       	ldd	r20, Y+2	; 0x02
 306:	5b 81       	ldd	r21, Y+3	; 0x03
 308:	0e 94 f5 05 	call	0xbea	; 0xbea <__mulsf3>
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	48 e4       	ldi	r20, 0x48	; 72
 312:	52 e4       	ldi	r21, 0x42	; 66
 314:	0e 94 a2 04 	call	0x944	; 0x944 <__divsf3>
 318:	0e 94 14 05 	call	0xa28	; 0xa28 <__fixunssfsi>
 31c:	70 93 8b 00 	sts	0x008B, r23
 320:	60 93 8a 00 	sts	0x008A, r22
    set(DDRB,6); // Output pin
 324:	26 9a       	sbi	0x04, 6	; 4
    i++; // Increment
 326:	80 91 7d 01 	lds	r24, 0x017D
 32a:	90 91 7e 01 	lds	r25, 0x017E
 32e:	01 96       	adiw	r24, 0x01	; 1
	if(i>26) // In case the value surpasses the number of values in the the sinetable reset the index count variable to 0
 330:	8b 31       	cpi	r24, 0x1B	; 27
 332:	91 05       	cpc	r25, r1
 334:	2c f4       	brge	.+10     	; 0x340 <__vector_17+0x8e>
ISR(TIMER1_COMPA_vect)
{
	m_red(ON);
    OCR1B = ((sinetable[i]*OCR1A) / 50); // Generates the sine wave. OCR1B takes values between 0 and OCR1A as generated from the SineTable
    set(DDRB,6); // Output pin
    i++; // Increment
 336:	90 93 7e 01 	sts	0x017E, r25
 33a:	80 93 7d 01 	sts	0x017D, r24
 33e:	04 c0       	rjmp	.+8      	; 0x348 <__vector_17+0x96>
	if(i>26) // In case the value surpasses the number of values in the the sinetable reset the index count variable to 0
	{
		i=0; // Variable set to 0
 340:	10 92 7e 01 	sts	0x017E, r1
 344:	10 92 7d 01 	sts	0x017D, r1
	}
}
 348:	ff 91       	pop	r31
 34a:	ef 91       	pop	r30
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	bf 91       	pop	r27
 352:	af 91       	pop	r26
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	7f 91       	pop	r23
 35a:	6f 91       	pop	r22
 35c:	5f 91       	pop	r21
 35e:	4f 91       	pop	r20
 360:	3f 91       	pop	r19
 362:	2f 91       	pop	r18
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <__vector_3>:


ISR(INT2_vect) 
{
 36e:	1f 92       	push	r1
 370:	0f 92       	push	r0
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	0f 92       	push	r0
 376:	11 24       	eor	r1, r1
 378:	2f 93       	push	r18
 37a:	3f 93       	push	r19
 37c:	4f 93       	push	r20
 37e:	5f 93       	push	r21
 380:	6f 93       	push	r22
 382:	7f 93       	push	r23
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
 388:	af 93       	push	r26
 38a:	bf 93       	push	r27
 38c:	ef 93       	push	r30
 38e:	ff 93       	push	r31
    
    if(m_rf_read(buffer,PACKET_LENGTH))
 390:	63 e0       	ldi	r22, 0x03	; 3
 392:	80 e7       	ldi	r24, 0x70	; 112
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	0e 94 78 02 	call	0x4f0	; 0x4f0 <m_rf_read>
 39a:	88 23       	and	r24, r24
 39c:	89 f1       	breq	.+98     	; 0x400 <__vector_3+0x92>
    {
			frequency = buffer[0] + 256 * buffer[1]; // 1st two elements of the packet represent the frequency       
 39e:	e0 e7       	ldi	r30, 0x70	; 112
 3a0:	f1 e0       	ldi	r31, 0x01	; 1
 3a2:	80 81       	ld	r24, Z
 3a4:	21 81       	ldd	r18, Z+1	; 0x01
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	32 2f       	mov	r19, r18
 3aa:	22 27       	eor	r18, r18
 3ac:	28 0f       	add	r18, r24
 3ae:	31 1d       	adc	r19, r1
 3b0:	30 93 76 01 	sts	0x0176, r19
 3b4:	20 93 75 01 	sts	0x0175, r18
            OCR1A = (16050-(15*frequency))/7; // Converts the frequency in deciHertz to OCR1A value based on the observation on the scope that the OCR1A value was 900 for 650 Hz and 1350 for 440 Hz
 3b8:	41 ef       	ldi	r20, 0xF1	; 241
 3ba:	42 03       	mulsu	r20, r18
 3bc:	c0 01       	movw	r24, r0
 3be:	43 9f       	mul	r20, r19
 3c0:	90 0d       	add	r25, r0
 3c2:	11 24       	eor	r1, r1
 3c4:	8e 54       	subi	r24, 0x4E	; 78
 3c6:	91 4c       	sbci	r25, 0xC1	; 193
 3c8:	67 e0       	ldi	r22, 0x07	; 7
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__divmodhi4>
 3d0:	70 93 89 00 	sts	0x0089, r23
 3d4:	60 93 88 00 	sts	0x0088, r22
            sound_time = (int) buffer[2]; // Time for which the sound has to be played
 3d8:	62 81       	ldd	r22, Z+2	; 0x02
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 45 05 	call	0xa8a	; 0xa8a <__floatsisf>
 3e4:	60 93 79 01 	sts	0x0179, r22
 3e8:	70 93 7a 01 	sts	0x017A, r23
 3ec:	80 93 7b 01 	sts	0x017B, r24
 3f0:	90 93 7c 01 	sts	0x017C, r25
            j = 1; // Becomes 1 every time it receives a signal
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	90 93 74 01 	sts	0x0174, r25
 3fc:	80 93 73 01 	sts	0x0173, r24
    }
 400:	ff 91       	pop	r31
 402:	ef 91       	pop	r30
 404:	bf 91       	pop	r27
 406:	af 91       	pop	r26
 408:	9f 91       	pop	r25
 40a:	8f 91       	pop	r24
 40c:	7f 91       	pop	r23
 40e:	6f 91       	pop	r22
 410:	5f 91       	pop	r21
 412:	4f 91       	pop	r20
 414:	3f 91       	pop	r19
 416:	2f 91       	pop	r18
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	1f 90       	pop	r1
 420:	18 95       	reti

00000422 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
 422:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
 424:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
 426:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
 428:	8c e0       	ldi	r24, 0x0C	; 12
 42a:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
 42e:	e9 e6       	ldi	r30, 0x69	; 105
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	80 81       	ld	r24, Z
 434:	80 62       	ori	r24, 0x20	; 32
 436:	80 83       	st	Z, r24
 438:	80 81       	ld	r24, Z
 43a:	8f 7e       	andi	r24, 0xEF	; 239
 43c:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
 43e:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
 440:	78 94       	sei
 442:	08 95       	ret

00000444 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
 444:	1f 93       	push	r17
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	18 2f       	mov	r17, r24
 44c:	d6 2f       	mov	r29, r22
 44e:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
 450:	0e 94 11 02 	call	0x422	; 0x422 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 454:	94 ea       	ldi	r25, 0xA4	; 164
 456:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 45a:	ec eb       	ldi	r30, 0xBC	; 188
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	90 81       	ld	r25, Z
 460:	99 23       	and	r25, r25
 462:	ec f7       	brge	.-6      	; 0x45e <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
 464:	90 e5       	ldi	r25, 0x50	; 80
 466:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
 46a:	94 e8       	ldi	r25, 0x84	; 132
 46c:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 470:	ec eb       	ldi	r30, 0xBC	; 188
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	90 81       	ld	r25, Z
 476:	99 23       	and	r25, r25
 478:	ec f7       	brge	.-6      	; 0x474 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
 47a:	90 91 b9 00 	lds	r25, 0x00B9
 47e:	98 7f       	andi	r25, 0xF8	; 248
 480:	90 32       	cpi	r25, 0x20	; 32
 482:	29 f4       	brne	.+10     	; 0x48e <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 484:	84 e9       	ldi	r24, 0x94	; 148
 486:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	2d c0       	rjmp	.+90     	; 0x4e8 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 494:	84 e8       	ldi	r24, 0x84	; 132
 496:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 49a:	ec eb       	ldi	r30, 0xBC	; 188
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	90 81       	ld	r25, Z
 4a0:	99 23       	and	r25, r25
 4a2:	ec f7       	brge	.-6      	; 0x49e <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
 4a4:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
 4a8:	84 e8       	ldi	r24, 0x84	; 132
 4aa:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 4ae:	ec eb       	ldi	r30, 0xBC	; 188
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 81       	ld	r24, Z
 4b4:	88 23       	and	r24, r24
 4b6:	ec f7       	brge	.-6      	; 0x4b2 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
 4b8:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
 4bc:	84 e8       	ldi	r24, 0x84	; 132
 4be:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 4c2:	ec eb       	ldi	r30, 0xBC	; 188
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	88 23       	and	r24, r24
 4ca:	ec f7       	brge	.-6      	; 0x4c6 <m_rf_open+0x82>
	
	TWDR = packet_length;
 4cc:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
 4d0:	84 e8       	ldi	r24, 0x84	; 132
 4d2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 4d6:	ec eb       	ldi	r30, 0xBC	; 188
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	88 23       	and	r24, r24
 4de:	ec f7       	brge	.-6      	; 0x4da <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 4e0:	84 e9       	ldi	r24, 0x94	; 148
 4e2:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
 4e6:	81 e0       	ldi	r24, 0x01	; 1
}
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	1f 91       	pop	r17
 4ee:	08 95       	ret

000004f0 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 4f6:	84 ea       	ldi	r24, 0xA4	; 164
 4f8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 4fc:	ec eb       	ldi	r30, 0xBC	; 188
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	90 81       	ld	r25, Z
 502:	99 23       	and	r25, r25
 504:	ec f7       	brge	.-6      	; 0x500 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
 506:	81 e5       	ldi	r24, 0x51	; 81
 508:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 50c:	84 e8       	ldi	r24, 0x84	; 132
 50e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
 512:	ec eb       	ldi	r30, 0xBC	; 188
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	90 81       	ld	r25, Z
 518:	99 23       	and	r25, r25
 51a:	ec f7       	brge	.-6      	; 0x516 <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
 51c:	80 91 b9 00 	lds	r24, 0x00B9
 520:	88 7f       	andi	r24, 0xF8	; 248
 522:	88 34       	cpi	r24, 0x48	; 72
 524:	29 f4       	brne	.+10     	; 0x530 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 526:	84 e9       	ldi	r24, 0x94	; 148
 528:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	41 c0       	rjmp	.+130    	; 0x5b2 <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 530:	84 ec       	ldi	r24, 0xC4	; 196
 532:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 536:	ec eb       	ldi	r30, 0xBC	; 188
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	90 81       	ld	r25, Z
 53c:	99 23       	and	r25, r25
 53e:	ec f7       	brge	.-6      	; 0x53a <m_rf_read+0x4a>
	bytes = TWDR;
 540:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
 544:	46 13       	cpse	r20, r22
 546:	09 c0       	rjmp	.+18     	; 0x55a <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
 548:	84 2f       	mov	r24, r20
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	18 16       	cp	r1, r24
 550:	19 06       	cpc	r1, r25
 552:	44 f0       	brlt	.+16     	; 0x564 <m_rf_read+0x74>
 554:	40 e0       	ldi	r20, 0x00	; 0
 556:	50 e0       	ldi	r21, 0x00	; 0
 558:	1a c0       	rjmp	.+52     	; 0x58e <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 55a:	84 e9       	ldi	r24, 0x94	; 148
 55c:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	27 c0       	rjmp	.+78     	; 0x5b2 <m_rf_read+0xc2>
 564:	d9 01       	movw	r26, r18
 566:	50 e0       	ldi	r21, 0x00	; 0
 568:	41 50       	subi	r20, 0x01	; 1
 56a:	51 09       	sbc	r21, r1
 56c:	b9 01       	movw	r22, r18
 56e:	64 0f       	add	r22, r20
 570:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 572:	ec eb       	ldi	r30, 0xBC	; 188
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
 578:	cb eb       	ldi	r28, 0xBB	; 187
 57a:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 57c:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 57e:	90 81       	ld	r25, Z
 580:	99 23       	and	r25, r25
 582:	ec f7       	brge	.-6      	; 0x57e <m_rf_read+0x8e>
		buffer[i] = TWDR;
 584:	98 81       	ld	r25, Y
 586:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
 588:	a6 17       	cp	r26, r22
 58a:	b7 07       	cpc	r27, r23
 58c:	b9 f7       	brne	.-18     	; 0x57c <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
 58e:	84 e8       	ldi	r24, 0x84	; 132
 590:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 594:	ec eb       	ldi	r30, 0xBC	; 188
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	90 81       	ld	r25, Z
 59a:	99 23       	and	r25, r25
 59c:	ec f7       	brge	.-6      	; 0x598 <m_rf_read+0xa8>
	buffer[i++] = TWDR;
 59e:	80 91 bb 00 	lds	r24, 0x00BB
 5a2:	f9 01       	movw	r30, r18
 5a4:	e4 0f       	add	r30, r20
 5a6:	f5 1f       	adc	r31, r21
 5a8:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 5aa:	84 e9       	ldi	r24, 0x94	; 148
 5ac:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
 5b0:	81 e0       	ldi	r24, 0x01	; 1
}
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	08 95       	ret

000005b8 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 5b8:	1f 92       	push	r1
 5ba:	0f 92       	push	r0
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	0f 92       	push	r0
 5c0:	11 24       	eor	r1, r1
 5c2:	8f 93       	push	r24
 5c4:	9f 93       	push	r25
 5c6:	ef 93       	push	r30
 5c8:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
 5ca:	e1 ee       	ldi	r30, 0xE1	; 225
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z
        UDINT = 0;
 5d0:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
 5d2:	83 ff       	sbrs	r24, 3
 5d4:	11 c0       	rjmp	.+34     	; 0x5f8 <__vector_10+0x40>
		UENUM = 0;
 5d6:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 5da:	91 e0       	ldi	r25, 0x01	; 1
 5dc:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
 5e0:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 5e4:	92 e1       	ldi	r25, 0x12	; 18
 5e6:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
 5ea:	98 e0       	ldi	r25, 0x08	; 8
 5ec:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
 5f0:	10 92 81 01 	sts	0x0181, r1
		cdc_line_rtsdtr = 0;
 5f4:	10 92 7f 01 	sts	0x017F, r1
        }
	if (intbits & (1<<SOFI)) {
 5f8:	82 ff       	sbrs	r24, 2
 5fa:	13 c0       	rjmp	.+38     	; 0x622 <__vector_10+0x6a>
		if (usb_configuration) {
 5fc:	80 91 81 01 	lds	r24, 0x0181
 600:	88 23       	and	r24, r24
 602:	79 f0       	breq	.+30     	; 0x622 <__vector_10+0x6a>
			t = transmit_flush_timer;
 604:	80 91 80 01 	lds	r24, 0x0180
			if (t) {
 608:	88 23       	and	r24, r24
 60a:	59 f0       	breq	.+22     	; 0x622 <__vector_10+0x6a>
				transmit_flush_timer = --t;
 60c:	81 50       	subi	r24, 0x01	; 1
 60e:	80 93 80 01 	sts	0x0180, r24
				if (!t) {
 612:	81 11       	cpse	r24, r1
 614:	06 c0       	rjmp	.+12     	; 0x622 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
 616:	84 e0       	ldi	r24, 0x04	; 4
 618:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
 61c:	8a e3       	ldi	r24, 0x3A	; 58
 61e:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 622:	ff 91       	pop	r31
 624:	ef 91       	pop	r30
 626:	9f 91       	pop	r25
 628:	8f 91       	pop	r24
 62a:	0f 90       	pop	r0
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	0f 90       	pop	r0
 630:	1f 90       	pop	r1
 632:	18 95       	reti

00000634 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 634:	1f 92       	push	r1
 636:	0f 92       	push	r0
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	0f 92       	push	r0
 63c:	11 24       	eor	r1, r1
 63e:	0f 93       	push	r16
 640:	1f 93       	push	r17
 642:	2f 93       	push	r18
 644:	3f 93       	push	r19
 646:	4f 93       	push	r20
 648:	5f 93       	push	r21
 64a:	6f 93       	push	r22
 64c:	7f 93       	push	r23
 64e:	8f 93       	push	r24
 650:	9f 93       	push	r25
 652:	af 93       	push	r26
 654:	bf 93       	push	r27
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	ef 93       	push	r30
 65c:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 65e:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 662:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 666:	83 ff       	sbrs	r24, 3
 668:	4c c1       	rjmp	.+664    	; 0x902 <__vector_11+0x2ce>
                bmRequestType = UEDATX;
 66a:	e1 ef       	ldi	r30, 0xF1	; 241
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	60 81       	ld	r22, Z
                bRequest = UEDATX;
 670:	80 81       	ld	r24, Z
                wValue = UEDATX;
 672:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
 674:	90 81       	ld	r25, Z
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	39 2b       	or	r19, r25
                wIndex = UEDATX;
 67a:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
 67c:	90 81       	ld	r25, Z
 67e:	50 e0       	ldi	r21, 0x00	; 0
 680:	59 2b       	or	r21, r25
                wLength = UEDATX;
 682:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
 684:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 686:	92 ef       	ldi	r25, 0xF2	; 242
 688:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
 68c:	86 30       	cpi	r24, 0x06	; 6
 68e:	09 f0       	breq	.+2      	; 0x692 <__vector_11+0x5e>
 690:	58 c0       	rjmp	.+176    	; 0x742 <__vector_11+0x10e>
 692:	04 c0       	rjmp	.+8      	; 0x69c <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 694:	81 e2       	ldi	r24, 0x21	; 33
 696:	80 93 eb 00 	sts	0x00EB, r24
					return;
 69a:	3a c1       	rjmp	.+628    	; 0x910 <__vector_11+0x2dc>
 69c:	66 e0       	ldi	r22, 0x06	; 6
 69e:	8c ea       	ldi	r24, 0xAC	; 172
 6a0:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
 6a2:	fc 01       	movw	r30, r24
 6a4:	a5 91       	lpm	r26, Z+
 6a6:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
 6a8:	2a 17       	cp	r18, r26
 6aa:	3b 07       	cpc	r19, r27
 6ac:	11 f0       	breq	.+4      	; 0x6b2 <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
 6ae:	07 96       	adiw	r24, 0x07	; 7
					continue;
 6b0:	23 c0       	rjmp	.+70     	; 0x6f8 <__vector_11+0xc4>
				}
				list += 2;
 6b2:	fc 01       	movw	r30, r24
 6b4:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 6b6:	a5 91       	lpm	r26, Z+
 6b8:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
 6ba:	4a 17       	cp	r20, r26
 6bc:	5b 07       	cpc	r21, r27
 6be:	11 f0       	breq	.+4      	; 0x6c4 <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
 6c0:	07 96       	adiw	r24, 0x07	; 7
					continue;
 6c2:	1a c0       	rjmp	.+52     	; 0x6f8 <__vector_11+0xc4>
				}
				list += 2;
 6c4:	fc 01       	movw	r30, r24
 6c6:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 6c8:	45 91       	lpm	r20, Z+
 6ca:	54 91       	lpm	r21, Z
				list += 2;
 6cc:	fc 01       	movw	r30, r24
 6ce:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 6d0:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 6d2:	87 2f       	mov	r24, r23
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 6d8:	8f 3f       	cpi	r24, 0xFF	; 255
 6da:	91 05       	cpc	r25, r1
 6dc:	19 f0       	breq	.+6      	; 0x6e4 <__vector_11+0xb0>
 6de:	10 f0       	brcs	.+4      	; 0x6e4 <__vector_11+0xb0>
 6e0:	8f ef       	ldi	r24, 0xFF	; 255
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	82 17       	cp	r24, r18
 6e6:	08 f4       	brcc	.+2      	; 0x6ea <__vector_11+0xb6>
 6e8:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 6ea:	a8 ee       	ldi	r26, 0xE8	; 232
 6ec:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 6ee:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6f0:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 6f2:	c1 ef       	ldi	r28, 0xF1	; 241
 6f4:	d0 e0       	ldi	r29, 0x00	; 0
 6f6:	03 c0       	rjmp	.+6      	; 0x6fe <__vector_11+0xca>
 6f8:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 6fa:	99 f6       	brne	.-90     	; 0x6a2 <__vector_11+0x6e>
 6fc:	cb cf       	rjmp	.-106    	; 0x694 <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 6fe:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 700:	98 2f       	mov	r25, r24
 702:	95 70       	andi	r25, 0x05	; 5
 704:	e1 f3       	breq	.-8      	; 0x6fe <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
 706:	82 fd       	sbrc	r24, 2
 708:	03 c1       	rjmp	.+518    	; 0x910 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 70a:	32 2f       	mov	r19, r18
 70c:	21 31       	cpi	r18, 0x11	; 17
 70e:	08 f0       	brcs	.+2      	; 0x712 <__vector_11+0xde>
 710:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
 712:	33 23       	and	r19, r19
 714:	09 f4       	brne	.+2      	; 0x718 <__vector_11+0xe4>
 716:	f9 c0       	rjmp	.+498    	; 0x90a <__vector_11+0x2d6>
 718:	fa 01       	movw	r30, r20
 71a:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
 71c:	94 91       	lpm	r25, Z
 71e:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 720:	81 50       	subi	r24, 0x01	; 1
 722:	31 96       	adiw	r30, 0x01	; 1
 724:	81 11       	cpse	r24, r1
 726:	fa cf       	rjmp	.-12     	; 0x71c <__vector_11+0xe8>
 728:	8f ef       	ldi	r24, 0xFF	; 255
 72a:	83 0f       	add	r24, r19
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	01 96       	adiw	r24, 0x01	; 1
 730:	48 0f       	add	r20, r24
 732:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 734:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 736:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 738:	21 11       	cpse	r18, r1
 73a:	e1 cf       	rjmp	.-62     	; 0x6fe <__vector_11+0xca>
 73c:	30 31       	cpi	r19, 0x10	; 16
 73e:	f9 f2       	breq	.-66     	; 0x6fe <__vector_11+0xca>
 740:	e7 c0       	rjmp	.+462    	; 0x910 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 742:	85 30       	cpi	r24, 0x05	; 5
 744:	61 f4       	brne	.+24     	; 0x75e <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 746:	8e ef       	ldi	r24, 0xFE	; 254
 748:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 74c:	e8 ee       	ldi	r30, 0xE8	; 232
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
 752:	80 ff       	sbrs	r24, 0
 754:	fd cf       	rjmp	.-6      	; 0x750 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 756:	20 68       	ori	r18, 0x80	; 128
 758:	20 93 e3 00 	sts	0x00E3, r18
			return;
 75c:	d9 c0       	rjmp	.+434    	; 0x910 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 75e:	89 30       	cpi	r24, 0x09	; 9
 760:	09 f0       	breq	.+2      	; 0x764 <__vector_11+0x130>
 762:	35 c0       	rjmp	.+106    	; 0x7ce <__vector_11+0x19a>
 764:	61 11       	cpse	r22, r1
 766:	cd c0       	rjmp	.+410    	; 0x902 <__vector_11+0x2ce>
			usb_configuration = wValue;
 768:	20 93 81 01 	sts	0x0181, r18
			cdc_line_rtsdtr = 0;
 76c:	10 92 7f 01 	sts	0x017F, r1
			transmit_flush_timer = 0;
 770:	10 92 80 01 	sts	0x0180, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 774:	8e ef       	ldi	r24, 0xFE	; 254
 776:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 77a:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 77c:	25 e5       	ldi	r18, 0x55	; 85
 77e:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
 780:	c9 ee       	ldi	r28, 0xE9	; 233
 782:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 784:	ab ee       	ldi	r26, 0xEB	; 235
 786:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 788:	0c ee       	ldi	r16, 0xEC	; 236
 78a:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 78c:	6d ee       	ldi	r22, 0xED	; 237
 78e:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 790:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
 792:	a9 01       	movw	r20, r18
 794:	4f 5f       	subi	r20, 0xFF	; 255
 796:	5f 4f       	sbci	r21, 0xFF	; 255
 798:	f9 01       	movw	r30, r18
 79a:	94 91       	lpm	r25, Z
				UECONX = en;
 79c:	9c 93       	st	X, r25
				if (en) {
 79e:	99 23       	and	r25, r25
 7a0:	61 f0       	breq	.+24     	; 0x7ba <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
 7a2:	fa 01       	movw	r30, r20
 7a4:	44 91       	lpm	r20, Z
 7a6:	f8 01       	movw	r30, r16
 7a8:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
 7aa:	f9 01       	movw	r30, r18
 7ac:	32 96       	adiw	r30, 0x02	; 2
 7ae:	94 91       	lpm	r25, Z
 7b0:	2d 5f       	subi	r18, 0xFD	; 253
 7b2:	3f 4f       	sbci	r19, 0xFF	; 255
 7b4:	fb 01       	movw	r30, r22
 7b6:	90 83       	st	Z, r25
 7b8:	01 c0       	rjmp	.+2      	; 0x7bc <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 7ba:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 7bc:	8f 5f       	subi	r24, 0xFF	; 255
 7be:	85 30       	cpi	r24, 0x05	; 5
 7c0:	39 f7       	brne	.-50     	; 0x790 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 7c2:	ea ee       	ldi	r30, 0xEA	; 234
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	8e e1       	ldi	r24, 0x1E	; 30
 7c8:	80 83       	st	Z, r24
        		UERST = 0;
 7ca:	10 82       	st	Z, r1
			return;
 7cc:	a1 c0       	rjmp	.+322    	; 0x910 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 7ce:	88 30       	cpi	r24, 0x08	; 8
 7d0:	81 f4       	brne	.+32     	; 0x7f2 <__vector_11+0x1be>
 7d2:	60 38       	cpi	r22, 0x80	; 128
 7d4:	09 f0       	breq	.+2      	; 0x7d8 <__vector_11+0x1a4>
 7d6:	95 c0       	rjmp	.+298    	; 0x902 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 7d8:	e8 ee       	ldi	r30, 0xE8	; 232
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	80 81       	ld	r24, Z
 7de:	80 ff       	sbrs	r24, 0
 7e0:	fd cf       	rjmp	.-6      	; 0x7dc <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 7e2:	80 91 81 01 	lds	r24, 0x0181
 7e6:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7ea:	8e ef       	ldi	r24, 0xFE	; 254
 7ec:	80 93 e8 00 	sts	0x00E8, r24
 7f0:	8f c0       	rjmp	.+286    	; 0x910 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 7f2:	81 32       	cpi	r24, 0x21	; 33
 7f4:	b9 f4       	brne	.+46     	; 0x824 <__vector_11+0x1f0>
 7f6:	61 3a       	cpi	r22, 0xA1	; 161
 7f8:	09 f0       	breq	.+2      	; 0x7fc <__vector_11+0x1c8>
 7fa:	83 c0       	rjmp	.+262    	; 0x902 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 7fc:	e8 ee       	ldi	r30, 0xE8	; 232
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	80 81       	ld	r24, Z
 802:	80 ff       	sbrs	r24, 0
 804:	fd cf       	rjmp	.-6      	; 0x800 <__vector_11+0x1cc>
 806:	e8 e6       	ldi	r30, 0x68	; 104
 808:	f1 e0       	ldi	r31, 0x01	; 1
 80a:	2f e6       	ldi	r18, 0x6F	; 111
 80c:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 80e:	a1 ef       	ldi	r26, 0xF1	; 241
 810:	b0 e0       	ldi	r27, 0x00	; 0
 812:	81 91       	ld	r24, Z+
 814:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 816:	e2 17       	cp	r30, r18
 818:	f3 07       	cpc	r31, r19
 81a:	d9 f7       	brne	.-10     	; 0x812 <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 81c:	8e ef       	ldi	r24, 0xFE	; 254
 81e:	80 93 e8 00 	sts	0x00E8, r24
 822:	76 c0       	rjmp	.+236    	; 0x910 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 824:	80 32       	cpi	r24, 0x20	; 32
 826:	d1 f4       	brne	.+52     	; 0x85c <__vector_11+0x228>
 828:	61 32       	cpi	r22, 0x21	; 33
 82a:	09 f0       	breq	.+2      	; 0x82e <__vector_11+0x1fa>
 82c:	6a c0       	rjmp	.+212    	; 0x902 <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 82e:	e8 ee       	ldi	r30, 0xE8	; 232
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	80 81       	ld	r24, Z
 834:	82 ff       	sbrs	r24, 2
 836:	fd cf       	rjmp	.-6      	; 0x832 <__vector_11+0x1fe>
 838:	e8 e6       	ldi	r30, 0x68	; 104
 83a:	f1 e0       	ldi	r31, 0x01	; 1
 83c:	2f e6       	ldi	r18, 0x6F	; 111
 83e:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 840:	a1 ef       	ldi	r26, 0xF1	; 241
 842:	b0 e0       	ldi	r27, 0x00	; 0
 844:	8c 91       	ld	r24, X
 846:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 848:	e2 17       	cp	r30, r18
 84a:	f3 07       	cpc	r31, r19
 84c:	d9 f7       	brne	.-10     	; 0x844 <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 84e:	e8 ee       	ldi	r30, 0xE8	; 232
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	8b ef       	ldi	r24, 0xFB	; 251
 854:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 856:	8e ef       	ldi	r24, 0xFE	; 254
 858:	80 83       	st	Z, r24
 85a:	5a c0       	rjmp	.+180    	; 0x910 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 85c:	82 32       	cpi	r24, 0x22	; 34
 85e:	71 f4       	brne	.+28     	; 0x87c <__vector_11+0x248>
 860:	61 32       	cpi	r22, 0x21	; 33
 862:	09 f0       	breq	.+2      	; 0x866 <__vector_11+0x232>
 864:	4e c0       	rjmp	.+156    	; 0x902 <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
 866:	20 93 7f 01 	sts	0x017F, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 86a:	e8 ee       	ldi	r30, 0xE8	; 232
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	80 81       	ld	r24, Z
 870:	80 ff       	sbrs	r24, 0
 872:	fd cf       	rjmp	.-6      	; 0x86e <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 874:	8e ef       	ldi	r24, 0xFE	; 254
 876:	80 93 e8 00 	sts	0x00E8, r24
 87a:	4a c0       	rjmp	.+148    	; 0x910 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 87c:	81 11       	cpse	r24, r1
 87e:	1a c0       	rjmp	.+52     	; 0x8b4 <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 880:	e8 ee       	ldi	r30, 0xE8	; 232
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	80 81       	ld	r24, Z
 886:	80 ff       	sbrs	r24, 0
 888:	fd cf       	rjmp	.-6      	; 0x884 <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 88a:	62 38       	cpi	r22, 0x82	; 130
 88c:	51 f4       	brne	.+20     	; 0x8a2 <__vector_11+0x26e>
				UENUM = wIndex;
 88e:	e9 ee       	ldi	r30, 0xE9	; 233
 890:	f0 e0       	ldi	r31, 0x00	; 0
 892:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
 894:	80 91 eb 00 	lds	r24, 0x00EB
 898:	85 fb       	bst	r24, 5
 89a:	88 27       	eor	r24, r24
 89c:	80 f9       	bld	r24, 0
				UENUM = 0;
 89e:	10 82       	st	Z, r1
 8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 8a2:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 8a4:	e1 ef       	ldi	r30, 0xF1	; 241
 8a6:	f0 e0       	ldi	r31, 0x00	; 0
 8a8:	80 83       	st	Z, r24
			UEDATX = 0;
 8aa:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 8ac:	8e ef       	ldi	r24, 0xFE	; 254
 8ae:	80 93 e8 00 	sts	0x00E8, r24
 8b2:	2e c0       	rjmp	.+92     	; 0x910 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 8b4:	98 2f       	mov	r25, r24
 8b6:	9d 7f       	andi	r25, 0xFD	; 253
 8b8:	91 30       	cpi	r25, 0x01	; 1
 8ba:	19 f5       	brne	.+70     	; 0x902 <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
 8bc:	62 30       	cpi	r22, 0x02	; 2
 8be:	09 f5       	brne	.+66     	; 0x902 <__vector_11+0x2ce>
 8c0:	23 2b       	or	r18, r19
 8c2:	f9 f4       	brne	.+62     	; 0x902 <__vector_11+0x2ce>
			i = wIndex & 0x7F;
 8c4:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 8c6:	9f ef       	ldi	r25, 0xFF	; 255
 8c8:	94 0f       	add	r25, r20
 8ca:	94 30       	cpi	r25, 0x04	; 4
 8cc:	d0 f4       	brcc	.+52     	; 0x902 <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 8ce:	9e ef       	ldi	r25, 0xFE	; 254
 8d0:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 8d4:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
 8d8:	83 30       	cpi	r24, 0x03	; 3
 8da:	21 f4       	brne	.+8      	; 0x8e4 <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 8dc:	81 e2       	ldi	r24, 0x21	; 33
 8de:	80 93 eb 00 	sts	0x00EB, r24
 8e2:	16 c0       	rjmp	.+44     	; 0x910 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 8e4:	89 e1       	ldi	r24, 0x19	; 25
 8e6:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 8ea:	81 e0       	ldi	r24, 0x01	; 1
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <__vector_11+0x2c0>
 8f0:	88 0f       	add	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	4a 95       	dec	r20
 8f6:	e2 f7       	brpl	.-8      	; 0x8f0 <__vector_11+0x2bc>
 8f8:	ea ee       	ldi	r30, 0xEA	; 234
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	80 83       	st	Z, r24
					UERST = 0;
 8fe:	10 82       	st	Z, r1
 900:	07 c0       	rjmp	.+14     	; 0x910 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 902:	81 e2       	ldi	r24, 0x21	; 33
 904:	80 93 eb 00 	sts	0x00EB, r24
 908:	03 c0       	rjmp	.+6      	; 0x910 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 90a:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 90c:	21 11       	cpse	r18, r1
 90e:	f7 ce       	rjmp	.-530    	; 0x6fe <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 910:	ff 91       	pop	r31
 912:	ef 91       	pop	r30
 914:	df 91       	pop	r29
 916:	cf 91       	pop	r28
 918:	bf 91       	pop	r27
 91a:	af 91       	pop	r26
 91c:	9f 91       	pop	r25
 91e:	8f 91       	pop	r24
 920:	7f 91       	pop	r23
 922:	6f 91       	pop	r22
 924:	5f 91       	pop	r21
 926:	4f 91       	pop	r20
 928:	3f 91       	pop	r19
 92a:	2f 91       	pop	r18
 92c:	1f 91       	pop	r17
 92e:	0f 91       	pop	r16
 930:	0f 90       	pop	r0
 932:	0f be       	out	0x3f, r0	; 63
 934:	0f 90       	pop	r0
 936:	1f 90       	pop	r1
 938:	18 95       	reti

0000093a <__cmpsf2>:
 93a:	0e 94 80 05 	call	0xb00	; 0xb00 <__fp_cmp>
 93e:	08 f4       	brcc	.+2      	; 0x942 <__cmpsf2+0x8>
 940:	81 e0       	ldi	r24, 0x01	; 1
 942:	08 95       	ret

00000944 <__divsf3>:
 944:	0e 94 b6 04 	call	0x96c	; 0x96c <__divsf3x>
 948:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__fp_round>
 94c:	0e 94 b4 05 	call	0xb68	; 0xb68 <__fp_pscB>
 950:	58 f0       	brcs	.+22     	; 0x968 <__divsf3+0x24>
 952:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_pscA>
 956:	40 f0       	brcs	.+16     	; 0x968 <__divsf3+0x24>
 958:	29 f4       	brne	.+10     	; 0x964 <__divsf3+0x20>
 95a:	5f 3f       	cpi	r21, 0xFF	; 255
 95c:	29 f0       	breq	.+10     	; 0x968 <__divsf3+0x24>
 95e:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__fp_inf>
 962:	51 11       	cpse	r21, r1
 964:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__fp_szero>
 968:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__fp_nan>

0000096c <__divsf3x>:
 96c:	0e 94 cc 05 	call	0xb98	; 0xb98 <__fp_split3>
 970:	68 f3       	brcs	.-38     	; 0x94c <__divsf3+0x8>

00000972 <__divsf3_pse>:
 972:	99 23       	and	r25, r25
 974:	b1 f3       	breq	.-20     	; 0x962 <__divsf3+0x1e>
 976:	55 23       	and	r21, r21
 978:	91 f3       	breq	.-28     	; 0x95e <__divsf3+0x1a>
 97a:	95 1b       	sub	r25, r21
 97c:	55 0b       	sbc	r21, r21
 97e:	bb 27       	eor	r27, r27
 980:	aa 27       	eor	r26, r26
 982:	62 17       	cp	r22, r18
 984:	73 07       	cpc	r23, r19
 986:	84 07       	cpc	r24, r20
 988:	38 f0       	brcs	.+14     	; 0x998 <__divsf3_pse+0x26>
 98a:	9f 5f       	subi	r25, 0xFF	; 255
 98c:	5f 4f       	sbci	r21, 0xFF	; 255
 98e:	22 0f       	add	r18, r18
 990:	33 1f       	adc	r19, r19
 992:	44 1f       	adc	r20, r20
 994:	aa 1f       	adc	r26, r26
 996:	a9 f3       	breq	.-22     	; 0x982 <__divsf3_pse+0x10>
 998:	35 d0       	rcall	.+106    	; 0xa04 <__divsf3_pse+0x92>
 99a:	0e 2e       	mov	r0, r30
 99c:	3a f0       	brmi	.+14     	; 0x9ac <__divsf3_pse+0x3a>
 99e:	e0 e8       	ldi	r30, 0x80	; 128
 9a0:	32 d0       	rcall	.+100    	; 0xa06 <__divsf3_pse+0x94>
 9a2:	91 50       	subi	r25, 0x01	; 1
 9a4:	50 40       	sbci	r21, 0x00	; 0
 9a6:	e6 95       	lsr	r30
 9a8:	00 1c       	adc	r0, r0
 9aa:	ca f7       	brpl	.-14     	; 0x99e <__divsf3_pse+0x2c>
 9ac:	2b d0       	rcall	.+86     	; 0xa04 <__divsf3_pse+0x92>
 9ae:	fe 2f       	mov	r31, r30
 9b0:	29 d0       	rcall	.+82     	; 0xa04 <__divsf3_pse+0x92>
 9b2:	66 0f       	add	r22, r22
 9b4:	77 1f       	adc	r23, r23
 9b6:	88 1f       	adc	r24, r24
 9b8:	bb 1f       	adc	r27, r27
 9ba:	26 17       	cp	r18, r22
 9bc:	37 07       	cpc	r19, r23
 9be:	48 07       	cpc	r20, r24
 9c0:	ab 07       	cpc	r26, r27
 9c2:	b0 e8       	ldi	r27, 0x80	; 128
 9c4:	09 f0       	breq	.+2      	; 0x9c8 <__divsf3_pse+0x56>
 9c6:	bb 0b       	sbc	r27, r27
 9c8:	80 2d       	mov	r24, r0
 9ca:	bf 01       	movw	r22, r30
 9cc:	ff 27       	eor	r31, r31
 9ce:	93 58       	subi	r25, 0x83	; 131
 9d0:	5f 4f       	sbci	r21, 0xFF	; 255
 9d2:	3a f0       	brmi	.+14     	; 0x9e2 <__divsf3_pse+0x70>
 9d4:	9e 3f       	cpi	r25, 0xFE	; 254
 9d6:	51 05       	cpc	r21, r1
 9d8:	78 f0       	brcs	.+30     	; 0x9f8 <__divsf3_pse+0x86>
 9da:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__fp_inf>
 9de:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__fp_szero>
 9e2:	5f 3f       	cpi	r21, 0xFF	; 255
 9e4:	e4 f3       	brlt	.-8      	; 0x9de <__divsf3_pse+0x6c>
 9e6:	98 3e       	cpi	r25, 0xE8	; 232
 9e8:	d4 f3       	brlt	.-12     	; 0x9de <__divsf3_pse+0x6c>
 9ea:	86 95       	lsr	r24
 9ec:	77 95       	ror	r23
 9ee:	67 95       	ror	r22
 9f0:	b7 95       	ror	r27
 9f2:	f7 95       	ror	r31
 9f4:	9f 5f       	subi	r25, 0xFF	; 255
 9f6:	c9 f7       	brne	.-14     	; 0x9ea <__divsf3_pse+0x78>
 9f8:	88 0f       	add	r24, r24
 9fa:	91 1d       	adc	r25, r1
 9fc:	96 95       	lsr	r25
 9fe:	87 95       	ror	r24
 a00:	97 f9       	bld	r25, 7
 a02:	08 95       	ret
 a04:	e1 e0       	ldi	r30, 0x01	; 1
 a06:	66 0f       	add	r22, r22
 a08:	77 1f       	adc	r23, r23
 a0a:	88 1f       	adc	r24, r24
 a0c:	bb 1f       	adc	r27, r27
 a0e:	62 17       	cp	r22, r18
 a10:	73 07       	cpc	r23, r19
 a12:	84 07       	cpc	r24, r20
 a14:	ba 07       	cpc	r27, r26
 a16:	20 f0       	brcs	.+8      	; 0xa20 <__divsf3_pse+0xae>
 a18:	62 1b       	sub	r22, r18
 a1a:	73 0b       	sbc	r23, r19
 a1c:	84 0b       	sbc	r24, r20
 a1e:	ba 0b       	sbc	r27, r26
 a20:	ee 1f       	adc	r30, r30
 a22:	88 f7       	brcc	.-30     	; 0xa06 <__divsf3_pse+0x94>
 a24:	e0 95       	com	r30
 a26:	08 95       	ret

00000a28 <__fixunssfsi>:
 a28:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_splitA>
 a2c:	88 f0       	brcs	.+34     	; 0xa50 <__fixunssfsi+0x28>
 a2e:	9f 57       	subi	r25, 0x7F	; 127
 a30:	98 f0       	brcs	.+38     	; 0xa58 <__fixunssfsi+0x30>
 a32:	b9 2f       	mov	r27, r25
 a34:	99 27       	eor	r25, r25
 a36:	b7 51       	subi	r27, 0x17	; 23
 a38:	b0 f0       	brcs	.+44     	; 0xa66 <__fixunssfsi+0x3e>
 a3a:	e1 f0       	breq	.+56     	; 0xa74 <__fixunssfsi+0x4c>
 a3c:	66 0f       	add	r22, r22
 a3e:	77 1f       	adc	r23, r23
 a40:	88 1f       	adc	r24, r24
 a42:	99 1f       	adc	r25, r25
 a44:	1a f0       	brmi	.+6      	; 0xa4c <__fixunssfsi+0x24>
 a46:	ba 95       	dec	r27
 a48:	c9 f7       	brne	.-14     	; 0xa3c <__fixunssfsi+0x14>
 a4a:	14 c0       	rjmp	.+40     	; 0xa74 <__fixunssfsi+0x4c>
 a4c:	b1 30       	cpi	r27, 0x01	; 1
 a4e:	91 f0       	breq	.+36     	; 0xa74 <__fixunssfsi+0x4c>
 a50:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fp_zero>
 a54:	b1 e0       	ldi	r27, 0x01	; 1
 a56:	08 95       	ret
 a58:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__fp_zero>
 a5c:	67 2f       	mov	r22, r23
 a5e:	78 2f       	mov	r23, r24
 a60:	88 27       	eor	r24, r24
 a62:	b8 5f       	subi	r27, 0xF8	; 248
 a64:	39 f0       	breq	.+14     	; 0xa74 <__fixunssfsi+0x4c>
 a66:	b9 3f       	cpi	r27, 0xF9	; 249
 a68:	cc f3       	brlt	.-14     	; 0xa5c <__fixunssfsi+0x34>
 a6a:	86 95       	lsr	r24
 a6c:	77 95       	ror	r23
 a6e:	67 95       	ror	r22
 a70:	b3 95       	inc	r27
 a72:	d9 f7       	brne	.-10     	; 0xa6a <__fixunssfsi+0x42>
 a74:	3e f4       	brtc	.+14     	; 0xa84 <__fixunssfsi+0x5c>
 a76:	90 95       	com	r25
 a78:	80 95       	com	r24
 a7a:	70 95       	com	r23
 a7c:	61 95       	neg	r22
 a7e:	7f 4f       	sbci	r23, 0xFF	; 255
 a80:	8f 4f       	sbci	r24, 0xFF	; 255
 a82:	9f 4f       	sbci	r25, 0xFF	; 255
 a84:	08 95       	ret

00000a86 <__floatunsisf>:
 a86:	e8 94       	clt
 a88:	09 c0       	rjmp	.+18     	; 0xa9c <__floatsisf+0x12>

00000a8a <__floatsisf>:
 a8a:	97 fb       	bst	r25, 7
 a8c:	3e f4       	brtc	.+14     	; 0xa9c <__floatsisf+0x12>
 a8e:	90 95       	com	r25
 a90:	80 95       	com	r24
 a92:	70 95       	com	r23
 a94:	61 95       	neg	r22
 a96:	7f 4f       	sbci	r23, 0xFF	; 255
 a98:	8f 4f       	sbci	r24, 0xFF	; 255
 a9a:	9f 4f       	sbci	r25, 0xFF	; 255
 a9c:	99 23       	and	r25, r25
 a9e:	a9 f0       	breq	.+42     	; 0xaca <__floatsisf+0x40>
 aa0:	f9 2f       	mov	r31, r25
 aa2:	96 e9       	ldi	r25, 0x96	; 150
 aa4:	bb 27       	eor	r27, r27
 aa6:	93 95       	inc	r25
 aa8:	f6 95       	lsr	r31
 aaa:	87 95       	ror	r24
 aac:	77 95       	ror	r23
 aae:	67 95       	ror	r22
 ab0:	b7 95       	ror	r27
 ab2:	f1 11       	cpse	r31, r1
 ab4:	f8 cf       	rjmp	.-16     	; 0xaa6 <__floatsisf+0x1c>
 ab6:	fa f4       	brpl	.+62     	; 0xaf6 <__floatsisf+0x6c>
 ab8:	bb 0f       	add	r27, r27
 aba:	11 f4       	brne	.+4      	; 0xac0 <__floatsisf+0x36>
 abc:	60 ff       	sbrs	r22, 0
 abe:	1b c0       	rjmp	.+54     	; 0xaf6 <__floatsisf+0x6c>
 ac0:	6f 5f       	subi	r22, 0xFF	; 255
 ac2:	7f 4f       	sbci	r23, 0xFF	; 255
 ac4:	8f 4f       	sbci	r24, 0xFF	; 255
 ac6:	9f 4f       	sbci	r25, 0xFF	; 255
 ac8:	16 c0       	rjmp	.+44     	; 0xaf6 <__floatsisf+0x6c>
 aca:	88 23       	and	r24, r24
 acc:	11 f0       	breq	.+4      	; 0xad2 <__floatsisf+0x48>
 ace:	96 e9       	ldi	r25, 0x96	; 150
 ad0:	11 c0       	rjmp	.+34     	; 0xaf4 <__floatsisf+0x6a>
 ad2:	77 23       	and	r23, r23
 ad4:	21 f0       	breq	.+8      	; 0xade <__floatsisf+0x54>
 ad6:	9e e8       	ldi	r25, 0x8E	; 142
 ad8:	87 2f       	mov	r24, r23
 ada:	76 2f       	mov	r23, r22
 adc:	05 c0       	rjmp	.+10     	; 0xae8 <__floatsisf+0x5e>
 ade:	66 23       	and	r22, r22
 ae0:	71 f0       	breq	.+28     	; 0xafe <__floatsisf+0x74>
 ae2:	96 e8       	ldi	r25, 0x86	; 134
 ae4:	86 2f       	mov	r24, r22
 ae6:	70 e0       	ldi	r23, 0x00	; 0
 ae8:	60 e0       	ldi	r22, 0x00	; 0
 aea:	2a f0       	brmi	.+10     	; 0xaf6 <__floatsisf+0x6c>
 aec:	9a 95       	dec	r25
 aee:	66 0f       	add	r22, r22
 af0:	77 1f       	adc	r23, r23
 af2:	88 1f       	adc	r24, r24
 af4:	da f7       	brpl	.-10     	; 0xaec <__floatsisf+0x62>
 af6:	88 0f       	add	r24, r24
 af8:	96 95       	lsr	r25
 afa:	87 95       	ror	r24
 afc:	97 f9       	bld	r25, 7
 afe:	08 95       	ret

00000b00 <__fp_cmp>:
 b00:	99 0f       	add	r25, r25
 b02:	00 08       	sbc	r0, r0
 b04:	55 0f       	add	r21, r21
 b06:	aa 0b       	sbc	r26, r26
 b08:	e0 e8       	ldi	r30, 0x80	; 128
 b0a:	fe ef       	ldi	r31, 0xFE	; 254
 b0c:	16 16       	cp	r1, r22
 b0e:	17 06       	cpc	r1, r23
 b10:	e8 07       	cpc	r30, r24
 b12:	f9 07       	cpc	r31, r25
 b14:	c0 f0       	brcs	.+48     	; 0xb46 <__fp_cmp+0x46>
 b16:	12 16       	cp	r1, r18
 b18:	13 06       	cpc	r1, r19
 b1a:	e4 07       	cpc	r30, r20
 b1c:	f5 07       	cpc	r31, r21
 b1e:	98 f0       	brcs	.+38     	; 0xb46 <__fp_cmp+0x46>
 b20:	62 1b       	sub	r22, r18
 b22:	73 0b       	sbc	r23, r19
 b24:	84 0b       	sbc	r24, r20
 b26:	95 0b       	sbc	r25, r21
 b28:	39 f4       	brne	.+14     	; 0xb38 <__fp_cmp+0x38>
 b2a:	0a 26       	eor	r0, r26
 b2c:	61 f0       	breq	.+24     	; 0xb46 <__fp_cmp+0x46>
 b2e:	23 2b       	or	r18, r19
 b30:	24 2b       	or	r18, r20
 b32:	25 2b       	or	r18, r21
 b34:	21 f4       	brne	.+8      	; 0xb3e <__fp_cmp+0x3e>
 b36:	08 95       	ret
 b38:	0a 26       	eor	r0, r26
 b3a:	09 f4       	brne	.+2      	; 0xb3e <__fp_cmp+0x3e>
 b3c:	a1 40       	sbci	r26, 0x01	; 1
 b3e:	a6 95       	lsr	r26
 b40:	8f ef       	ldi	r24, 0xFF	; 255
 b42:	81 1d       	adc	r24, r1
 b44:	81 1d       	adc	r24, r1
 b46:	08 95       	ret

00000b48 <__fp_inf>:
 b48:	97 f9       	bld	r25, 7
 b4a:	9f 67       	ori	r25, 0x7F	; 127
 b4c:	80 e8       	ldi	r24, 0x80	; 128
 b4e:	70 e0       	ldi	r23, 0x00	; 0
 b50:	60 e0       	ldi	r22, 0x00	; 0
 b52:	08 95       	ret

00000b54 <__fp_nan>:
 b54:	9f ef       	ldi	r25, 0xFF	; 255
 b56:	80 ec       	ldi	r24, 0xC0	; 192
 b58:	08 95       	ret

00000b5a <__fp_pscA>:
 b5a:	00 24       	eor	r0, r0
 b5c:	0a 94       	dec	r0
 b5e:	16 16       	cp	r1, r22
 b60:	17 06       	cpc	r1, r23
 b62:	18 06       	cpc	r1, r24
 b64:	09 06       	cpc	r0, r25
 b66:	08 95       	ret

00000b68 <__fp_pscB>:
 b68:	00 24       	eor	r0, r0
 b6a:	0a 94       	dec	r0
 b6c:	12 16       	cp	r1, r18
 b6e:	13 06       	cpc	r1, r19
 b70:	14 06       	cpc	r1, r20
 b72:	05 06       	cpc	r0, r21
 b74:	08 95       	ret

00000b76 <__fp_round>:
 b76:	09 2e       	mov	r0, r25
 b78:	03 94       	inc	r0
 b7a:	00 0c       	add	r0, r0
 b7c:	11 f4       	brne	.+4      	; 0xb82 <__fp_round+0xc>
 b7e:	88 23       	and	r24, r24
 b80:	52 f0       	brmi	.+20     	; 0xb96 <__fp_round+0x20>
 b82:	bb 0f       	add	r27, r27
 b84:	40 f4       	brcc	.+16     	; 0xb96 <__fp_round+0x20>
 b86:	bf 2b       	or	r27, r31
 b88:	11 f4       	brne	.+4      	; 0xb8e <__fp_round+0x18>
 b8a:	60 ff       	sbrs	r22, 0
 b8c:	04 c0       	rjmp	.+8      	; 0xb96 <__fp_round+0x20>
 b8e:	6f 5f       	subi	r22, 0xFF	; 255
 b90:	7f 4f       	sbci	r23, 0xFF	; 255
 b92:	8f 4f       	sbci	r24, 0xFF	; 255
 b94:	9f 4f       	sbci	r25, 0xFF	; 255
 b96:	08 95       	ret

00000b98 <__fp_split3>:
 b98:	57 fd       	sbrc	r21, 7
 b9a:	90 58       	subi	r25, 0x80	; 128
 b9c:	44 0f       	add	r20, r20
 b9e:	55 1f       	adc	r21, r21
 ba0:	59 f0       	breq	.+22     	; 0xbb8 <__fp_splitA+0x10>
 ba2:	5f 3f       	cpi	r21, 0xFF	; 255
 ba4:	71 f0       	breq	.+28     	; 0xbc2 <__fp_splitA+0x1a>
 ba6:	47 95       	ror	r20

00000ba8 <__fp_splitA>:
 ba8:	88 0f       	add	r24, r24
 baa:	97 fb       	bst	r25, 7
 bac:	99 1f       	adc	r25, r25
 bae:	61 f0       	breq	.+24     	; 0xbc8 <__fp_splitA+0x20>
 bb0:	9f 3f       	cpi	r25, 0xFF	; 255
 bb2:	79 f0       	breq	.+30     	; 0xbd2 <__fp_splitA+0x2a>
 bb4:	87 95       	ror	r24
 bb6:	08 95       	ret
 bb8:	12 16       	cp	r1, r18
 bba:	13 06       	cpc	r1, r19
 bbc:	14 06       	cpc	r1, r20
 bbe:	55 1f       	adc	r21, r21
 bc0:	f2 cf       	rjmp	.-28     	; 0xba6 <__fp_split3+0xe>
 bc2:	46 95       	lsr	r20
 bc4:	f1 df       	rcall	.-30     	; 0xba8 <__fp_splitA>
 bc6:	08 c0       	rjmp	.+16     	; 0xbd8 <__fp_splitA+0x30>
 bc8:	16 16       	cp	r1, r22
 bca:	17 06       	cpc	r1, r23
 bcc:	18 06       	cpc	r1, r24
 bce:	99 1f       	adc	r25, r25
 bd0:	f1 cf       	rjmp	.-30     	; 0xbb4 <__fp_splitA+0xc>
 bd2:	86 95       	lsr	r24
 bd4:	71 05       	cpc	r23, r1
 bd6:	61 05       	cpc	r22, r1
 bd8:	08 94       	sec
 bda:	08 95       	ret

00000bdc <__fp_zero>:
 bdc:	e8 94       	clt

00000bde <__fp_szero>:
 bde:	bb 27       	eor	r27, r27
 be0:	66 27       	eor	r22, r22
 be2:	77 27       	eor	r23, r23
 be4:	cb 01       	movw	r24, r22
 be6:	97 f9       	bld	r25, 7
 be8:	08 95       	ret

00000bea <__mulsf3>:
 bea:	0e 94 08 06 	call	0xc10	; 0xc10 <__mulsf3x>
 bee:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__fp_round>
 bf2:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_pscA>
 bf6:	38 f0       	brcs	.+14     	; 0xc06 <__mulsf3+0x1c>
 bf8:	0e 94 b4 05 	call	0xb68	; 0xb68 <__fp_pscB>
 bfc:	20 f0       	brcs	.+8      	; 0xc06 <__mulsf3+0x1c>
 bfe:	95 23       	and	r25, r21
 c00:	11 f0       	breq	.+4      	; 0xc06 <__mulsf3+0x1c>
 c02:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__fp_inf>
 c06:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__fp_nan>
 c0a:	11 24       	eor	r1, r1
 c0c:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__fp_szero>

00000c10 <__mulsf3x>:
 c10:	0e 94 cc 05 	call	0xb98	; 0xb98 <__fp_split3>
 c14:	70 f3       	brcs	.-36     	; 0xbf2 <__mulsf3+0x8>

00000c16 <__mulsf3_pse>:
 c16:	95 9f       	mul	r25, r21
 c18:	c1 f3       	breq	.-16     	; 0xc0a <__mulsf3+0x20>
 c1a:	95 0f       	add	r25, r21
 c1c:	50 e0       	ldi	r21, 0x00	; 0
 c1e:	55 1f       	adc	r21, r21
 c20:	62 9f       	mul	r22, r18
 c22:	f0 01       	movw	r30, r0
 c24:	72 9f       	mul	r23, r18
 c26:	bb 27       	eor	r27, r27
 c28:	f0 0d       	add	r31, r0
 c2a:	b1 1d       	adc	r27, r1
 c2c:	63 9f       	mul	r22, r19
 c2e:	aa 27       	eor	r26, r26
 c30:	f0 0d       	add	r31, r0
 c32:	b1 1d       	adc	r27, r1
 c34:	aa 1f       	adc	r26, r26
 c36:	64 9f       	mul	r22, r20
 c38:	66 27       	eor	r22, r22
 c3a:	b0 0d       	add	r27, r0
 c3c:	a1 1d       	adc	r26, r1
 c3e:	66 1f       	adc	r22, r22
 c40:	82 9f       	mul	r24, r18
 c42:	22 27       	eor	r18, r18
 c44:	b0 0d       	add	r27, r0
 c46:	a1 1d       	adc	r26, r1
 c48:	62 1f       	adc	r22, r18
 c4a:	73 9f       	mul	r23, r19
 c4c:	b0 0d       	add	r27, r0
 c4e:	a1 1d       	adc	r26, r1
 c50:	62 1f       	adc	r22, r18
 c52:	83 9f       	mul	r24, r19
 c54:	a0 0d       	add	r26, r0
 c56:	61 1d       	adc	r22, r1
 c58:	22 1f       	adc	r18, r18
 c5a:	74 9f       	mul	r23, r20
 c5c:	33 27       	eor	r19, r19
 c5e:	a0 0d       	add	r26, r0
 c60:	61 1d       	adc	r22, r1
 c62:	23 1f       	adc	r18, r19
 c64:	84 9f       	mul	r24, r20
 c66:	60 0d       	add	r22, r0
 c68:	21 1d       	adc	r18, r1
 c6a:	82 2f       	mov	r24, r18
 c6c:	76 2f       	mov	r23, r22
 c6e:	6a 2f       	mov	r22, r26
 c70:	11 24       	eor	r1, r1
 c72:	9f 57       	subi	r25, 0x7F	; 127
 c74:	50 40       	sbci	r21, 0x00	; 0
 c76:	9a f0       	brmi	.+38     	; 0xc9e <__mulsf3_pse+0x88>
 c78:	f1 f0       	breq	.+60     	; 0xcb6 <__mulsf3_pse+0xa0>
 c7a:	88 23       	and	r24, r24
 c7c:	4a f0       	brmi	.+18     	; 0xc90 <__mulsf3_pse+0x7a>
 c7e:	ee 0f       	add	r30, r30
 c80:	ff 1f       	adc	r31, r31
 c82:	bb 1f       	adc	r27, r27
 c84:	66 1f       	adc	r22, r22
 c86:	77 1f       	adc	r23, r23
 c88:	88 1f       	adc	r24, r24
 c8a:	91 50       	subi	r25, 0x01	; 1
 c8c:	50 40       	sbci	r21, 0x00	; 0
 c8e:	a9 f7       	brne	.-22     	; 0xc7a <__mulsf3_pse+0x64>
 c90:	9e 3f       	cpi	r25, 0xFE	; 254
 c92:	51 05       	cpc	r21, r1
 c94:	80 f0       	brcs	.+32     	; 0xcb6 <__mulsf3_pse+0xa0>
 c96:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__fp_inf>
 c9a:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__fp_szero>
 c9e:	5f 3f       	cpi	r21, 0xFF	; 255
 ca0:	e4 f3       	brlt	.-8      	; 0xc9a <__mulsf3_pse+0x84>
 ca2:	98 3e       	cpi	r25, 0xE8	; 232
 ca4:	d4 f3       	brlt	.-12     	; 0xc9a <__mulsf3_pse+0x84>
 ca6:	86 95       	lsr	r24
 ca8:	77 95       	ror	r23
 caa:	67 95       	ror	r22
 cac:	b7 95       	ror	r27
 cae:	f7 95       	ror	r31
 cb0:	e7 95       	ror	r30
 cb2:	9f 5f       	subi	r25, 0xFF	; 255
 cb4:	c1 f7       	brne	.-16     	; 0xca6 <__mulsf3_pse+0x90>
 cb6:	fe 2b       	or	r31, r30
 cb8:	88 0f       	add	r24, r24
 cba:	91 1d       	adc	r25, r1
 cbc:	96 95       	lsr	r25
 cbe:	87 95       	ror	r24
 cc0:	97 f9       	bld	r25, 7
 cc2:	08 95       	ret

00000cc4 <__divmodhi4>:
 cc4:	97 fb       	bst	r25, 7
 cc6:	07 2e       	mov	r0, r23
 cc8:	16 f4       	brtc	.+4      	; 0xcce <__divmodhi4+0xa>
 cca:	00 94       	com	r0
 ccc:	07 d0       	rcall	.+14     	; 0xcdc <__divmodhi4_neg1>
 cce:	77 fd       	sbrc	r23, 7
 cd0:	09 d0       	rcall	.+18     	; 0xce4 <__divmodhi4_neg2>
 cd2:	0e 94 76 06 	call	0xcec	; 0xcec <__udivmodhi4>
 cd6:	07 fc       	sbrc	r0, 7
 cd8:	05 d0       	rcall	.+10     	; 0xce4 <__divmodhi4_neg2>
 cda:	3e f4       	brtc	.+14     	; 0xcea <__divmodhi4_exit>

00000cdc <__divmodhi4_neg1>:
 cdc:	90 95       	com	r25
 cde:	81 95       	neg	r24
 ce0:	9f 4f       	sbci	r25, 0xFF	; 255
 ce2:	08 95       	ret

00000ce4 <__divmodhi4_neg2>:
 ce4:	70 95       	com	r23
 ce6:	61 95       	neg	r22
 ce8:	7f 4f       	sbci	r23, 0xFF	; 255

00000cea <__divmodhi4_exit>:
 cea:	08 95       	ret

00000cec <__udivmodhi4>:
 cec:	aa 1b       	sub	r26, r26
 cee:	bb 1b       	sub	r27, r27
 cf0:	51 e1       	ldi	r21, 0x11	; 17
 cf2:	07 c0       	rjmp	.+14     	; 0xd02 <__udivmodhi4_ep>

00000cf4 <__udivmodhi4_loop>:
 cf4:	aa 1f       	adc	r26, r26
 cf6:	bb 1f       	adc	r27, r27
 cf8:	a6 17       	cp	r26, r22
 cfa:	b7 07       	cpc	r27, r23
 cfc:	10 f0       	brcs	.+4      	; 0xd02 <__udivmodhi4_ep>
 cfe:	a6 1b       	sub	r26, r22
 d00:	b7 0b       	sbc	r27, r23

00000d02 <__udivmodhi4_ep>:
 d02:	88 1f       	adc	r24, r24
 d04:	99 1f       	adc	r25, r25
 d06:	5a 95       	dec	r21
 d08:	a9 f7       	brne	.-22     	; 0xcf4 <__udivmodhi4_loop>
 d0a:	80 95       	com	r24
 d0c:	90 95       	com	r25
 d0e:	bc 01       	movw	r22, r24
 d10:	cd 01       	movw	r24, r26
 d12:	08 95       	ret

00000d14 <_exit>:
 d14:	f8 94       	cli

00000d16 <__stop_program>:
 d16:	ff cf       	rjmp	.-2      	; 0xd16 <__stop_program>
