
Stroboscope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000d78  00000e0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  00000e14  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a7  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000368  00000000  00000000  0000202b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d6  00000000  00000000  00002393  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000035c  00000000  00000000  00002a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000537  00000000  00000000  00002dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a50  00000000  00000000  000032ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00004d4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  28:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_10>
  2c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__vector_11>
  30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  68:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  6c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  70:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  74:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  7c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  80:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  84:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  88:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  90:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  94:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  98:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  9c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>

000000ac <__trampolines_end>:
  ac:	00 01       	movw	r0, r0
  ae:	00 00       	nop
  b0:	43 01       	movw	r8, r6
  b2:	12 00       	.word	0x0012	; ????
  b4:	02 00       	.word	0x0002	; ????
  b6:	00 00       	nop
  b8:	01 43       	sbci	r16, 0x31	; 49
  ba:	00 03       	mulsu	r16, r16
  bc:	00 00       	nop
  be:	fc 00       	.word	0x00fc	; ????
  c0:	04 01       	movw	r0, r8
  c2:	03 09       	sbc	r16, r3
  c4:	04 e8       	ldi	r16, 0x84	; 132
  c6:	00 12       	cpse	r0, r16
  c8:	02 03       	mulsu	r16, r18
  ca:	09 04       	cpc	r0, r9
  cc:	e0 00       	.word	0x00e0	; ????
  ce:	06 03       	mulsu	r16, r22
  d0:	03 09       	sbc	r16, r3
  d2:	04 d6       	rcall	.+3080   	; 0xcdc <__mulsf3_pse+0x80>
  d4:	00 08       	sbc	r0, r0

000000d6 <string3>:
  d6:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000000e0 <string2>:
  e0:	06 03 4d 00 32 00 00 00                             ..M.2...

000000e8 <string1>:
  e8:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
  f8:	65 00 00 00                                         e...

000000fc <string0>:
  fc:	04 03 09 04                                         ....

00000100 <config1_descriptor>:
 100:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 110:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 120:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 130:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 140:	40 00 00                                            @..

00000143 <device_descriptor>:
 143:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 153:	03 01                                               ..

00000155 <endpoint_config_table>:
 155:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000160 <__ctors_end>:
 160:	11 24       	eor	r1, r1
 162:	1f be       	out	0x3f, r1	; 63
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	da e0       	ldi	r29, 0x0A	; 10
 168:	de bf       	out	0x3e, r29	; 62
 16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
 16c:	11 e0       	ldi	r17, 0x01	; 1
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	e8 e7       	ldi	r30, 0x78	; 120
 174:	fd e0       	ldi	r31, 0x0D	; 13
 176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
 178:	05 90       	lpm	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	a8 30       	cpi	r26, 0x08	; 8
 17e:	b1 07       	cpc	r27, r17
 180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	a8 e0       	ldi	r26, 0x08	; 8
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
 18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
 18c:	ac 30       	cpi	r26, 0x0C	; 12
 18e:	b2 07       	cpc	r27, r18
 190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
 192:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
 196:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <_exit>

0000019a <__bad_interrupt>:
 19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <main>:
#include "m_usb.h"


int main(void)

{
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
 1a6:	60 97       	sbiw	r28, 0x10	; 16
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	f8 94       	cli
 1ac:	de bf       	out	0x3e, r29	; 62
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	cd bf       	out	0x3d, r28	; 61
m_usb_init();
 1b2:	0e 94 0c 02 	call	0x418	; 0x418 <m_usb_init>

float Hz=0;
float a=0,b=0,c=0,d=0;

//System Clock
m_clockdivide(6); //system clock set to 2000 KHz
 1b6:	e1 e6       	ldi	r30, 0x61	; 97
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 e8       	ldi	r24, 0x80	; 128
 1bc:	80 83       	st	Z, r24
 1be:	86 e0       	ldi	r24, 0x06	; 6
 1c0:	80 83       	st	Z, r24

//ADC
clear(ADMUX,REFS1); // set voltage reference to Vcc
 1c2:	ac e7       	ldi	r26, 0x7C	; 124
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	8c 91       	ld	r24, X
 1c8:	8f 77       	andi	r24, 0x7F	; 127
 1ca:	8c 93       	st	X, r24
set(ADMUX,REFS0); //^
 1cc:	8c 91       	ld	r24, X
 1ce:	80 64       	ori	r24, 0x40	; 64
 1d0:	8c 93       	st	X, r24

clear(DIDR0,ADC0D); // Disables digital input to 0th bit
 1d2:	ee e7       	ldi	r30, 0x7E	; 126
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	8e 7f       	andi	r24, 0xFE	; 254
 1da:	80 83       	st	Z, r24

set(ADCSRA,ADATE); // free running mode trigger
 1dc:	ea e7       	ldi	r30, 0x7A	; 122
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	80 62       	ori	r24, 0x20	; 32
 1e4:	80 83       	st	Z, r24

clear(ADMUX,MUX0); // single ended channel selection
 1e6:	8c 91       	ld	r24, X
 1e8:	8e 7f       	andi	r24, 0xFE	; 254
 1ea:	8c 93       	st	X, r24
clear(ADMUX,MUX1); // ^
 1ec:	8c 91       	ld	r24, X
 1ee:	8d 7f       	andi	r24, 0xFD	; 253
 1f0:	8c 93       	st	X, r24
clear(ADMUX,MUX2); // ^
 1f2:	8c 91       	ld	r24, X
 1f4:	8b 7f       	andi	r24, 0xFB	; 251
 1f6:	8c 93       	st	X, r24
clear(ADCSRB,MUX5); // ^
 1f8:	ab e7       	ldi	r26, 0x7B	; 123
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	8c 91       	ld	r24, X
 1fe:	8f 7d       	andi	r24, 0xDF	; 223
 200:	8c 93       	st	X, r24

set(ADCSRA,ADEN); // starts the conversion process
 202:	80 81       	ld	r24, Z
 204:	80 68       	ori	r24, 0x80	; 128
 206:	80 83       	st	Z, r24
set(ADCSRA,ADSC); // ^
 208:	80 81       	ld	r24, Z
 20a:	80 64       	ori	r24, 0x40	; 64
 20c:	80 83       	st	Z, r24

set(ADCSRA,ADIF); // resets the flag to read the results
 20e:	80 81       	ld	r24, Z
 210:	80 61       	ori	r24, 0x10	; 16
 212:	80 83       	st	Z, r24

clear(ADCSRA, ADPS2); // ADC pre-scaler /8
 214:	80 81       	ld	r24, Z
 216:	8b 7f       	andi	r24, 0xFB	; 251
 218:	80 83       	st	Z, r24

set(ADCSRA, ADPS1); // ^
 21a:	80 81       	ld	r24, Z
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	80 83       	st	Z, r24
set(ADCSRA, ADPS0); // ^
 220:	80 81       	ld	r24, Z
 222:	81 60       	ori	r24, 0x01	; 1
 224:	80 83       	st	Z, r24

{

Hz=(ADC+17.3389)/34.6778;
floor(Hz);
OCR1A=65535*((Hz-0.5)/29.5);
 226:	0f 2e       	mov	r0, r31
 228:	f8 e8       	ldi	r31, 0x88	; 136
 22a:	cf 2e       	mov	r12, r31
 22c:	d1 2c       	mov	r13, r1
 22e:	f0 2d       	mov	r31, r0

}

a=check(PIND,1);
 230:	21 2c       	mov	r2, r1
 232:	31 2c       	mov	r3, r1
 234:	41 2c       	mov	r4, r1
 236:	51 2c       	mov	r5, r1
d=check(PIND,4); 

OCR1B= OCR1A*((0.05*a+0.15*b+0.3*c+0.40*d)+0.05);   //sets the value at which I want the duty cycle
m_usb_tx_int(a);

set(TCCR1B,WGM13); // Single-Slope: Timer UP to a value, reset to 0x0000 (set/reset PWM): MODE 15 UP to        OCR1A (8-bit), PWM mode
 238:	0f 2e       	mov	r0, r31
 23a:	f1 e8       	ldi	r31, 0x81	; 129
 23c:	ef 2e       	mov	r14, r31
 23e:	f1 2c       	mov	r15, r1
 240:	f0 2d       	mov	r31, r0

while(1)

{

if (check(ADCSRA,ADIF))
 242:	ea e7       	ldi	r30, 0x7A	; 122
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	84 ff       	sbrs	r24, 4
 24a:	2b c0       	rjmp	.+86     	; 0x2a2 <main+0x104>

{

Hz=(ADC+17.3389)/34.6778;
 24c:	e8 e7       	ldi	r30, 0x78	; 120
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	60 81       	ld	r22, Z
 252:	71 81       	ldd	r23, Z+1	; 0x01
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 8a 05 	call	0xb14	; 0xb14 <__floatunsisf>
 25c:	21 e1       	ldi	r18, 0x11	; 17
 25e:	36 eb       	ldi	r19, 0xB6	; 182
 260:	4a e8       	ldi	r20, 0x8A	; 138
 262:	51 e4       	ldi	r21, 0x41	; 65
 264:	0e 94 76 04 	call	0x8ec	; 0x8ec <__addsf3>
 268:	21 e1       	ldi	r18, 0x11	; 17
 26a:	36 eb       	ldi	r19, 0xB6	; 182
 26c:	4a e0       	ldi	r20, 0x0A	; 10
 26e:	52 e4       	ldi	r21, 0x42	; 66
 270:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__divsf3>
floor(Hz);
OCR1A=65535*((Hz-0.5)/29.5);
 274:	20 e0       	ldi	r18, 0x00	; 0
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	5f e3       	ldi	r21, 0x3F	; 63
 27c:	0e 94 75 04 	call	0x8ea	; 0x8ea <__subsf3>
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	4c ee       	ldi	r20, 0xEC	; 236
 286:	51 e4       	ldi	r21, 0x41	; 65
 288:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__divsf3>
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	3f ef       	ldi	r19, 0xFF	; 255
 290:	4f e7       	ldi	r20, 0x7F	; 127
 292:	57 e4       	ldi	r21, 0x47	; 71
 294:	0e 94 18 06 	call	0xc30	; 0xc30 <__mulsf3>
 298:	0e 94 5b 05 	call	0xab6	; 0xab6 <__fixunssfsi>
 29c:	f6 01       	movw	r30, r12
 29e:	71 83       	std	Z+1, r23	; 0x01
 2a0:	60 83       	st	Z, r22

}

a=check(PIND,1);
 2a2:	49 99       	sbic	0x09, 1	; 9
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <main+0x112>
 2a6:	64 2c       	mov	r6, r4
 2a8:	75 2c       	mov	r7, r5
 2aa:	00 e0       	ldi	r16, 0x00	; 0
 2ac:	10 e0       	ldi	r17, 0x00	; 0
 2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <main+0x11a>
 2b0:	62 2c       	mov	r6, r2
 2b2:	73 2c       	mov	r7, r3
 2b4:	00 e8       	ldi	r16, 0x80	; 128
 2b6:	1f e3       	ldi	r17, 0x3F	; 63
b=check(PIND,2);
 2b8:	4a 99       	sbic	0x09, 2	; 9
 2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <main+0x128>
 2bc:	4d 82       	std	Y+5, r4	; 0x05
 2be:	5e 82       	std	Y+6, r5	; 0x06
 2c0:	1f 82       	std	Y+7, r1	; 0x07
 2c2:	18 86       	std	Y+8, r1	; 0x08
 2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <main+0x134>
 2c6:	2d 82       	std	Y+5, r2	; 0x05
 2c8:	3e 82       	std	Y+6, r3	; 0x06
 2ca:	f0 e8       	ldi	r31, 0x80	; 128
 2cc:	ff 83       	std	Y+7, r31	; 0x07
 2ce:	8f e3       	ldi	r24, 0x3F	; 63
 2d0:	88 87       	std	Y+8, r24	; 0x08
c=check(PIND,3);
 2d2:	4b 99       	sbic	0x09, 3	; 9
 2d4:	05 c0       	rjmp	.+10     	; 0x2e0 <main+0x142>
 2d6:	49 86       	std	Y+9, r4	; 0x09
 2d8:	5a 86       	std	Y+10, r5	; 0x0a
 2da:	1b 86       	std	Y+11, r1	; 0x0b
 2dc:	1c 86       	std	Y+12, r1	; 0x0c
 2de:	06 c0       	rjmp	.+12     	; 0x2ec <main+0x14e>
 2e0:	29 86       	std	Y+9, r2	; 0x09
 2e2:	3a 86       	std	Y+10, r3	; 0x0a
 2e4:	e0 e8       	ldi	r30, 0x80	; 128
 2e6:	eb 87       	std	Y+11, r30	; 0x0b
 2e8:	ff e3       	ldi	r31, 0x3F	; 63
 2ea:	fc 87       	std	Y+12, r31	; 0x0c
d=check(PIND,4); 
 2ec:	4c 99       	sbic	0x09, 4	; 9
 2ee:	05 c0       	rjmp	.+10     	; 0x2fa <main+0x15c>
 2f0:	4d 86       	std	Y+13, r4	; 0x0d
 2f2:	5e 86       	std	Y+14, r5	; 0x0e
 2f4:	1f 86       	std	Y+15, r1	; 0x0f
 2f6:	18 8a       	std	Y+16, r1	; 0x10
 2f8:	06 c0       	rjmp	.+12     	; 0x306 <main+0x168>
 2fa:	2d 86       	std	Y+13, r2	; 0x0d
 2fc:	3e 86       	std	Y+14, r3	; 0x0e
 2fe:	80 e8       	ldi	r24, 0x80	; 128
 300:	8f 87       	std	Y+15, r24	; 0x0f
 302:	ef e3       	ldi	r30, 0x3F	; 63
 304:	e8 8b       	std	Y+16, r30	; 0x10

OCR1B= OCR1A*((0.05*a+0.15*b+0.3*c+0.40*d)+0.05);   //sets the value at which I want the duty cycle
 306:	f6 01       	movw	r30, r12
 308:	60 81       	ld	r22, Z
 30a:	71 81       	ldd	r23, Z+1	; 0x01
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 8a 05 	call	0xb14	; 0xb14 <__floatunsisf>
 314:	69 83       	std	Y+1, r22	; 0x01
 316:	7a 83       	std	Y+2, r23	; 0x02
 318:	8b 83       	std	Y+3, r24	; 0x03
 31a:	9c 83       	std	Y+4, r25	; 0x04
 31c:	2d ec       	ldi	r18, 0xCD	; 205
 31e:	3c ec       	ldi	r19, 0xCC	; 204
 320:	4c e4       	ldi	r20, 0x4C	; 76
 322:	5d e3       	ldi	r21, 0x3D	; 61
 324:	66 2d       	mov	r22, r6
 326:	77 2d       	mov	r23, r7
 328:	80 2f       	mov	r24, r16
 32a:	91 2f       	mov	r25, r17
 32c:	0e 94 18 06 	call	0xc30	; 0xc30 <__mulsf3>
 330:	4b 01       	movw	r8, r22
 332:	5c 01       	movw	r10, r24
 334:	2a e9       	ldi	r18, 0x9A	; 154
 336:	39 e9       	ldi	r19, 0x99	; 153
 338:	49 e1       	ldi	r20, 0x19	; 25
 33a:	5e e3       	ldi	r21, 0x3E	; 62
 33c:	6d 81       	ldd	r22, Y+5	; 0x05
 33e:	7e 81       	ldd	r23, Y+6	; 0x06
 340:	8f 81       	ldd	r24, Y+7	; 0x07
 342:	98 85       	ldd	r25, Y+8	; 0x08
 344:	0e 94 18 06 	call	0xc30	; 0xc30 <__mulsf3>
 348:	9b 01       	movw	r18, r22
 34a:	ac 01       	movw	r20, r24
 34c:	c5 01       	movw	r24, r10
 34e:	b4 01       	movw	r22, r8
 350:	0e 94 76 04 	call	0x8ec	; 0x8ec <__addsf3>
 354:	4b 01       	movw	r8, r22
 356:	5c 01       	movw	r10, r24
 358:	2a e9       	ldi	r18, 0x9A	; 154
 35a:	39 e9       	ldi	r19, 0x99	; 153
 35c:	49 e9       	ldi	r20, 0x99	; 153
 35e:	5e e3       	ldi	r21, 0x3E	; 62
 360:	69 85       	ldd	r22, Y+9	; 0x09
 362:	7a 85       	ldd	r23, Y+10	; 0x0a
 364:	8b 85       	ldd	r24, Y+11	; 0x0b
 366:	9c 85       	ldd	r25, Y+12	; 0x0c
 368:	0e 94 18 06 	call	0xc30	; 0xc30 <__mulsf3>
 36c:	9b 01       	movw	r18, r22
 36e:	ac 01       	movw	r20, r24
 370:	c5 01       	movw	r24, r10
 372:	b4 01       	movw	r22, r8
 374:	0e 94 76 04 	call	0x8ec	; 0x8ec <__addsf3>
 378:	4b 01       	movw	r8, r22
 37a:	5c 01       	movw	r10, r24
 37c:	2d ec       	ldi	r18, 0xCD	; 205
 37e:	3c ec       	ldi	r19, 0xCC	; 204
 380:	4c ec       	ldi	r20, 0xCC	; 204
 382:	5e e3       	ldi	r21, 0x3E	; 62
 384:	6d 85       	ldd	r22, Y+13	; 0x0d
 386:	7e 85       	ldd	r23, Y+14	; 0x0e
 388:	8f 85       	ldd	r24, Y+15	; 0x0f
 38a:	98 89       	ldd	r25, Y+16	; 0x10
 38c:	0e 94 18 06 	call	0xc30	; 0xc30 <__mulsf3>
 390:	9b 01       	movw	r18, r22
 392:	ac 01       	movw	r20, r24
 394:	c5 01       	movw	r24, r10
 396:	b4 01       	movw	r22, r8
 398:	0e 94 76 04 	call	0x8ec	; 0x8ec <__addsf3>
 39c:	2d ec       	ldi	r18, 0xCD	; 205
 39e:	3c ec       	ldi	r19, 0xCC	; 204
 3a0:	4c e4       	ldi	r20, 0x4C	; 76
 3a2:	5d e3       	ldi	r21, 0x3D	; 61
 3a4:	0e 94 76 04 	call	0x8ec	; 0x8ec <__addsf3>
 3a8:	9b 01       	movw	r18, r22
 3aa:	ac 01       	movw	r20, r24
 3ac:	69 81       	ldd	r22, Y+1	; 0x01
 3ae:	7a 81       	ldd	r23, Y+2	; 0x02
 3b0:	8b 81       	ldd	r24, Y+3	; 0x03
 3b2:	9c 81       	ldd	r25, Y+4	; 0x04
 3b4:	0e 94 18 06 	call	0xc30	; 0xc30 <__mulsf3>
 3b8:	0e 94 5b 05 	call	0xab6	; 0xab6 <__fixunssfsi>
 3bc:	ea e8       	ldi	r30, 0x8A	; 138
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	71 83       	std	Z+1, r23	; 0x01
 3c2:	60 83       	st	Z, r22
m_usb_tx_int(a);
 3c4:	66 2d       	mov	r22, r6
 3c6:	77 2d       	mov	r23, r7
 3c8:	80 2f       	mov	r24, r16
 3ca:	91 2f       	mov	r25, r17
 3cc:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixsfsi>
 3d0:	cb 01       	movw	r24, r22
 3d2:	0e 94 41 04 	call	0x882	; 0x882 <m_usb_tx_int>

set(TCCR1B,WGM13); // Single-Slope: Timer UP to a value, reset to 0x0000 (set/reset PWM): MODE 15 UP to        OCR1A (8-bit), PWM mode
 3d6:	f7 01       	movw	r30, r14
 3d8:	80 81       	ld	r24, Z
 3da:	80 61       	ori	r24, 0x10	; 16
 3dc:	80 83       	st	Z, r24

set(TCCR1B,WGM12); // ^
 3de:	80 81       	ld	r24, Z
 3e0:	88 60       	ori	r24, 0x08	; 8
 3e2:	80 83       	st	Z, r24
set(TCCR1A,WGM11); // ^
 3e4:	e0 e8       	ldi	r30, 0x80	; 128
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	82 60       	ori	r24, 0x02	; 2
 3ec:	80 83       	st	Z, r24
set(TCCR1A,WGM10); // ^
 3ee:	80 81       	ld	r24, Z
 3f0:	81 60       	ori	r24, 0x01	; 1
 3f2:	80 83       	st	Z, r24

set(TCCR1A,COM1B1); // clear at OCR1B, set at rollover
 3f4:	80 81       	ld	r24, Z
 3f6:	80 62       	ori	r24, 0x20	; 32
 3f8:	80 83       	st	Z, r24


clear(TCCR1A,COM1B0); //^
 3fa:	80 81       	ld	r24, Z
 3fc:	8f 7e       	andi	r24, 0xEF	; 239
 3fe:	80 83       	st	Z, r24

clear(TCCR1B, CS12); // pre-scaler /8
 400:	f7 01       	movw	r30, r14
 402:	80 81       	ld	r24, Z
 404:	8b 7f       	andi	r24, 0xFB	; 251
 406:	80 83       	st	Z, r24

set(TCCR1B, CS11); // ^
 408:	80 81       	ld	r24, Z
 40a:	82 60       	ori	r24, 0x02	; 2
 40c:	80 83       	st	Z, r24
clear(TCCR1B, CS10); // ^
 40e:	80 81       	ld	r24, Z
 410:	8e 7f       	andi	r24, 0xFE	; 254
 412:	80 83       	st	Z, r24

set(DDRB,6); // sets the output pin at B6
 414:	26 9a       	sbi	0x04, 6	; 4
}
 416:	15 cf       	rjmp	.-470    	; 0x242 <main+0xa4>

00000418 <m_usb_init>:
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
 418:	81 e0       	ldi	r24, 0x01	; 1
	return 0;
 41a:	80 93 d7 00 	sts	0x00D7, r24
int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 41e:	80 ea       	ldi	r24, 0xA0	; 160
 420:	80 93 d8 00 	sts	0x00D8, r24
			if (UDFNUML == timeout) {
				transmit_previous_timeout = 1;
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
 424:	82 e1       	ldi	r24, 0x12	; 18
 426:	89 bd       	out	0x29, r24	; 41
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
	return 0;
}
 428:	09 b4       	in	r0, 0x29	; 41
 42a:	00 fe       	sbrs	r0, 0
 42c:	fd cf       	rjmp	.-6      	; 0x428 <m_usb_init+0x10>
 42e:	80 e9       	ldi	r24, 0x90	; 144
 430:	80 93 d8 00 	sts	0x00D8, r24
 434:	10 92 e0 00 	sts	0x00E0, r1
 438:	10 92 0b 01 	sts	0x010B, r1
 43c:	10 92 08 01 	sts	0x0108, r1
 440:	8c e0       	ldi	r24, 0x0C	; 12
 442:	80 93 e2 00 	sts	0x00E2, r24
 446:	78 94       	sei
        USB_CONFIG();				// start USB clock
        UDCON = 0;				// enable attach resistor
	usb_configuration = 0;
	cdc_line_rtsdtr = 0;
        UDIEN = (1<<EORSTE)|(1<<SOFE);
	sei();
 448:	08 95       	ret

0000044a <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 44e:	90 91 0b 01 	lds	r25, 0x010B
 452:	99 23       	and	r25, r25
 454:	09 f4       	brne	.+2      	; 0x458 <m_usb_tx_char+0xe>
 456:	4c c0       	rjmp	.+152    	; 0x4f0 <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 458:	9f b7       	in	r25, 0x3f	; 63
	cli();
 45a:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
 45c:	24 e0       	ldi	r18, 0x04	; 4
 45e:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
 462:	20 91 09 01 	lds	r18, 0x0109
 466:	22 23       	and	r18, r18
 468:	49 f0       	breq	.+18     	; 0x47c <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
 46a:	20 91 e8 00 	lds	r18, 0x00E8
 46e:	25 fd       	sbrc	r18, 5
 470:	03 c0       	rjmp	.+6      	; 0x478 <m_usb_tx_char+0x2e>
			SREG = intr_state;
 472:	9f bf       	out	0x3f, r25	; 63
			return -1;
 474:	8f ef       	ldi	r24, 0xFF	; 255
 476:	41 c0       	rjmp	.+130    	; 0x4fa <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
 478:	10 92 09 01 	sts	0x0109, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
 47c:	30 91 e4 00 	lds	r19, 0x00E4
 480:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 482:	20 91 e8 00 	lds	r18, 0x00E8
 486:	25 fd       	sbrc	r18, 5
 488:	24 c0       	rjmp	.+72     	; 0x4d2 <m_usb_tx_char+0x88>
		SREG = intr_state;
 48a:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
 48c:	90 91 e4 00 	lds	r25, 0x00E4
 490:	93 17       	cp	r25, r19
 492:	81 f0       	breq	.+32     	; 0x4b4 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 494:	90 91 0b 01 	lds	r25, 0x010B
 498:	99 23       	and	r25, r25
 49a:	61 f1       	breq	.+88     	; 0x4f4 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
 49c:	a9 ee       	ldi	r26, 0xE9	; 233
 49e:	b0 e0       	ldi	r27, 0x00	; 0
 4a0:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 4a2:	e8 ee       	ldi	r30, 0xE8	; 232
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
 4a6:	c4 ee       	ldi	r28, 0xE4	; 228
 4a8:	d0 e0       	ldi	r29, 0x00	; 0
 4aa:	0d c0       	rjmp	.+26     	; 0x4c6 <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
 4ac:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
 4ae:	98 81       	ld	r25, Y
 4b0:	93 13       	cpse	r25, r19
 4b2:	05 c0       	rjmp	.+10     	; 0x4be <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	80 93 09 01 	sts	0x0109, r24
			return -1;
 4ba:	8f ef       	ldi	r24, 0xFF	; 255
 4bc:	1e c0       	rjmp	.+60     	; 0x4fa <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 4be:	90 91 0b 01 	lds	r25, 0x010B
 4c2:	99 23       	and	r25, r25
 4c4:	c9 f0       	breq	.+50     	; 0x4f8 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
 4c6:	9f b7       	in	r25, 0x3f	; 63
		cli();
 4c8:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
 4ca:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 4cc:	20 81       	ld	r18, Z
 4ce:	25 ff       	sbrs	r18, 5
 4d0:	ed cf       	rjmp	.-38     	; 0x4ac <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
 4d2:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 4d6:	80 91 e8 00 	lds	r24, 0x00E8
 4da:	85 fd       	sbrc	r24, 5
 4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <m_usb_tx_char+0x9a>
 4de:	8a e3       	ldi	r24, 0x3A	; 58
 4e0:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 4e4:	85 e0       	ldi	r24, 0x05	; 5
 4e6:	80 93 0a 01 	sts	0x010A, r24
	SREG = intr_state;
 4ea:	9f bf       	out	0x3f, r25	; 63
	return 0;
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	05 c0       	rjmp	.+10     	; 0x4fa <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 4f0:	8f ef       	ldi	r24, 0xFF	; 255
 4f2:	03 c0       	rjmp	.+6      	; 0x4fa <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 4f4:	8f ef       	ldi	r24, 0xFF	; 255
 4f6:	01 c0       	rjmp	.+2      	; 0x4fa <m_usb_tx_char+0xb0>
 4f8:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	08 95       	ret

00000500 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 500:	1f 92       	push	r1
 502:	0f 92       	push	r0
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	0f 92       	push	r0
 508:	11 24       	eor	r1, r1
 50a:	8f 93       	push	r24
 50c:	9f 93       	push	r25
 50e:	ef 93       	push	r30
 510:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
 512:	e1 ee       	ldi	r30, 0xE1	; 225
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	80 81       	ld	r24, Z
        UDINT = 0;
 518:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
 51a:	83 ff       	sbrs	r24, 3
 51c:	11 c0       	rjmp	.+34     	; 0x540 <__vector_10+0x40>
		UENUM = 0;
 51e:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 522:	91 e0       	ldi	r25, 0x01	; 1
 524:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
 528:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 52c:	92 e1       	ldi	r25, 0x12	; 18
 52e:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
 532:	98 e0       	ldi	r25, 0x08	; 8
 534:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
 538:	10 92 0b 01 	sts	0x010B, r1
		cdc_line_rtsdtr = 0;
 53c:	10 92 08 01 	sts	0x0108, r1
        }
	if (intbits & (1<<SOFI)) {
 540:	82 ff       	sbrs	r24, 2
 542:	13 c0       	rjmp	.+38     	; 0x56a <__vector_10+0x6a>
		if (usb_configuration) {
 544:	80 91 0b 01 	lds	r24, 0x010B
 548:	88 23       	and	r24, r24
 54a:	79 f0       	breq	.+30     	; 0x56a <__vector_10+0x6a>
			t = transmit_flush_timer;
 54c:	80 91 0a 01 	lds	r24, 0x010A
			if (t) {
 550:	88 23       	and	r24, r24
 552:	59 f0       	breq	.+22     	; 0x56a <__vector_10+0x6a>
				transmit_flush_timer = --t;
 554:	81 50       	subi	r24, 0x01	; 1
 556:	80 93 0a 01 	sts	0x010A, r24
				if (!t) {
 55a:	81 11       	cpse	r24, r1
 55c:	06 c0       	rjmp	.+12     	; 0x56a <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
 55e:	84 e0       	ldi	r24, 0x04	; 4
 560:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
 564:	8a e3       	ldi	r24, 0x3A	; 58
 566:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 56a:	ff 91       	pop	r31
 56c:	ef 91       	pop	r30
 56e:	9f 91       	pop	r25
 570:	8f 91       	pop	r24
 572:	0f 90       	pop	r0
 574:	0f be       	out	0x3f, r0	; 63
 576:	0f 90       	pop	r0
 578:	1f 90       	pop	r1
 57a:	18 95       	reti

0000057c <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 57c:	1f 92       	push	r1
 57e:	0f 92       	push	r0
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	0f 92       	push	r0
 584:	11 24       	eor	r1, r1
 586:	0f 93       	push	r16
 588:	1f 93       	push	r17
 58a:	2f 93       	push	r18
 58c:	3f 93       	push	r19
 58e:	4f 93       	push	r20
 590:	5f 93       	push	r21
 592:	6f 93       	push	r22
 594:	7f 93       	push	r23
 596:	8f 93       	push	r24
 598:	9f 93       	push	r25
 59a:	af 93       	push	r26
 59c:	bf 93       	push	r27
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	ef 93       	push	r30
 5a4:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 5a6:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 5aa:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 5ae:	83 ff       	sbrs	r24, 3
 5b0:	4c c1       	rjmp	.+664    	; 0x84a <__vector_11+0x2ce>
                bmRequestType = UEDATX;
 5b2:	e1 ef       	ldi	r30, 0xF1	; 241
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	60 81       	ld	r22, Z
                bRequest = UEDATX;
 5b8:	80 81       	ld	r24, Z
                wValue = UEDATX;
 5ba:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
 5bc:	90 81       	ld	r25, Z
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	39 2b       	or	r19, r25
                wIndex = UEDATX;
 5c2:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
 5c4:	90 81       	ld	r25, Z
 5c6:	50 e0       	ldi	r21, 0x00	; 0
 5c8:	59 2b       	or	r21, r25
                wLength = UEDATX;
 5ca:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
 5cc:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 5ce:	92 ef       	ldi	r25, 0xF2	; 242
 5d0:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
 5d4:	86 30       	cpi	r24, 0x06	; 6
 5d6:	09 f0       	breq	.+2      	; 0x5da <__vector_11+0x5e>
 5d8:	58 c0       	rjmp	.+176    	; 0x68a <__vector_11+0x10e>
 5da:	04 c0       	rjmp	.+8      	; 0x5e4 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 5dc:	81 e2       	ldi	r24, 0x21	; 33
 5de:	80 93 eb 00 	sts	0x00EB, r24
					return;
 5e2:	3a c1       	rjmp	.+628    	; 0x858 <__vector_11+0x2dc>
 5e4:	66 e0       	ldi	r22, 0x06	; 6
 5e6:	8c ea       	ldi	r24, 0xAC	; 172
 5e8:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
 5ea:	fc 01       	movw	r30, r24
 5ec:	a5 91       	lpm	r26, Z+
 5ee:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
 5f0:	2a 17       	cp	r18, r26
 5f2:	3b 07       	cpc	r19, r27
 5f4:	11 f0       	breq	.+4      	; 0x5fa <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
 5f6:	07 96       	adiw	r24, 0x07	; 7
					continue;
 5f8:	23 c0       	rjmp	.+70     	; 0x640 <__vector_11+0xc4>
				}
				list += 2;
 5fa:	fc 01       	movw	r30, r24
 5fc:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 5fe:	a5 91       	lpm	r26, Z+
 600:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
 602:	4a 17       	cp	r20, r26
 604:	5b 07       	cpc	r21, r27
 606:	11 f0       	breq	.+4      	; 0x60c <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
 608:	07 96       	adiw	r24, 0x07	; 7
					continue;
 60a:	1a c0       	rjmp	.+52     	; 0x640 <__vector_11+0xc4>
				}
				list += 2;
 60c:	fc 01       	movw	r30, r24
 60e:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 610:	45 91       	lpm	r20, Z+
 612:	54 91       	lpm	r21, Z
				list += 2;
 614:	fc 01       	movw	r30, r24
 616:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 618:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 61a:	87 2f       	mov	r24, r23
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 620:	8f 3f       	cpi	r24, 0xFF	; 255
 622:	91 05       	cpc	r25, r1
 624:	19 f0       	breq	.+6      	; 0x62c <__vector_11+0xb0>
 626:	10 f0       	brcs	.+4      	; 0x62c <__vector_11+0xb0>
 628:	8f ef       	ldi	r24, 0xFF	; 255
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	82 17       	cp	r24, r18
 62e:	08 f4       	brcc	.+2      	; 0x632 <__vector_11+0xb6>
 630:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 632:	a8 ee       	ldi	r26, 0xE8	; 232
 634:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 636:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 638:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 63a:	c1 ef       	ldi	r28, 0xF1	; 241
 63c:	d0 e0       	ldi	r29, 0x00	; 0
 63e:	03 c0       	rjmp	.+6      	; 0x646 <__vector_11+0xca>
 640:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 642:	99 f6       	brne	.-90     	; 0x5ea <__vector_11+0x6e>
 644:	cb cf       	rjmp	.-106    	; 0x5dc <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 646:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 648:	98 2f       	mov	r25, r24
 64a:	95 70       	andi	r25, 0x05	; 5
 64c:	e1 f3       	breq	.-8      	; 0x646 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
 64e:	82 fd       	sbrc	r24, 2
 650:	03 c1       	rjmp	.+518    	; 0x858 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 652:	32 2f       	mov	r19, r18
 654:	21 31       	cpi	r18, 0x11	; 17
 656:	08 f0       	brcs	.+2      	; 0x65a <__vector_11+0xde>
 658:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
 65a:	33 23       	and	r19, r19
 65c:	09 f4       	brne	.+2      	; 0x660 <__vector_11+0xe4>
 65e:	f9 c0       	rjmp	.+498    	; 0x852 <__vector_11+0x2d6>
 660:	fa 01       	movw	r30, r20
 662:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
 664:	94 91       	lpm	r25, Z
 666:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 668:	81 50       	subi	r24, 0x01	; 1
 66a:	31 96       	adiw	r30, 0x01	; 1
 66c:	81 11       	cpse	r24, r1
 66e:	fa cf       	rjmp	.-12     	; 0x664 <__vector_11+0xe8>
 670:	8f ef       	ldi	r24, 0xFF	; 255
 672:	83 0f       	add	r24, r19
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	01 96       	adiw	r24, 0x01	; 1
 678:	48 0f       	add	r20, r24
 67a:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 67c:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 67e:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 680:	21 11       	cpse	r18, r1
 682:	e1 cf       	rjmp	.-62     	; 0x646 <__vector_11+0xca>
 684:	30 31       	cpi	r19, 0x10	; 16
 686:	f9 f2       	breq	.-66     	; 0x646 <__vector_11+0xca>
 688:	e7 c0       	rjmp	.+462    	; 0x858 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 68a:	85 30       	cpi	r24, 0x05	; 5
 68c:	61 f4       	brne	.+24     	; 0x6a6 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 68e:	8e ef       	ldi	r24, 0xFE	; 254
 690:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 694:	e8 ee       	ldi	r30, 0xE8	; 232
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	80 81       	ld	r24, Z
 69a:	80 ff       	sbrs	r24, 0
 69c:	fd cf       	rjmp	.-6      	; 0x698 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 69e:	20 68       	ori	r18, 0x80	; 128
 6a0:	20 93 e3 00 	sts	0x00E3, r18
			return;
 6a4:	d9 c0       	rjmp	.+434    	; 0x858 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 6a6:	89 30       	cpi	r24, 0x09	; 9
 6a8:	09 f0       	breq	.+2      	; 0x6ac <__vector_11+0x130>
 6aa:	35 c0       	rjmp	.+106    	; 0x716 <__vector_11+0x19a>
 6ac:	61 11       	cpse	r22, r1
 6ae:	cd c0       	rjmp	.+410    	; 0x84a <__vector_11+0x2ce>
			usb_configuration = wValue;
 6b0:	20 93 0b 01 	sts	0x010B, r18
			cdc_line_rtsdtr = 0;
 6b4:	10 92 08 01 	sts	0x0108, r1
			transmit_flush_timer = 0;
 6b8:	10 92 0a 01 	sts	0x010A, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6bc:	8e ef       	ldi	r24, 0xFE	; 254
 6be:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 6c2:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 6c4:	25 e5       	ldi	r18, 0x55	; 85
 6c6:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
 6c8:	c9 ee       	ldi	r28, 0xE9	; 233
 6ca:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 6cc:	ab ee       	ldi	r26, 0xEB	; 235
 6ce:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 6d0:	0c ee       	ldi	r16, 0xEC	; 236
 6d2:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 6d4:	6d ee       	ldi	r22, 0xED	; 237
 6d6:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 6d8:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
 6da:	a9 01       	movw	r20, r18
 6dc:	4f 5f       	subi	r20, 0xFF	; 255
 6de:	5f 4f       	sbci	r21, 0xFF	; 255
 6e0:	f9 01       	movw	r30, r18
 6e2:	94 91       	lpm	r25, Z
				UECONX = en;
 6e4:	9c 93       	st	X, r25
				if (en) {
 6e6:	99 23       	and	r25, r25
 6e8:	61 f0       	breq	.+24     	; 0x702 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
 6ea:	fa 01       	movw	r30, r20
 6ec:	44 91       	lpm	r20, Z
 6ee:	f8 01       	movw	r30, r16
 6f0:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
 6f2:	f9 01       	movw	r30, r18
 6f4:	32 96       	adiw	r30, 0x02	; 2
 6f6:	94 91       	lpm	r25, Z
 6f8:	2d 5f       	subi	r18, 0xFD	; 253
 6fa:	3f 4f       	sbci	r19, 0xFF	; 255
 6fc:	fb 01       	movw	r30, r22
 6fe:	90 83       	st	Z, r25
 700:	01 c0       	rjmp	.+2      	; 0x704 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 702:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 704:	8f 5f       	subi	r24, 0xFF	; 255
 706:	85 30       	cpi	r24, 0x05	; 5
 708:	39 f7       	brne	.-50     	; 0x6d8 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 70a:	ea ee       	ldi	r30, 0xEA	; 234
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	8e e1       	ldi	r24, 0x1E	; 30
 710:	80 83       	st	Z, r24
        		UERST = 0;
 712:	10 82       	st	Z, r1
			return;
 714:	a1 c0       	rjmp	.+322    	; 0x858 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 716:	88 30       	cpi	r24, 0x08	; 8
 718:	81 f4       	brne	.+32     	; 0x73a <__vector_11+0x1be>
 71a:	60 38       	cpi	r22, 0x80	; 128
 71c:	09 f0       	breq	.+2      	; 0x720 <__vector_11+0x1a4>
 71e:	95 c0       	rjmp	.+298    	; 0x84a <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 720:	e8 ee       	ldi	r30, 0xE8	; 232
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	80 81       	ld	r24, Z
 726:	80 ff       	sbrs	r24, 0
 728:	fd cf       	rjmp	.-6      	; 0x724 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 72a:	80 91 0b 01 	lds	r24, 0x010B
 72e:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 732:	8e ef       	ldi	r24, 0xFE	; 254
 734:	80 93 e8 00 	sts	0x00E8, r24
 738:	8f c0       	rjmp	.+286    	; 0x858 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 73a:	81 32       	cpi	r24, 0x21	; 33
 73c:	b9 f4       	brne	.+46     	; 0x76c <__vector_11+0x1f0>
 73e:	61 3a       	cpi	r22, 0xA1	; 161
 740:	09 f0       	breq	.+2      	; 0x744 <__vector_11+0x1c8>
 742:	83 c0       	rjmp	.+262    	; 0x84a <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 744:	e8 ee       	ldi	r30, 0xE8	; 232
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	80 81       	ld	r24, Z
 74a:	80 ff       	sbrs	r24, 0
 74c:	fd cf       	rjmp	.-6      	; 0x748 <__vector_11+0x1cc>
 74e:	e0 e0       	ldi	r30, 0x00	; 0
 750:	f1 e0       	ldi	r31, 0x01	; 1
 752:	27 e0       	ldi	r18, 0x07	; 7
 754:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 756:	a1 ef       	ldi	r26, 0xF1	; 241
 758:	b0 e0       	ldi	r27, 0x00	; 0
 75a:	81 91       	ld	r24, Z+
 75c:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 75e:	e2 17       	cp	r30, r18
 760:	f3 07       	cpc	r31, r19
 762:	d9 f7       	brne	.-10     	; 0x75a <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 764:	8e ef       	ldi	r24, 0xFE	; 254
 766:	80 93 e8 00 	sts	0x00E8, r24
 76a:	76 c0       	rjmp	.+236    	; 0x858 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 76c:	80 32       	cpi	r24, 0x20	; 32
 76e:	d1 f4       	brne	.+52     	; 0x7a4 <__vector_11+0x228>
 770:	61 32       	cpi	r22, 0x21	; 33
 772:	09 f0       	breq	.+2      	; 0x776 <__vector_11+0x1fa>
 774:	6a c0       	rjmp	.+212    	; 0x84a <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 776:	e8 ee       	ldi	r30, 0xE8	; 232
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	80 81       	ld	r24, Z
 77c:	82 ff       	sbrs	r24, 2
 77e:	fd cf       	rjmp	.-6      	; 0x77a <__vector_11+0x1fe>
 780:	e0 e0       	ldi	r30, 0x00	; 0
 782:	f1 e0       	ldi	r31, 0x01	; 1
 784:	27 e0       	ldi	r18, 0x07	; 7
 786:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 788:	a1 ef       	ldi	r26, 0xF1	; 241
 78a:	b0 e0       	ldi	r27, 0x00	; 0
 78c:	8c 91       	ld	r24, X
 78e:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 790:	e2 17       	cp	r30, r18
 792:	f3 07       	cpc	r31, r19
 794:	d9 f7       	brne	.-10     	; 0x78c <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 796:	e8 ee       	ldi	r30, 0xE8	; 232
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	8b ef       	ldi	r24, 0xFB	; 251
 79c:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 79e:	8e ef       	ldi	r24, 0xFE	; 254
 7a0:	80 83       	st	Z, r24
 7a2:	5a c0       	rjmp	.+180    	; 0x858 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 7a4:	82 32       	cpi	r24, 0x22	; 34
 7a6:	71 f4       	brne	.+28     	; 0x7c4 <__vector_11+0x248>
 7a8:	61 32       	cpi	r22, 0x21	; 33
 7aa:	09 f0       	breq	.+2      	; 0x7ae <__vector_11+0x232>
 7ac:	4e c0       	rjmp	.+156    	; 0x84a <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
 7ae:	20 93 08 01 	sts	0x0108, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 7b2:	e8 ee       	ldi	r30, 0xE8	; 232
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	80 81       	ld	r24, Z
 7b8:	80 ff       	sbrs	r24, 0
 7ba:	fd cf       	rjmp	.-6      	; 0x7b6 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7bc:	8e ef       	ldi	r24, 0xFE	; 254
 7be:	80 93 e8 00 	sts	0x00E8, r24
 7c2:	4a c0       	rjmp	.+148    	; 0x858 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 7c4:	81 11       	cpse	r24, r1
 7c6:	1a c0       	rjmp	.+52     	; 0x7fc <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 7c8:	e8 ee       	ldi	r30, 0xE8	; 232
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	80 81       	ld	r24, Z
 7ce:	80 ff       	sbrs	r24, 0
 7d0:	fd cf       	rjmp	.-6      	; 0x7cc <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 7d2:	62 38       	cpi	r22, 0x82	; 130
 7d4:	51 f4       	brne	.+20     	; 0x7ea <__vector_11+0x26e>
				UENUM = wIndex;
 7d6:	e9 ee       	ldi	r30, 0xE9	; 233
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
 7dc:	80 91 eb 00 	lds	r24, 0x00EB
 7e0:	85 fb       	bst	r24, 5
 7e2:	88 27       	eor	r24, r24
 7e4:	80 f9       	bld	r24, 0
				UENUM = 0;
 7e6:	10 82       	st	Z, r1
 7e8:	01 c0       	rjmp	.+2      	; 0x7ec <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 7ea:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 7ec:	e1 ef       	ldi	r30, 0xF1	; 241
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	80 83       	st	Z, r24
			UEDATX = 0;
 7f2:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7f4:	8e ef       	ldi	r24, 0xFE	; 254
 7f6:	80 93 e8 00 	sts	0x00E8, r24
 7fa:	2e c0       	rjmp	.+92     	; 0x858 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 7fc:	98 2f       	mov	r25, r24
 7fe:	9d 7f       	andi	r25, 0xFD	; 253
 800:	91 30       	cpi	r25, 0x01	; 1
 802:	19 f5       	brne	.+70     	; 0x84a <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
 804:	62 30       	cpi	r22, 0x02	; 2
 806:	09 f5       	brne	.+66     	; 0x84a <__vector_11+0x2ce>
 808:	23 2b       	or	r18, r19
 80a:	f9 f4       	brne	.+62     	; 0x84a <__vector_11+0x2ce>
			i = wIndex & 0x7F;
 80c:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 80e:	9f ef       	ldi	r25, 0xFF	; 255
 810:	94 0f       	add	r25, r20
 812:	94 30       	cpi	r25, 0x04	; 4
 814:	d0 f4       	brcc	.+52     	; 0x84a <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 816:	9e ef       	ldi	r25, 0xFE	; 254
 818:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 81c:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
 820:	83 30       	cpi	r24, 0x03	; 3
 822:	21 f4       	brne	.+8      	; 0x82c <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 824:	81 e2       	ldi	r24, 0x21	; 33
 826:	80 93 eb 00 	sts	0x00EB, r24
 82a:	16 c0       	rjmp	.+44     	; 0x858 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 82c:	89 e1       	ldi	r24, 0x19	; 25
 82e:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	02 c0       	rjmp	.+4      	; 0x83c <__vector_11+0x2c0>
 838:	88 0f       	add	r24, r24
 83a:	99 1f       	adc	r25, r25
 83c:	4a 95       	dec	r20
 83e:	e2 f7       	brpl	.-8      	; 0x838 <__vector_11+0x2bc>
 840:	ea ee       	ldi	r30, 0xEA	; 234
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	80 83       	st	Z, r24
					UERST = 0;
 846:	10 82       	st	Z, r1
 848:	07 c0       	rjmp	.+14     	; 0x858 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 84a:	81 e2       	ldi	r24, 0x21	; 33
 84c:	80 93 eb 00 	sts	0x00EB, r24
 850:	03 c0       	rjmp	.+6      	; 0x858 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 852:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 854:	21 11       	cpse	r18, r1
 856:	f7 ce       	rjmp	.-530    	; 0x646 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 858:	ff 91       	pop	r31
 85a:	ef 91       	pop	r30
 85c:	df 91       	pop	r29
 85e:	cf 91       	pop	r28
 860:	bf 91       	pop	r27
 862:	af 91       	pop	r26
 864:	9f 91       	pop	r25
 866:	8f 91       	pop	r24
 868:	7f 91       	pop	r23
 86a:	6f 91       	pop	r22
 86c:	5f 91       	pop	r21
 86e:	4f 91       	pop	r20
 870:	3f 91       	pop	r19
 872:	2f 91       	pop	r18
 874:	1f 91       	pop	r17
 876:	0f 91       	pop	r16
 878:	0f 90       	pop	r0
 87a:	0f be       	out	0x3f, r0	; 63
 87c:	0f 90       	pop	r0
 87e:	1f 90       	pop	r1
 880:	18 95       	reti

00000882 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
 882:	ef 92       	push	r14
 884:	ff 92       	push	r15
 886:	0f 93       	push	r16
 888:	1f 93       	push	r17
 88a:	cf 93       	push	r28
 88c:	df 93       	push	r29
 88e:	cd b7       	in	r28, 0x3d	; 61
 890:	de b7       	in	r29, 0x3e	; 62
 892:	27 97       	sbiw	r28, 0x07	; 7
 894:	0f b6       	in	r0, 0x3f	; 63
 896:	f8 94       	cli
 898:	de bf       	out	0x3e, r29	; 62
 89a:	0f be       	out	0x3f, r0	; 63
 89c:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
 89e:	8e 01       	movw	r16, r28
 8a0:	0f 5f       	subi	r16, 0xFF	; 255
 8a2:	1f 4f       	sbci	r17, 0xFF	; 255
 8a4:	27 e0       	ldi	r18, 0x07	; 7
 8a6:	f8 01       	movw	r30, r16
 8a8:	11 92       	st	Z+, r1
 8aa:	2a 95       	dec	r18
 8ac:	e9 f7       	brne	.-6      	; 0x8a8 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 8ae:	4a e0       	ldi	r20, 0x0A	; 10
 8b0:	b8 01       	movw	r22, r16
 8b2:	0e 94 85 06 	call	0xd0a	; 0xd0a <__itoa_ncheck>
 8b6:	7e 01       	movw	r14, r28
 8b8:	f8 e0       	ldi	r31, 0x08	; 8
 8ba:	ef 0e       	add	r14, r31
 8bc:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
 8be:	f8 01       	movw	r30, r16
 8c0:	81 91       	ld	r24, Z+
 8c2:	8f 01       	movw	r16, r30
 8c4:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
 8c6:	0e 94 25 02 	call	0x44a	; 0x44a <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
 8ca:	0e 15       	cp	r16, r14
 8cc:	1f 05       	cpc	r17, r15
 8ce:	b9 f7       	brne	.-18     	; 0x8be <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
 8d0:	27 96       	adiw	r28, 0x07	; 7
 8d2:	0f b6       	in	r0, 0x3f	; 63
 8d4:	f8 94       	cli
 8d6:	de bf       	out	0x3e, r29	; 62
 8d8:	0f be       	out	0x3f, r0	; 63
 8da:	cd bf       	out	0x3d, r28	; 61
 8dc:	df 91       	pop	r29
 8de:	cf 91       	pop	r28
 8e0:	1f 91       	pop	r17
 8e2:	0f 91       	pop	r16
 8e4:	ff 90       	pop	r15
 8e6:	ef 90       	pop	r14
 8e8:	08 95       	ret

000008ea <__subsf3>:
 8ea:	50 58       	subi	r21, 0x80	; 128

000008ec <__addsf3>:
 8ec:	bb 27       	eor	r27, r27
 8ee:	aa 27       	eor	r26, r26
 8f0:	0e 94 8d 04 	call	0x91a	; 0x91a <__addsf3x>
 8f4:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__fp_round>
 8f8:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fp_pscA>
 8fc:	38 f0       	brcs	.+14     	; 0x90c <__addsf3+0x20>
 8fe:	0e 94 d7 05 	call	0xbae	; 0xbae <__fp_pscB>
 902:	20 f0       	brcs	.+8      	; 0x90c <__addsf3+0x20>
 904:	39 f4       	brne	.+14     	; 0x914 <__addsf3+0x28>
 906:	9f 3f       	cpi	r25, 0xFF	; 255
 908:	19 f4       	brne	.+6      	; 0x910 <__addsf3+0x24>
 90a:	26 f4       	brtc	.+8      	; 0x914 <__addsf3+0x28>
 90c:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_nan>
 910:	0e f4       	brtc	.+2      	; 0x914 <__addsf3+0x28>
 912:	e0 95       	com	r30
 914:	e7 fb       	bst	r30, 7
 916:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_inf>

0000091a <__addsf3x>:
 91a:	e9 2f       	mov	r30, r25
 91c:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_split3>
 920:	58 f3       	brcs	.-42     	; 0x8f8 <__addsf3+0xc>
 922:	ba 17       	cp	r27, r26
 924:	62 07       	cpc	r22, r18
 926:	73 07       	cpc	r23, r19
 928:	84 07       	cpc	r24, r20
 92a:	95 07       	cpc	r25, r21
 92c:	20 f0       	brcs	.+8      	; 0x936 <__addsf3x+0x1c>
 92e:	79 f4       	brne	.+30     	; 0x94e <__addsf3x+0x34>
 930:	a6 f5       	brtc	.+104    	; 0x99a <__addsf3x+0x80>
 932:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_zero>
 936:	0e f4       	brtc	.+2      	; 0x93a <__addsf3x+0x20>
 938:	e0 95       	com	r30
 93a:	0b 2e       	mov	r0, r27
 93c:	ba 2f       	mov	r27, r26
 93e:	a0 2d       	mov	r26, r0
 940:	0b 01       	movw	r0, r22
 942:	b9 01       	movw	r22, r18
 944:	90 01       	movw	r18, r0
 946:	0c 01       	movw	r0, r24
 948:	ca 01       	movw	r24, r20
 94a:	a0 01       	movw	r20, r0
 94c:	11 24       	eor	r1, r1
 94e:	ff 27       	eor	r31, r31
 950:	59 1b       	sub	r21, r25
 952:	99 f0       	breq	.+38     	; 0x97a <__addsf3x+0x60>
 954:	59 3f       	cpi	r21, 0xF9	; 249
 956:	50 f4       	brcc	.+20     	; 0x96c <__addsf3x+0x52>
 958:	50 3e       	cpi	r21, 0xE0	; 224
 95a:	68 f1       	brcs	.+90     	; 0x9b6 <__addsf3x+0x9c>
 95c:	1a 16       	cp	r1, r26
 95e:	f0 40       	sbci	r31, 0x00	; 0
 960:	a2 2f       	mov	r26, r18
 962:	23 2f       	mov	r18, r19
 964:	34 2f       	mov	r19, r20
 966:	44 27       	eor	r20, r20
 968:	58 5f       	subi	r21, 0xF8	; 248
 96a:	f3 cf       	rjmp	.-26     	; 0x952 <__addsf3x+0x38>
 96c:	46 95       	lsr	r20
 96e:	37 95       	ror	r19
 970:	27 95       	ror	r18
 972:	a7 95       	ror	r26
 974:	f0 40       	sbci	r31, 0x00	; 0
 976:	53 95       	inc	r21
 978:	c9 f7       	brne	.-14     	; 0x96c <__addsf3x+0x52>
 97a:	7e f4       	brtc	.+30     	; 0x99a <__addsf3x+0x80>
 97c:	1f 16       	cp	r1, r31
 97e:	ba 0b       	sbc	r27, r26
 980:	62 0b       	sbc	r22, r18
 982:	73 0b       	sbc	r23, r19
 984:	84 0b       	sbc	r24, r20
 986:	ba f0       	brmi	.+46     	; 0x9b6 <__addsf3x+0x9c>
 988:	91 50       	subi	r25, 0x01	; 1
 98a:	a1 f0       	breq	.+40     	; 0x9b4 <__addsf3x+0x9a>
 98c:	ff 0f       	add	r31, r31
 98e:	bb 1f       	adc	r27, r27
 990:	66 1f       	adc	r22, r22
 992:	77 1f       	adc	r23, r23
 994:	88 1f       	adc	r24, r24
 996:	c2 f7       	brpl	.-16     	; 0x988 <__addsf3x+0x6e>
 998:	0e c0       	rjmp	.+28     	; 0x9b6 <__addsf3x+0x9c>
 99a:	ba 0f       	add	r27, r26
 99c:	62 1f       	adc	r22, r18
 99e:	73 1f       	adc	r23, r19
 9a0:	84 1f       	adc	r24, r20
 9a2:	48 f4       	brcc	.+18     	; 0x9b6 <__addsf3x+0x9c>
 9a4:	87 95       	ror	r24
 9a6:	77 95       	ror	r23
 9a8:	67 95       	ror	r22
 9aa:	b7 95       	ror	r27
 9ac:	f7 95       	ror	r31
 9ae:	9e 3f       	cpi	r25, 0xFE	; 254
 9b0:	08 f0       	brcs	.+2      	; 0x9b4 <__addsf3x+0x9a>
 9b2:	b0 cf       	rjmp	.-160    	; 0x914 <__addsf3+0x28>
 9b4:	93 95       	inc	r25
 9b6:	88 0f       	add	r24, r24
 9b8:	08 f0       	brcs	.+2      	; 0x9bc <__addsf3x+0xa2>
 9ba:	99 27       	eor	r25, r25
 9bc:	ee 0f       	add	r30, r30
 9be:	97 95       	ror	r25
 9c0:	87 95       	ror	r24
 9c2:	08 95       	ret

000009c4 <__divsf3>:
 9c4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__divsf3x>
 9c8:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__fp_round>
 9cc:	0e 94 d7 05 	call	0xbae	; 0xbae <__fp_pscB>
 9d0:	58 f0       	brcs	.+22     	; 0x9e8 <__divsf3+0x24>
 9d2:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fp_pscA>
 9d6:	40 f0       	brcs	.+16     	; 0x9e8 <__divsf3+0x24>
 9d8:	29 f4       	brne	.+10     	; 0x9e4 <__divsf3+0x20>
 9da:	5f 3f       	cpi	r21, 0xFF	; 255
 9dc:	29 f0       	breq	.+10     	; 0x9e8 <__divsf3+0x24>
 9de:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_inf>
 9e2:	51 11       	cpse	r21, r1
 9e4:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_szero>
 9e8:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_nan>

000009ec <__divsf3x>:
 9ec:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_split3>
 9f0:	68 f3       	brcs	.-38     	; 0x9cc <__divsf3+0x8>

000009f2 <__divsf3_pse>:
 9f2:	99 23       	and	r25, r25
 9f4:	b1 f3       	breq	.-20     	; 0x9e2 <__divsf3+0x1e>
 9f6:	55 23       	and	r21, r21
 9f8:	91 f3       	breq	.-28     	; 0x9de <__divsf3+0x1a>
 9fa:	95 1b       	sub	r25, r21
 9fc:	55 0b       	sbc	r21, r21
 9fe:	bb 27       	eor	r27, r27
 a00:	aa 27       	eor	r26, r26
 a02:	62 17       	cp	r22, r18
 a04:	73 07       	cpc	r23, r19
 a06:	84 07       	cpc	r24, r20
 a08:	38 f0       	brcs	.+14     	; 0xa18 <__divsf3_pse+0x26>
 a0a:	9f 5f       	subi	r25, 0xFF	; 255
 a0c:	5f 4f       	sbci	r21, 0xFF	; 255
 a0e:	22 0f       	add	r18, r18
 a10:	33 1f       	adc	r19, r19
 a12:	44 1f       	adc	r20, r20
 a14:	aa 1f       	adc	r26, r26
 a16:	a9 f3       	breq	.-22     	; 0xa02 <__divsf3_pse+0x10>
 a18:	35 d0       	rcall	.+106    	; 0xa84 <__divsf3_pse+0x92>
 a1a:	0e 2e       	mov	r0, r30
 a1c:	3a f0       	brmi	.+14     	; 0xa2c <__divsf3_pse+0x3a>
 a1e:	e0 e8       	ldi	r30, 0x80	; 128
 a20:	32 d0       	rcall	.+100    	; 0xa86 <__divsf3_pse+0x94>
 a22:	91 50       	subi	r25, 0x01	; 1
 a24:	50 40       	sbci	r21, 0x00	; 0
 a26:	e6 95       	lsr	r30
 a28:	00 1c       	adc	r0, r0
 a2a:	ca f7       	brpl	.-14     	; 0xa1e <__divsf3_pse+0x2c>
 a2c:	2b d0       	rcall	.+86     	; 0xa84 <__divsf3_pse+0x92>
 a2e:	fe 2f       	mov	r31, r30
 a30:	29 d0       	rcall	.+82     	; 0xa84 <__divsf3_pse+0x92>
 a32:	66 0f       	add	r22, r22
 a34:	77 1f       	adc	r23, r23
 a36:	88 1f       	adc	r24, r24
 a38:	bb 1f       	adc	r27, r27
 a3a:	26 17       	cp	r18, r22
 a3c:	37 07       	cpc	r19, r23
 a3e:	48 07       	cpc	r20, r24
 a40:	ab 07       	cpc	r26, r27
 a42:	b0 e8       	ldi	r27, 0x80	; 128
 a44:	09 f0       	breq	.+2      	; 0xa48 <__divsf3_pse+0x56>
 a46:	bb 0b       	sbc	r27, r27
 a48:	80 2d       	mov	r24, r0
 a4a:	bf 01       	movw	r22, r30
 a4c:	ff 27       	eor	r31, r31
 a4e:	93 58       	subi	r25, 0x83	; 131
 a50:	5f 4f       	sbci	r21, 0xFF	; 255
 a52:	3a f0       	brmi	.+14     	; 0xa62 <__divsf3_pse+0x70>
 a54:	9e 3f       	cpi	r25, 0xFE	; 254
 a56:	51 05       	cpc	r21, r1
 a58:	78 f0       	brcs	.+30     	; 0xa78 <__divsf3_pse+0x86>
 a5a:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_inf>
 a5e:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_szero>
 a62:	5f 3f       	cpi	r21, 0xFF	; 255
 a64:	e4 f3       	brlt	.-8      	; 0xa5e <__divsf3_pse+0x6c>
 a66:	98 3e       	cpi	r25, 0xE8	; 232
 a68:	d4 f3       	brlt	.-12     	; 0xa5e <__divsf3_pse+0x6c>
 a6a:	86 95       	lsr	r24
 a6c:	77 95       	ror	r23
 a6e:	67 95       	ror	r22
 a70:	b7 95       	ror	r27
 a72:	f7 95       	ror	r31
 a74:	9f 5f       	subi	r25, 0xFF	; 255
 a76:	c9 f7       	brne	.-14     	; 0xa6a <__divsf3_pse+0x78>
 a78:	88 0f       	add	r24, r24
 a7a:	91 1d       	adc	r25, r1
 a7c:	96 95       	lsr	r25
 a7e:	87 95       	ror	r24
 a80:	97 f9       	bld	r25, 7
 a82:	08 95       	ret
 a84:	e1 e0       	ldi	r30, 0x01	; 1
 a86:	66 0f       	add	r22, r22
 a88:	77 1f       	adc	r23, r23
 a8a:	88 1f       	adc	r24, r24
 a8c:	bb 1f       	adc	r27, r27
 a8e:	62 17       	cp	r22, r18
 a90:	73 07       	cpc	r23, r19
 a92:	84 07       	cpc	r24, r20
 a94:	ba 07       	cpc	r27, r26
 a96:	20 f0       	brcs	.+8      	; 0xaa0 <__divsf3_pse+0xae>
 a98:	62 1b       	sub	r22, r18
 a9a:	73 0b       	sbc	r23, r19
 a9c:	84 0b       	sbc	r24, r20
 a9e:	ba 0b       	sbc	r27, r26
 aa0:	ee 1f       	adc	r30, r30
 aa2:	88 f7       	brcc	.-30     	; 0xa86 <__divsf3_pse+0x94>
 aa4:	e0 95       	com	r30
 aa6:	08 95       	ret

00000aa8 <__fixsfsi>:
 aa8:	0e 94 5b 05 	call	0xab6	; 0xab6 <__fixunssfsi>
 aac:	68 94       	set
 aae:	b1 11       	cpse	r27, r1
 ab0:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_szero>
 ab4:	08 95       	ret

00000ab6 <__fixunssfsi>:
 ab6:	0e 94 f7 05 	call	0xbee	; 0xbee <__fp_splitA>
 aba:	88 f0       	brcs	.+34     	; 0xade <__fixunssfsi+0x28>
 abc:	9f 57       	subi	r25, 0x7F	; 127
 abe:	98 f0       	brcs	.+38     	; 0xae6 <__fixunssfsi+0x30>
 ac0:	b9 2f       	mov	r27, r25
 ac2:	99 27       	eor	r25, r25
 ac4:	b7 51       	subi	r27, 0x17	; 23
 ac6:	b0 f0       	brcs	.+44     	; 0xaf4 <__fixunssfsi+0x3e>
 ac8:	e1 f0       	breq	.+56     	; 0xb02 <__stack+0x3>
 aca:	66 0f       	add	r22, r22
 acc:	77 1f       	adc	r23, r23
 ace:	88 1f       	adc	r24, r24
 ad0:	99 1f       	adc	r25, r25
 ad2:	1a f0       	brmi	.+6      	; 0xada <__fixunssfsi+0x24>
 ad4:	ba 95       	dec	r27
 ad6:	c9 f7       	brne	.-14     	; 0xaca <__fixunssfsi+0x14>
 ad8:	14 c0       	rjmp	.+40     	; 0xb02 <__stack+0x3>
 ada:	b1 30       	cpi	r27, 0x01	; 1
 adc:	91 f0       	breq	.+36     	; 0xb02 <__stack+0x3>
 ade:	0e 94 11 06 	call	0xc22	; 0xc22 <__fp_zero>
 ae2:	b1 e0       	ldi	r27, 0x01	; 1
 ae4:	08 95       	ret
 ae6:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_zero>
 aea:	67 2f       	mov	r22, r23
 aec:	78 2f       	mov	r23, r24
 aee:	88 27       	eor	r24, r24
 af0:	b8 5f       	subi	r27, 0xF8	; 248
 af2:	39 f0       	breq	.+14     	; 0xb02 <__stack+0x3>
 af4:	b9 3f       	cpi	r27, 0xF9	; 249
 af6:	cc f3       	brlt	.-14     	; 0xaea <__fixunssfsi+0x34>
 af8:	86 95       	lsr	r24
 afa:	77 95       	ror	r23
 afc:	67 95       	ror	r22
 afe:	b3 95       	inc	r27
 b00:	d9 f7       	brne	.-10     	; 0xaf8 <__fixunssfsi+0x42>
 b02:	3e f4       	brtc	.+14     	; 0xb12 <__stack+0x13>
 b04:	90 95       	com	r25
 b06:	80 95       	com	r24
 b08:	70 95       	com	r23
 b0a:	61 95       	neg	r22
 b0c:	7f 4f       	sbci	r23, 0xFF	; 255
 b0e:	8f 4f       	sbci	r24, 0xFF	; 255
 b10:	9f 4f       	sbci	r25, 0xFF	; 255
 b12:	08 95       	ret

00000b14 <__floatunsisf>:
 b14:	e8 94       	clt
 b16:	09 c0       	rjmp	.+18     	; 0xb2a <__floatsisf+0x12>

00000b18 <__floatsisf>:
 b18:	97 fb       	bst	r25, 7
 b1a:	3e f4       	brtc	.+14     	; 0xb2a <__floatsisf+0x12>
 b1c:	90 95       	com	r25
 b1e:	80 95       	com	r24
 b20:	70 95       	com	r23
 b22:	61 95       	neg	r22
 b24:	7f 4f       	sbci	r23, 0xFF	; 255
 b26:	8f 4f       	sbci	r24, 0xFF	; 255
 b28:	9f 4f       	sbci	r25, 0xFF	; 255
 b2a:	99 23       	and	r25, r25
 b2c:	a9 f0       	breq	.+42     	; 0xb58 <__floatsisf+0x40>
 b2e:	f9 2f       	mov	r31, r25
 b30:	96 e9       	ldi	r25, 0x96	; 150
 b32:	bb 27       	eor	r27, r27
 b34:	93 95       	inc	r25
 b36:	f6 95       	lsr	r31
 b38:	87 95       	ror	r24
 b3a:	77 95       	ror	r23
 b3c:	67 95       	ror	r22
 b3e:	b7 95       	ror	r27
 b40:	f1 11       	cpse	r31, r1
 b42:	f8 cf       	rjmp	.-16     	; 0xb34 <__floatsisf+0x1c>
 b44:	fa f4       	brpl	.+62     	; 0xb84 <__floatsisf+0x6c>
 b46:	bb 0f       	add	r27, r27
 b48:	11 f4       	brne	.+4      	; 0xb4e <__floatsisf+0x36>
 b4a:	60 ff       	sbrs	r22, 0
 b4c:	1b c0       	rjmp	.+54     	; 0xb84 <__floatsisf+0x6c>
 b4e:	6f 5f       	subi	r22, 0xFF	; 255
 b50:	7f 4f       	sbci	r23, 0xFF	; 255
 b52:	8f 4f       	sbci	r24, 0xFF	; 255
 b54:	9f 4f       	sbci	r25, 0xFF	; 255
 b56:	16 c0       	rjmp	.+44     	; 0xb84 <__floatsisf+0x6c>
 b58:	88 23       	and	r24, r24
 b5a:	11 f0       	breq	.+4      	; 0xb60 <__floatsisf+0x48>
 b5c:	96 e9       	ldi	r25, 0x96	; 150
 b5e:	11 c0       	rjmp	.+34     	; 0xb82 <__floatsisf+0x6a>
 b60:	77 23       	and	r23, r23
 b62:	21 f0       	breq	.+8      	; 0xb6c <__floatsisf+0x54>
 b64:	9e e8       	ldi	r25, 0x8E	; 142
 b66:	87 2f       	mov	r24, r23
 b68:	76 2f       	mov	r23, r22
 b6a:	05 c0       	rjmp	.+10     	; 0xb76 <__floatsisf+0x5e>
 b6c:	66 23       	and	r22, r22
 b6e:	71 f0       	breq	.+28     	; 0xb8c <__floatsisf+0x74>
 b70:	96 e8       	ldi	r25, 0x86	; 134
 b72:	86 2f       	mov	r24, r22
 b74:	70 e0       	ldi	r23, 0x00	; 0
 b76:	60 e0       	ldi	r22, 0x00	; 0
 b78:	2a f0       	brmi	.+10     	; 0xb84 <__floatsisf+0x6c>
 b7a:	9a 95       	dec	r25
 b7c:	66 0f       	add	r22, r22
 b7e:	77 1f       	adc	r23, r23
 b80:	88 1f       	adc	r24, r24
 b82:	da f7       	brpl	.-10     	; 0xb7a <__floatsisf+0x62>
 b84:	88 0f       	add	r24, r24
 b86:	96 95       	lsr	r25
 b88:	87 95       	ror	r24
 b8a:	97 f9       	bld	r25, 7
 b8c:	08 95       	ret

00000b8e <__fp_inf>:
 b8e:	97 f9       	bld	r25, 7
 b90:	9f 67       	ori	r25, 0x7F	; 127
 b92:	80 e8       	ldi	r24, 0x80	; 128
 b94:	70 e0       	ldi	r23, 0x00	; 0
 b96:	60 e0       	ldi	r22, 0x00	; 0
 b98:	08 95       	ret

00000b9a <__fp_nan>:
 b9a:	9f ef       	ldi	r25, 0xFF	; 255
 b9c:	80 ec       	ldi	r24, 0xC0	; 192
 b9e:	08 95       	ret

00000ba0 <__fp_pscA>:
 ba0:	00 24       	eor	r0, r0
 ba2:	0a 94       	dec	r0
 ba4:	16 16       	cp	r1, r22
 ba6:	17 06       	cpc	r1, r23
 ba8:	18 06       	cpc	r1, r24
 baa:	09 06       	cpc	r0, r25
 bac:	08 95       	ret

00000bae <__fp_pscB>:
 bae:	00 24       	eor	r0, r0
 bb0:	0a 94       	dec	r0
 bb2:	12 16       	cp	r1, r18
 bb4:	13 06       	cpc	r1, r19
 bb6:	14 06       	cpc	r1, r20
 bb8:	05 06       	cpc	r0, r21
 bba:	08 95       	ret

00000bbc <__fp_round>:
 bbc:	09 2e       	mov	r0, r25
 bbe:	03 94       	inc	r0
 bc0:	00 0c       	add	r0, r0
 bc2:	11 f4       	brne	.+4      	; 0xbc8 <__fp_round+0xc>
 bc4:	88 23       	and	r24, r24
 bc6:	52 f0       	brmi	.+20     	; 0xbdc <__fp_round+0x20>
 bc8:	bb 0f       	add	r27, r27
 bca:	40 f4       	brcc	.+16     	; 0xbdc <__fp_round+0x20>
 bcc:	bf 2b       	or	r27, r31
 bce:	11 f4       	brne	.+4      	; 0xbd4 <__fp_round+0x18>
 bd0:	60 ff       	sbrs	r22, 0
 bd2:	04 c0       	rjmp	.+8      	; 0xbdc <__fp_round+0x20>
 bd4:	6f 5f       	subi	r22, 0xFF	; 255
 bd6:	7f 4f       	sbci	r23, 0xFF	; 255
 bd8:	8f 4f       	sbci	r24, 0xFF	; 255
 bda:	9f 4f       	sbci	r25, 0xFF	; 255
 bdc:	08 95       	ret

00000bde <__fp_split3>:
 bde:	57 fd       	sbrc	r21, 7
 be0:	90 58       	subi	r25, 0x80	; 128
 be2:	44 0f       	add	r20, r20
 be4:	55 1f       	adc	r21, r21
 be6:	59 f0       	breq	.+22     	; 0xbfe <__fp_splitA+0x10>
 be8:	5f 3f       	cpi	r21, 0xFF	; 255
 bea:	71 f0       	breq	.+28     	; 0xc08 <__fp_splitA+0x1a>
 bec:	47 95       	ror	r20

00000bee <__fp_splitA>:
 bee:	88 0f       	add	r24, r24
 bf0:	97 fb       	bst	r25, 7
 bf2:	99 1f       	adc	r25, r25
 bf4:	61 f0       	breq	.+24     	; 0xc0e <__fp_splitA+0x20>
 bf6:	9f 3f       	cpi	r25, 0xFF	; 255
 bf8:	79 f0       	breq	.+30     	; 0xc18 <__fp_splitA+0x2a>
 bfa:	87 95       	ror	r24
 bfc:	08 95       	ret
 bfe:	12 16       	cp	r1, r18
 c00:	13 06       	cpc	r1, r19
 c02:	14 06       	cpc	r1, r20
 c04:	55 1f       	adc	r21, r21
 c06:	f2 cf       	rjmp	.-28     	; 0xbec <__fp_split3+0xe>
 c08:	46 95       	lsr	r20
 c0a:	f1 df       	rcall	.-30     	; 0xbee <__fp_splitA>
 c0c:	08 c0       	rjmp	.+16     	; 0xc1e <__fp_splitA+0x30>
 c0e:	16 16       	cp	r1, r22
 c10:	17 06       	cpc	r1, r23
 c12:	18 06       	cpc	r1, r24
 c14:	99 1f       	adc	r25, r25
 c16:	f1 cf       	rjmp	.-30     	; 0xbfa <__fp_splitA+0xc>
 c18:	86 95       	lsr	r24
 c1a:	71 05       	cpc	r23, r1
 c1c:	61 05       	cpc	r22, r1
 c1e:	08 94       	sec
 c20:	08 95       	ret

00000c22 <__fp_zero>:
 c22:	e8 94       	clt

00000c24 <__fp_szero>:
 c24:	bb 27       	eor	r27, r27
 c26:	66 27       	eor	r22, r22
 c28:	77 27       	eor	r23, r23
 c2a:	cb 01       	movw	r24, r22
 c2c:	97 f9       	bld	r25, 7
 c2e:	08 95       	ret

00000c30 <__mulsf3>:
 c30:	0e 94 2b 06 	call	0xc56	; 0xc56 <__mulsf3x>
 c34:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__fp_round>
 c38:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fp_pscA>
 c3c:	38 f0       	brcs	.+14     	; 0xc4c <__mulsf3+0x1c>
 c3e:	0e 94 d7 05 	call	0xbae	; 0xbae <__fp_pscB>
 c42:	20 f0       	brcs	.+8      	; 0xc4c <__mulsf3+0x1c>
 c44:	95 23       	and	r25, r21
 c46:	11 f0       	breq	.+4      	; 0xc4c <__mulsf3+0x1c>
 c48:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_inf>
 c4c:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_nan>
 c50:	11 24       	eor	r1, r1
 c52:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_szero>

00000c56 <__mulsf3x>:
 c56:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_split3>
 c5a:	70 f3       	brcs	.-36     	; 0xc38 <__mulsf3+0x8>

00000c5c <__mulsf3_pse>:
 c5c:	95 9f       	mul	r25, r21
 c5e:	c1 f3       	breq	.-16     	; 0xc50 <__mulsf3+0x20>
 c60:	95 0f       	add	r25, r21
 c62:	50 e0       	ldi	r21, 0x00	; 0
 c64:	55 1f       	adc	r21, r21
 c66:	62 9f       	mul	r22, r18
 c68:	f0 01       	movw	r30, r0
 c6a:	72 9f       	mul	r23, r18
 c6c:	bb 27       	eor	r27, r27
 c6e:	f0 0d       	add	r31, r0
 c70:	b1 1d       	adc	r27, r1
 c72:	63 9f       	mul	r22, r19
 c74:	aa 27       	eor	r26, r26
 c76:	f0 0d       	add	r31, r0
 c78:	b1 1d       	adc	r27, r1
 c7a:	aa 1f       	adc	r26, r26
 c7c:	64 9f       	mul	r22, r20
 c7e:	66 27       	eor	r22, r22
 c80:	b0 0d       	add	r27, r0
 c82:	a1 1d       	adc	r26, r1
 c84:	66 1f       	adc	r22, r22
 c86:	82 9f       	mul	r24, r18
 c88:	22 27       	eor	r18, r18
 c8a:	b0 0d       	add	r27, r0
 c8c:	a1 1d       	adc	r26, r1
 c8e:	62 1f       	adc	r22, r18
 c90:	73 9f       	mul	r23, r19
 c92:	b0 0d       	add	r27, r0
 c94:	a1 1d       	adc	r26, r1
 c96:	62 1f       	adc	r22, r18
 c98:	83 9f       	mul	r24, r19
 c9a:	a0 0d       	add	r26, r0
 c9c:	61 1d       	adc	r22, r1
 c9e:	22 1f       	adc	r18, r18
 ca0:	74 9f       	mul	r23, r20
 ca2:	33 27       	eor	r19, r19
 ca4:	a0 0d       	add	r26, r0
 ca6:	61 1d       	adc	r22, r1
 ca8:	23 1f       	adc	r18, r19
 caa:	84 9f       	mul	r24, r20
 cac:	60 0d       	add	r22, r0
 cae:	21 1d       	adc	r18, r1
 cb0:	82 2f       	mov	r24, r18
 cb2:	76 2f       	mov	r23, r22
 cb4:	6a 2f       	mov	r22, r26
 cb6:	11 24       	eor	r1, r1
 cb8:	9f 57       	subi	r25, 0x7F	; 127
 cba:	50 40       	sbci	r21, 0x00	; 0
 cbc:	9a f0       	brmi	.+38     	; 0xce4 <__mulsf3_pse+0x88>
 cbe:	f1 f0       	breq	.+60     	; 0xcfc <__mulsf3_pse+0xa0>
 cc0:	88 23       	and	r24, r24
 cc2:	4a f0       	brmi	.+18     	; 0xcd6 <__mulsf3_pse+0x7a>
 cc4:	ee 0f       	add	r30, r30
 cc6:	ff 1f       	adc	r31, r31
 cc8:	bb 1f       	adc	r27, r27
 cca:	66 1f       	adc	r22, r22
 ccc:	77 1f       	adc	r23, r23
 cce:	88 1f       	adc	r24, r24
 cd0:	91 50       	subi	r25, 0x01	; 1
 cd2:	50 40       	sbci	r21, 0x00	; 0
 cd4:	a9 f7       	brne	.-22     	; 0xcc0 <__mulsf3_pse+0x64>
 cd6:	9e 3f       	cpi	r25, 0xFE	; 254
 cd8:	51 05       	cpc	r21, r1
 cda:	80 f0       	brcs	.+32     	; 0xcfc <__mulsf3_pse+0xa0>
 cdc:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_inf>
 ce0:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_szero>
 ce4:	5f 3f       	cpi	r21, 0xFF	; 255
 ce6:	e4 f3       	brlt	.-8      	; 0xce0 <__mulsf3_pse+0x84>
 ce8:	98 3e       	cpi	r25, 0xE8	; 232
 cea:	d4 f3       	brlt	.-12     	; 0xce0 <__mulsf3_pse+0x84>
 cec:	86 95       	lsr	r24
 cee:	77 95       	ror	r23
 cf0:	67 95       	ror	r22
 cf2:	b7 95       	ror	r27
 cf4:	f7 95       	ror	r31
 cf6:	e7 95       	ror	r30
 cf8:	9f 5f       	subi	r25, 0xFF	; 255
 cfa:	c1 f7       	brne	.-16     	; 0xcec <__mulsf3_pse+0x90>
 cfc:	fe 2b       	or	r31, r30
 cfe:	88 0f       	add	r24, r24
 d00:	91 1d       	adc	r25, r1
 d02:	96 95       	lsr	r25
 d04:	87 95       	ror	r24
 d06:	97 f9       	bld	r25, 7
 d08:	08 95       	ret

00000d0a <__itoa_ncheck>:
 d0a:	bb 27       	eor	r27, r27
 d0c:	4a 30       	cpi	r20, 0x0A	; 10
 d0e:	31 f4       	brne	.+12     	; 0xd1c <__itoa_ncheck+0x12>
 d10:	99 23       	and	r25, r25
 d12:	22 f4       	brpl	.+8      	; 0xd1c <__itoa_ncheck+0x12>
 d14:	bd e2       	ldi	r27, 0x2D	; 45
 d16:	90 95       	com	r25
 d18:	81 95       	neg	r24
 d1a:	9f 4f       	sbci	r25, 0xFF	; 255
 d1c:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__utoa_common>

00000d20 <__utoa_ncheck>:
 d20:	bb 27       	eor	r27, r27

00000d22 <__utoa_common>:
 d22:	fb 01       	movw	r30, r22
 d24:	55 27       	eor	r21, r21
 d26:	aa 27       	eor	r26, r26
 d28:	88 0f       	add	r24, r24
 d2a:	99 1f       	adc	r25, r25
 d2c:	aa 1f       	adc	r26, r26
 d2e:	a4 17       	cp	r26, r20
 d30:	10 f0       	brcs	.+4      	; 0xd36 <__utoa_common+0x14>
 d32:	a4 1b       	sub	r26, r20
 d34:	83 95       	inc	r24
 d36:	50 51       	subi	r21, 0x10	; 16
 d38:	b9 f7       	brne	.-18     	; 0xd28 <__utoa_common+0x6>
 d3a:	a0 5d       	subi	r26, 0xD0	; 208
 d3c:	aa 33       	cpi	r26, 0x3A	; 58
 d3e:	08 f0       	brcs	.+2      	; 0xd42 <__utoa_common+0x20>
 d40:	a9 5d       	subi	r26, 0xD9	; 217
 d42:	a1 93       	st	Z+, r26
 d44:	00 97       	sbiw	r24, 0x00	; 0
 d46:	79 f7       	brne	.-34     	; 0xd26 <__utoa_common+0x4>
 d48:	b1 11       	cpse	r27, r1
 d4a:	b1 93       	st	Z+, r27
 d4c:	11 92       	st	Z+, r1
 d4e:	cb 01       	movw	r24, r22
 d50:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <strrev>

00000d54 <strrev>:
 d54:	dc 01       	movw	r26, r24
 d56:	fc 01       	movw	r30, r24
 d58:	67 2f       	mov	r22, r23
 d5a:	71 91       	ld	r23, Z+
 d5c:	77 23       	and	r23, r23
 d5e:	e1 f7       	brne	.-8      	; 0xd58 <strrev+0x4>
 d60:	32 97       	sbiw	r30, 0x02	; 2
 d62:	04 c0       	rjmp	.+8      	; 0xd6c <strrev+0x18>
 d64:	7c 91       	ld	r23, X
 d66:	6d 93       	st	X+, r22
 d68:	70 83       	st	Z, r23
 d6a:	62 91       	ld	r22, -Z
 d6c:	ae 17       	cp	r26, r30
 d6e:	bf 07       	cpc	r27, r31
 d70:	c8 f3       	brcs	.-14     	; 0xd64 <strrev+0x10>
 d72:	08 95       	ret

00000d74 <_exit>:
 d74:	f8 94       	cli

00000d76 <__stop_program>:
 d76:	ff cf       	rjmp	.-2      	; 0xd76 <__stop_program>
